# bot/main.py
import asyncio
import aiocron, pytz, datetime
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

from bot.utils.config import BOT_TOKEN, DB_DSN
from bot.db import init_db, db
from bot.handlers import register_handlers

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CEST = pytz.timezone("Europe/Prague")

async def main():
    logger.info(f"‚ñ∂Ô∏è Using DB_DSN: {DB_DSN!r}")
    logger.info("üîå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é –±–æ—Ç–∞...")
    global BOT
    BOT = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())

    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –ë–î (Supabase)
    await init_db()

    register_handlers(dp)

    aiocron.crontab(
        '*/1 * * * *',          # 07:00 UTC ‚âà 09:00 CEST
        func=daily_reward,
        start=True            # –æ–¥—Ä–∞–∑—É –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏
    )

    logger.info("üöÄ –°—Ç–∞—Ä—Ç—É—é polling...")
    await dp.start_polling(BOT)

    # –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é (—è–∫—â–æ –∫–∏–Ω–µ SIGTERM —á–∏ Exception)
    await db.disconnect()
    logger.info("üì¥ Polling –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def daily_reward():
    logger.debug("[CRON-DEBUG] tick")

    if BOT is None:
        return

    now   = datetime.datetime.now(tz=CEST)
    today = now.date()

    msgs = []        # —Å—é–¥–∏ —Å–∫–ª–∞–¥–µ–º–æ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≥—Ä—É–ø–∏

    async with db.transaction():
        users = await db.fetch_all("SELECT user_id, level, username, last_daily FROM users")
        for u in users:
            if u["last_daily"].date() == today:
                continue

            # ‚Äî —Å—É–º–∞ –±–æ–Ω—É—Å—É ‚Äî
            lvl = u["level"]
            if lvl < 5:   money, xp = 60, 40
            elif lvl <10: money, xp = 70, 50
            elif lvl <15: money, xp =130, 60
            else:         money, xp =300, 70

            await db.execute(
                """
                UPDATE users
                   SET balance = balance + :m,
                       xp      = xp + :xp,
                       last_daily = :now
                 WHERE user_id = :uid
                """,
                {"m": money, "xp": xp, "now": now, "uid": u["user_id"]}
            )

            # ‚Äî —Ñ–æ—Ä–º—É—î–º–æ –∫—Ä–∞—Å–∏–≤–∏–π mention ‚Äî
            nick = u["username"]
            if nick:
                mention = f"@{nick}"
            else:
                mention = f'<a href="tg://user?id={u["user_id"]}">{u["full_name"]}</a>'

            msgs.append(f"{mention}  ‚Üí  +{money}üí∞ +{xp} XP")

    if msgs:
        text = "üéÅ <b>–©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å&nbsp;{}</b>\n".format(today.strftime('%d.%m.%Y')) + "\n".join(msgs)
        groups = await db.fetch_all("SELECT chat_id FROM groups")
        for g in groups:
            try:
                await BOT.send_message(g["chat_id"], text, parse_mode="HTML")
            except Exception:
                pass 
    logger.info("üéÅ Daily reward batch complete")

# –æ–¥—Ä–∞–∑—É –ø—ñ–¥ @aiocron.crontab ‚Ä¶
    logger.debug(f"[CRON-DEBUG] BOT is {BOT!r}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.exception(f"üî• –ë–æ—Ç –∑–≤–∞–ª–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}")
