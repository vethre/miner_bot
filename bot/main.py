# bot/main.py
import asyncio
import aiocron, pytz, datetime
import logging
from zoneinfo import ZoneInfo
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

from bot.utils.config import BOT_TOKEN, DB_DSN
from bot.db import init_db, db
from bot.db_local import add_xp, init_local
from bot.handlers import register_handlers
from bot.utils.autodelete import auto_cleanup_task

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CEST = pytz.timezone("Europe/Prague")
UTC = ZoneInfo("UTC")
ENERGY_MAX = 100
HUNGER_MAX = 100

async def main():
    logger.info(f"‚ñ∂Ô∏è Using DB_DSN: {DB_DSN!r}")
    logger.info("üîå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é –±–æ—Ç–∞...")
    global BOT
    BOT = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())

    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –ë–î ()
    await init_db()
    await init_local()

    register_handlers(dp)

    aiocron.crontab(
        '0 7 * * *',          # 07:00 UTC ‚âà 09:00 CEST
        func=daily_reward,
        start=True            # –æ–¥—Ä–∞–∑—É –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏
    )

    aiocron.crontab(
        '0 */1 * * *',
        func=hourly_pass_xp,
        start=True
    )

    aiocron.crontab(
        '*/30 * * * *',  # –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
        func=restore_energy,
        start=True
    )

    aiocron.crontab(
        '0 * * * *',  # –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É –Ω–∞ 00 —Ö–≤
        func=reduce_hunger,
        start=True
    )

    async def _on_startup(bot: Bot):
        asyncio.create_task(auto_cleanup_task(bot, db), name="auto-delete")

    dp.startup.register(_on_startup)

    logger.info("üöÄ –°—Ç–∞—Ä—Ç—É—é polling...")
    await dp.start_polling(BOT)

    # –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é (—è–∫—â–æ –∫–∏–Ω–µ SIGTERM —á–∏ Exception)
    await db.disconnect()
    logger.info("üì¥ Polling –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def restore_energy():
    logger.debug("[CRON] –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó")
    await db.execute("""
        UPDATE progress_local
           SET energy = LEAST(:max, energy + :step),
               last_energy_update = :now
         WHERE energy < :max
    """, {
        "step": 10,
        "max": ENERGY_MAX,
        "now": datetime.datetime.now(tz=UTC)
    })

async def reduce_hunger():
    logger.debug("[CRON] –ó–º–µ–Ω—à–µ–Ω–Ω—è –≥–æ–ª–æ–¥—É")
    await db.execute("""
        UPDATE progress_local
           SET hunger = GREATEST(0, hunger - :step),
               last_hunger_update = :now
         WHERE hunger > 0
    """, {
        "step": 10,
        "now": datetime.datetime.now(tz=UTC)
    })

async def daily_reward():
    if BOT is None:
        return

    today = datetime.date.today()

    # –±–µ—Ä—ë–º –í–°–ï –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç ¬´–∑–Ω–∞–µ—Ç¬ª
    groups = await db.fetch_all("SELECT chat_id FROM groups")

    for g in groups:
        chat_id = g["chat_id"]

        # –æ–¥–Ω–∞ –≤—ã–±–æ—Ä–∫–∞ ‚Äî –≤—Å–µ —é–∑–µ—Ä—ã –≠–¢–û–ì–û —á–∞—Ç–∞, –∫–æ–º—É –µ—â—ë –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏ –±–æ–Ω—É—Å
        rows = await db.fetch_all("""
            SELECT pl.user_id,
                   pl.level,
                   COALESCE(b.coins,0)   AS coins,
                   u.username
            FROM   progress_local pl
                   LEFT JOIN balance_local b
                          ON b.chat_id = pl.chat_id AND b.user_id = pl.user_id
                   LEFT JOIN users u       -- —Ç–æ–ª—å–∫–æ —Ä–∞–¥–∏ username
                          ON u.user_id = pl.user_id
            WHERE  pl.chat_id   = :chat
              AND  (pl.last_daily IS NULL
                    OR pl.last_daily < :today)
        """, {"chat": chat_id, "today": today})

        if not rows:
            continue

        messages = []
        async with db.transaction():
            for r in rows:
                lvl = r["level"]
                # ‚Äî –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∞—è —à–∫–∞–ª–∞ ‚Äî
                if   lvl < 5:   money, xp =  60, 40
                elif lvl < 10:  money, xp =  70, 50
                elif lvl < 15:  money, xp = 130, 60
                else:           money, xp = 300, 70

                # –±–∞–ª–∞–Ω—Å
                await db.execute("""
                    INSERT INTO balance_local(chat_id,user_id,coins)
                         VALUES(:c,:u,:m)
                    ON CONFLICT (chat_id,user_id) DO
                         UPDATE SET coins = balance_local.coins + :m
                """, {"c": chat_id, "u": r["user_id"], "m": money})

                # XP
                await add_xp(chat_id, r["user_id"], xp)

                # –æ—Ç–º–µ—Ç–∫–∞ ¬´–±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω¬ª
                await db.execute("""
                    UPDATE progress_local
                       SET last_daily = :today
                     WHERE chat_id=:c AND user_id=:u
                """, {"today": today, "c": chat_id, "u": r["user_id"]})

                # –∫—Ä–∞—Å–∏–≤—ã–π mention
                nick = r["username"]
                mention = f"@{nick}" if nick else f'<a href="tg://user?id={r["user_id"]}">—à–∞—Ö—Ç—ë—Ä</a>'
                messages.append(f"{mention} ‚Üí  +{money}üí∞  +{xp} XP")

        # —Ä–∞—Å—Å—ã–ª–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É
        try:
            text = (
                f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å {today.strftime('%d.%m.%Y')}</b>\n"
                + "\n".join(messages)
            )
            await BOT.send_message(chat_id, text, parse_mode="HTML")
        except Exception:
            pass  # –≥—Ä—É–ø–ø–∞ –º–æ–≥–ª–∞ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –±–æ—Ç—É –ø–∏—Å–∞—Ç—å


async def hourly_pass_xp():
    now = datetime.datetime.utcnow()
    # –¥–∞—î–º–æ +10 XP –≤—Å—ñ–º –∑ –∞–∫—Ç–∏–≤–Ω–∏–º pass_expires > now
    await db.execute(
        """
        UPDATE progress_local
           SET xp = xp + 10
         WHERE cave_pass = TRUE
           AND pass_expires > :now
        """,
        {"now": now}
    )

# –æ–¥—Ä–∞–∑—É –ø—ñ–¥ @aiocron.crontab ‚Ä¶
    logger.debug(f"[CRON-DEBUG] BOT is {BOT!r}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.exception(f"üî• –ë–æ—Ç –∑–≤–∞–ª–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}")
