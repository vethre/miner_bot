# File: bot/handlers/choice_events.py
import asyncio
import random

from aiogram import F, Bot, types, Router
import aiogram
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.db_local import add_energy, add_item, add_money, add_xp, db
from bot.handlers.items import ITEM_DEFS

router = Router()
CARD_LIFETIME_MIN = 600      # 10 –º–∏–Ω
CARD_LIFETIME_MAX = 900      # 15 –º–∏–Ω

CHOICE_EVENTS: dict[str, dict] = {
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ mystic_chest
    "mystic_chest": {
        "text": "üéÅ –í –ø—ã–ª–∏ –ª–µ–∂–∏—Ç —Å—Ç–∞—Ä—ã–π —Å—É–Ω–¥—É–∫, –∑–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Ä–∂–∞–≤—ã–º–∏ —Ü–µ–ø—è–º–∏.",
        "options": {

            "open": {               # —Ä–∏—Å–∫‚Äì–Ω–∞–≥—Ä–∞–¥–∞
                "label": "–í–∑–ª–æ–º–∞—Ç—å –∫—Ä—ã—à–∫—É",
                "outcomes": [
                    # 35 % ‚Äì –≥–æ—Ä—Å—Ç—å –∑–æ–ª–æ—Ç—ã—Ö
                    {"field": "coins",  "sign": "+", "amt_min": 120, "amt_max": 280, "weight": 35},
                    # 10 % ‚Äì —Ä–µ–¥–∫–∏–π –ª—É—Ç
                    {"field": "item",   "sign": "+", "item": "diamond", "amt_min": 1, "amt_max": 1, "weight": 10},
                    # 30 % ‚Äì –ª–æ–≤—É—à–∫–∞-–±–æ–º–±–∞: –º–æ–Ω–µ—Ç—ã –ª–µ—Ç—è—Ç –ø—Ä–æ—á—å
                    {"field": "coins",  "sign": "-", "amt_min": 100, "amt_max": 220, "weight": 30},
                    # 25 % ‚Äì –æ–±–ª–∞–∫–æ –ø—ã–ª–∏, –∫–∞—à–µ–ª—å ‚Üí —Ç–µ—Ä—è–µ—à—å —ç–Ω–µ—Ä–≥–∏—é
                    {"field": "energy", "sign": "-", "amt_min": 20,  "amt_max": 35,  "weight": 25},
                ]
            },

            "leave": {              # –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                "label": "–û—Ç–æ–π—Ç–∏ —Ç–∏—Ö–æ",
                "outcomes": [
                    # 20 % ‚Äì —á—É—Ç–æ—á–∫—É –æ–ø—ã—Ç–∞ –∑–∞ –±–ª–∞–≥–æ—Ä–∞–∑—É–º–∏–µ
                    {"field": "xp",     "sign": "+", "amt_min": 40,  "amt_max": 70,  "weight": 20},
                    # 80 % ‚Äì –Ω–∏—á–µ–≥–æ —Ü–µ–Ω–Ω–æ–≥–æ: –ø–æ—Ç–µ—Ä—è –≤—Ä–µ–º–µ–Ω–∏ ‚Üí –≥–æ–ª–æ–¥
                    {"field": "hunger", "sign": "-", "amt_min": 30,  "amt_max": 50,  "weight": 80},
                ]
            }
        }
    },

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ strange_mushroom
    "strange_mushroom": {
        "text": "üçÑ –ò–∑ –≤–ª–∞–∂–Ω–æ–π —Å—Ç–µ–Ω—ã —Ç–æ—Ä—á–∏—Ç –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π –≥—Ä–∏–±-–º—É—Ç–∞–Ω—Ç.",
        "options": {

            "eat": {
                "label": "–°—ä–µ—Å—Ç—å (–±—Ä—Ä‚Ä¶)",
                "outcomes": [
                    # 25 % ‚Äì –ø—Ä–∏–ª–∏–≤ —Å–∏–ª
                    {"field": "energy", "sign": "+", "amt_min": 25, "amt_max": 45, "weight": 25},
                    # 25 % ‚Äì –Ω–∞—Å—ã—â–µ–Ω–∏–µ (—á—É—Ç—å –º–µ–Ω—å—à–µ –≥–æ–ª–æ–¥–∞)
                    {"field": "hunger", "sign": "+", "amt_min": 20, "amt_max": 35, "weight": 25},
                    # 50 % ‚Äì –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ! –ø–∞–¥–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—è –∏ –≥–æ–ª–æ–¥
                    {"field": "energy", "sign": "-", "amt_min": 30, "amt_max": 50, "weight": 50},
                ]
            },

            "ignore": {
                "label": "–û—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ–∫–æ–µ",
                "outcomes": [
                    # 15 % ‚Äì –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –¥–∞—ë—Ç XP
                    {"field": "xp",    "sign": "+", "amt_min": 30, "amt_max": 60, "weight": 15},
                    # 35 % ‚Äì –≥–ª—É–ø–æ –ø–∏–Ω–∞–µ—à—å –≥—Ä–∏–± ‚Üí —Å–ø–æ—Ä —Ä–∞–∑–ª–µ—Ç–∞–µ—Ç—Å—è, —Ç–µ—Ä—è–µ—à—å –º–æ–Ω–µ—Ç—ã
                    {"field": "coins", "sign": "-", "amt_min": 40, "amt_max": 90, "weight": 35},
                    # 50 % ‚Äì –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –Ω–æ —É—Å—Ç–∞–ª: ‚àí—ç–Ω–µ—Ä–≥–∏—è
                    {"field": "energy","sign": "-", "amt_min": 10, "amt_max": 20, "weight": 50},
                ]
            }
        }
    },
}

CHOICE_EVENTS.update({
        "old_miner": {
        "text": "üë¥ –£ –∫–æ—Å—Ç—Ä–∞ —Å–∏–¥–∏—Ç –¥—Ä—è—Ö–ª—ã–π —à–∞—Ö—Ç—ë—Ä –∏ –ø—Ä–æ—Å–∏—Ç ¬´—á—É—Ç–∫–∞ —Ä—É–¥—ã –Ω–∞ –∑—É–±–æ–∫¬ª.",
        "options": {
            "share_ore": {          # –¥–æ–±—Ä—ã–π –∂–µ—Å—Ç, –Ω–æ –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è —É–±—ã—Ç–æ—á–Ω—ã–º
                "label": "–û—Ç—Å—ã–ø–∞—Ç—å —Ä—É–¥—ã",
                "outcomes": [
                    # 35 % ‚Äî –ø–ª—é—Å–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
                    {"field": "coins", "sign": "+", "amt_min": 70, "amt_max": 140, "weight": 35},
                    # 10 % ‚Äî –¥–∞—Ä–∏—Ç –∫–∏—Ä–∫—É
                    {"field": "item",  "sign": "+", "item": "iron_pickaxe", "amt_min": 1, "amt_max": 1, "weight": 10},
                    # 55 % ‚Äî ¬´—Å–ø–∞—Å–∏–±–æ, —Å—ã–Ω–æ–∫¬ª –∏ ‚Ä¶–Ω–∏—á–µ–≥–æ, —Ç—ã –≤ –º–∏–Ω—É—Å–µ
                    {"field": "coins", "sign": "-", "amt_min": 50, "amt_max": 120, "weight": 55},
                ]
            },
            "refuse": {
                "label": "–û—Ç–∫–∞–∑–∞—Ç—å",
                "outcomes": [
                    # 30 % ‚Äî —Å–ª–µ–≥–∫–∞ —Ä–∞—Å—Ç—ë—Ç –æ–ø—ã—Ç (—Å–ø–æ–∫–æ–µ–Ω, –Ω–æ –±–µ—Å—Å–µ—Ä–¥–µ—á–µ–Ω)
                    {"field": "xp",    "sign": "+", "amt_min": 20, "amt_max": 40, "weight": 30},
                    # 70 % ‚Äî –¥–µ–¥ —Ä—É–≥–∞–µ—Ç—Å—è, –∫–∏–¥–∞–µ—Ç –∫–∞–º–Ω–µ–º ‚Üí —Ç–µ—Ä—è–µ—à—å –¥–µ–Ω—å–≥–∏
                    {"field": "coins", "sign": "-", "amt_min": 80, "amt_max": 160, "weight": 70},
                ]
            }
        }
    },

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ underground_lake
    "underground_lake": {
        "text": "üåä –ü–æ–¥–∑–µ–º–Ω–æ–µ –æ–∑–µ—Ä–æ —Å –æ–±–º–∞–Ω—á–∏–≤–æ-—á–∏—Å—Ç–æ–π –≤–æ–¥–æ–π –ø–æ–±–ª—ë—Å–∫–∏–≤–∞–µ—Ç –≤ –≥–ª—É–±–∏–Ω–µ.",
        "options": {
            "drink": {
                "label": "–ù–∞–ø–∏—Ç—å—Å—è",
                "outcomes": [
                    {"field": "energy", "sign": "+", "amt_min": 25, "amt_max": 45, "weight": 40},
                    # 60 % ‚Äì –∑–∞–±–æ–ª–∏—Ç –∂–∏–≤–æ—Ç, –ø–∞–¥–∞–µ—Ç —Å—ã—Ç–æ—Å—Ç—å
                    {"field": "hunger", "sign": "-", "amt_min": 40, "amt_max": 70, "weight": 60},
                ]
            },
            "fill_bottle": {
                "label": "–ù–∞–±—Ä–∞—Ç—å –≤–æ —Ñ–ª—è–≥—É",
                "outcomes": [
                    # 80 % ‚Äî –≤–º–µ—Å—Ç–æ –≤–æ–¥—ã –º—É—Ç–Ω–∞—è –∂–∏–∂–∞: –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ª–∏—Ç—å (–ø—Ä–æ—Å—Ç–æ —Ç—Ä–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏)
                    {"field": "xp",   "sign": "-", "amt_min": 5,  "amt_max": 15, "weight": 80},
                    # 20 % ‚Äî —Ä–µ–∞–ª—å–Ω–æ —á–∏—Å—Ç–∞—è –≤–æ–¥–∞-–±–∞—Ñ—Ñ
                    {"field": "item", "sign": "+", "item": "water_bottle", "amt_min": 1, "amt_max": 1, "weight": 20},
                ]
            }
        }
    },

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ lost_miner
    "lost_miner": {
        "text": "‚õèÔ∏è –ò–∑ —Ç–µ–º–Ω–æ—Ç—ã –≤—ã—Å–∫–∞–∫–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–ø—É–≥–∞–Ω–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫-—à–∞—Ö—Ç—ë—Ä: ¬´–ø–æ–∫–∞–∂–∏ –¥–æ—Ä–æ–≥—É‚Ä¶¬ª",
        "options": {
            "help": {
                "label": "–ü—Ä–æ–≤–æ–¥–∏—Ç—å",
                "outcomes": [
                    {"field": "coins", "sign": "+", "amt_min": 60, "amt_max": 120, "weight": 40},
                    # —É—Å—Ç–∞–ª ‚Üí —Ç–µ—Ä—è–µ—à—å —ç–Ω–µ—Ä–≥–∏—é
                    {"field": "energy","sign": "-", "amt_min": 15, "amt_max": 25, "weight": 60},
                ]
            },
            "ignore": {
                "label": "–°–±–µ–∂–∞—Ç—å",
                "outcomes": [
                    # –∫–∞—Ä–º–∞ ‚Äì –ø–æ—Ç–µ—Ä—è XP / –º–æ–Ω–µ—Ç
                    {"field": "xp",    "sign": "-", "amt_min": 10, "amt_max": 25, "weight": 70},
                    {"field": "coins", "sign": "-", "amt_min": 40, "amt_max": 70, "weight": 30},
                ]
            }
        }
    },

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ mysterious_altar
    "mysterious_altar": {
        "text": "üîÆ –û–±—Å–∏–¥–∏–∞–Ω–æ–≤—ã–π –∞–ª—Ç–∞—Ä—å –º–µ—Ä—Ü–∞–µ—Ç –∑–ª–æ–≤–µ—â–∏–º —Å–≤–µ—Ç–æ–º.",
        "options": {
            "touch": {
                "label": "–ü—Ä–∏–∫–æ—Å–Ω—É—Ç—å—Å—è",
                "outcomes": [
                    {"field": "energy", "sign": "+", "amt_min": 15, "amt_max": 25, "weight": 35},
                    {"field": "energy", "sign": "-", "amt_min": 20, "amt_max": 35, "weight": 65},
                ]
            },
            "mine": {
                "label": "–î–æ–ª–±–∞–Ω—É—Ç—å –∫–∏—Ä–∫–æ–π",
                "outcomes": [
                    {"field": "item",   "sign": "+", "item": "obsidian_shard", "amt_min": 1, "amt_max": 1, "weight": 30},
                    {"field": "energy", "sign": "-", "amt_min": 25, "amt_max": 40, "weight": 70},
                ]
            },
            "leave": {
                "label": "–°–≤–∞–ª–∏—Ç—å –ø–æ–¥–∞–ª—å—à–µ",
                "outcomes": [
                    {"field": "xp", "sign": "+", "amt_min": 5, "amt_max": 10, "weight": 100},
                ]
            }
        }
    },

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ cave_stream
    "cave_stream": {
        "text": "üå™Ô∏è –ì—Ä–æ–º–∫–∏–π –ø–æ–¥–∑–µ–º–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–Ω–Ω–µ–ª—å.",
        "options": {
            "swim": {
                "label": "–†–∏—Å–∫–Ω—É—Ç—å –≤–ø–ª–∞–≤—å",
                "outcomes": [
                    {"field": "energy", "sign": "-", "amt_min": 15, "amt_max": 25, "weight": 75},
                    {"field": "xp",     "sign": "+", "amt_min": 15, "amt_max": 25, "weight": 25},
                ]
            },
            "build_bridge": {
                "label": "–°–æ–æ—Ä—É–¥–∏—Ç—å —Ö–ª–∏–ø–∫–∏–π –º–æ—Å—Ç",
                "outcomes": [
                    {"field": "coins", "sign": "-", "amt_min": 30, "amt_max": 60, "weight": 60},
                    {"field": "coins", "sign": "+", "amt_min": 70, "amt_max": 120, "weight": 40},
                ]
            },
            "turn_back": {
                "label": "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å—Å—è",
                "outcomes": [
                    {"field": "xp", "sign": "+", "amt_min": 2, "amt_max": 5, "weight": 100},
                ]
            }
        }
    },

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ greedy_bat
    "greedy_bat": {
        "text": "ü¶á –ñ–∏—Ä–Ω–∞—è –ª–µ—Ç—É—á–∞—è –º—ã—à—å –≤—Ü–µ–ø–∏–ª–∞—Å—å –≤ —Ç–≤–æ–π –º–µ—à–æ–∫!",
        "options": {
            "shoo": {
                "label": "–†–∞–∑–º–∞—Ö–Ω—É—Ç—å—Å—è",
                "outcomes": [
                    {"field": "coins", "sign": "-", "amt_min": 20, "amt_max": 35, "weight": 60},
                    {"field": "coins", "sign": "+", "amt_min": 15, "amt_max": 25, "weight": 40},
                ]
            },
            "feed": {
                "label": "–û—Ç–¥–∞—Ç—å –º—è—Å–æ",
                "outcomes": [
                    {"field": "item",  "sign": "-", "item": "meat", "amt_min": 1, "amt_max": 1, "weight": 60},
                    {"field": "item",  "sign": "+", "item": "amethyst", "amt_min": 1, "amt_max": 1, "weight": 40},
                ]
            },
            "ignore": {
                "label": "–ü—É—Å—Ç–∏—Ç—å –Ω–∞ —Å–∞–º–æ—Ç—ë–∫",
                "outcomes": [
                    {"field": "item", "sign": "-", "item": "stone", "amt_min": 5, "amt_max": 10, "weight": 100},
                ]
            }
        }
    },

    "toxic_fumes": {
        "text": "‚ò£Ô∏è –í —É–∑–∫–æ–º —Ç–æ–Ω–Ω–µ–ª–µ —á—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –µ–¥–∫–∏–π –∑–∞–ø–∞—Ö –≥–∞–∑–∞.",
        "options": {
            "rush": {  # –ø—Ä–æ–±–µ–∂–∞—Ç—å
                "label": "–ü—Ä–æ—Ä—ã–≤ –≤–ø–µ—Ä—ë–¥",
                "outcomes": [
                    {"field": "energy", "sign": "-", "amt_min": 20, "amt_max": 35, "weight": 70},
                    {"field": "xp",     "sign": "+", "amt_min": 15, "amt_max": 25, "weight": 30},
                ]
            },
            "mask": {  # –Ω–∞–¥–µ—Ç—å –∏–º–ø—Ä–æ–≤. –º–∞—Å–∫—É
                "label": "–°–æ–æ—Ä—É–¥–∏—Ç—å –º–∞—Å–∫—É",
                "outcomes": [
                    {"field": "item",   "sign": "+", "item": "coal", "amt_min": 1, "amt_max": 2, "weight": 40},
                    {"field": "energy", "sign": "-", "amt_min": 10, "amt_max": 15, "weight": 60},
                ]
            },
            "retreat": {
                "label": "–û—Ç–æ–π—Ç–∏ –ø–æ–¥–∞–ª—å—à–µ",
                "outcomes": [
                    {"field": "xp", "sign": "-", "amt_min": 5, "amt_max": 10, "weight": 100},
                ]
            },
        }
    },

    # 2 ‚ñ∏ –û–ë–†–£–®–ï–ù–ò–ï
    "cave_in": {
        "text": "ü™® –° –ø–æ—Ç–æ–ª–∫–∞ –ø–æ—Å—ã–ø–∞–ª–∏—Å—å –∫–∞–º–Ω–∏ ‚Äî –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä—É—à–µ–Ω–∏–µ!",
        "options": {
            "shield": {
                "label": "–ü—Ä–∏–∫—Ä—ã—Ç—å—Å—è —â–∏—Ç–æ–º",
                "outcomes": [
                    {"field": "item",   "sign": "-", "item": "iron_ingot", "amt_min": 1, "amt_max": 2, "weight": 90},
                    {"field": "xp",     "sign": "+", "amt_min": 20, "amt_max": 35, "weight": 10},
                ]
            },
            "sprint": {
                "label": "–ë–µ–∂–∞—Ç—å –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª",
                "outcomes": [
                    {"field": "energy", "sign": "-", "amt_min": 25, "amt_max": 40, "weight": 70},
                    {"field": "coins",  "sign": "-", "amt_min": 50, "amt_max": 90, "weight": 30},
                ]
            },
        }
    },

    # 3 ‚ñ∏ –ü–†–û–ö–õ–Ø–¢–´–ô –°–ê–ú–û–†–û–î–û–ö
    "cursed_nugget": {
        "text": "üíÄ –¢—ã –Ω–∞—à—ë–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π –º–µ—Ä—Ü–∞—é—â–∏–π —Å–∞–º–æ—Ä–æ–¥–æ–∫ ‚Äî –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç‚Ä¶ –Ω–µ –ø–æ-–¥–æ–±—Ä—É.",
        "options": {
            "take": {
                "label": "–ó–∞–±—Ä–∞—Ç—å",
                "outcomes": [
                    {"field": "item",  "sign": "+", "item": "gold", "amt_min": 1, "amt_max": 2, "weight": 30},
                    {"field": "hunger","sign": "-", "amt_min": 25,  "amt_max": 40, "weight": 70},
                ]
            },
            "leave": {
                "label": "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å",
                "outcomes": [
                    {"field": "xp", "sign": "+", "amt_min": 10, "amt_max": 20, "weight": 40},
                    {"field": "coins","sign": "-", "amt_min": 30, "amt_max": 60, "weight": 60},
                ]
            }
        }
    },

    # 4 ‚ñ∏ –ì–ù–û–ú-–†–û–°–¢–û–í–©–ò–ö
    "gnome_loan": {
        "text": "üí∞ –ú–∏–Ω–∏–∞—Ç—é—Ä–Ω—ã–π –≥–Ω–æ–º-—Ä–æ—Å—Ç–æ–≤—â–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç ¬´–≤—ã–≥–æ–¥–Ω—ã–π¬ª –∑–∞–π–º –ø–æ–¥ 200 %.",
        "options": {
            "accept": {
                "label": "–í–∑—è—Ç—å –º–æ–Ω–µ—Ç—ã",
                "outcomes": [
                    {"field": "coins", "sign": "+", "amt_min": 120, "amt_max": 180, "weight": 30},
                    {"field": "coins", "sign": "-", "amt_min": 200, "amt_max": 300, "weight": 70},
                ]
            },
            "decline":{
                "label":"–û—Ç–∫–∞–∑–∞—Ç—å—Å—è",
                "outcomes":[
                    {"field": "xp", "sign":"-", "amt_min": 10, "amt_max": 20, "weight": 100},
                ]
            }
        }
    },

    # 5 ‚ñ∏ –°–ö–û–õ–¨–ó–ö–ò–ô –£–ö–õ–û–ù
    "slippery_slope": {
        "text": "üßä –ü–æ–ª –ø–æ–∫—Ä—ã—Ç –ª–µ–¥—è–Ω–æ–π –∫–æ—Ä–∫–æ–π ‚Äî –∫–∞–∂–¥—ã–π —à–∞–≥ —Ä–∏—Å–∫ —Å–æ—Ä–≤–∞—Ç—å—Å—è –≤–Ω–∏–∑.",
        "options": {
            "slide_down": {
                "label": "–°—ä–µ—Ö–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ",
                "outcomes": [
                    {"field": "energy", "sign": "-", "amt_min": 15, "amt_max": 25, "weight": 60},
                    {"field": "item",   "sign": "+", "item": "stone", "amt_min": 5, "amt_max": 8, "weight": 40},
                ]
            },
            "crawl_back": {
                "label": "–ü–æ–ª–∑—Ç–∏ –Ω–∞–≤–µ—Ä—Ö",
                "outcomes": [
                    {"field": "xp",    "sign": "+", "amt_min": 15, "amt_max": 25, "weight": 30},
                    {"field": "hunger","sign": "-", "amt_min": 20, "amt_max": 35, "weight": 70},
                ]
            }
        }
    },

    # 6 ‚ñ∏ –ù–ï–ò–°–ü–†–ê–í–ù–ê–Ø –õ–ê–ú–ü–ê
    "broken_lantern": {
        "text": "üî¶ –ú–∞—Å–ª—è–Ω–∞—è –ª–∞–º–ø–∞ –º–µ—Ä—Ü–∞–µ—Ç‚Ä¶ –∏ –≤–¥—Ä—É–≥ –≥–∞—Å–Ω–µ—Ç!",
        "options": {
            "relight": {
                "label": "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–∂–µ—á—å —Å–Ω–æ–≤–∞",
                "outcomes": [
                    {"field": "energy", "sign": "-", "amt_min": 10, "amt_max": 20, "weight": 60},
                    {"field": "xp",     "sign": "+", "amt_min": 10, "amt_max": 20, "weight": 40},
                ]
            },
            "leave_dark": {
                "label": "–ò–¥—Ç–∏ –≤ —Ç–µ–º–Ω–æ—Ç–µ",
                "outcomes": [
                    {"field": "item",  "sign": "-", "item": "coal", "amt_min": 2, "amt_max": 4, "weight": 80},
                    {"field": "energy","sign": "-", "amt_min": 5,  "amt_max": 10, "weight": 20},
                ]
            }
        }
    },
})

async def _expire_choice_card(bot: Bot, cid: int, mid: int):
    """–ß–µ—Ä–µ–∑ 10-15 –º–∏–Ω —É–¥–∞–ª—è–µ–º/–ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ ‚Äòexpired‚Äô-–≤–∏–¥."""
    await asyncio.sleep(random.randint(CARD_LIFETIME_MIN, CARD_LIFETIME_MAX))

    try:
        await bot.edit_message_text(
            "‚åõ <i>–¢—ã –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ–π —à–∞–Ω—Å‚Ä¶</i>\n<b>–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞.</b>",
            chat_id=cid, message_id=mid, parse_mode="HTML"
        )
    except aiogram.exceptions.TelegramBadRequest:
        # —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–ª–ª–±—ç–∫–æ–º ‚Äî –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

async def build_mention(bot: Bot, chat_id: int, user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç mention –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        ‚Ä¢ @username   ‚Äì –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∏–∫
        ‚Ä¢ tg://user‚Ä¶  ‚Äì –µ—Å–ª–∏ –Ω–∏–∫–∞ –Ω–µ—Ç
    """
    m = await bot.get_chat_member(chat_id, user_id)
    if m.user.username:
        return f"@{m.user.username}"
    # HTML-link –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ id
    return f'<a href="tg://user?id={user_id}">{m.user.full_name}</a>'


def _choice_weighted_pick(outcomes: list[dict]) -> dict:
    total = sum(o["weight"] for o in outcomes)
    rnd   = random.randint(1, total)
    acc   = 0
    for o in outcomes:
        acc += o["weight"]
        if rnd <= acc:
            return o
    return outcomes[-1]   # fallback


async def _apply_choice_effect(bot: Bot, chat_id: int, user_id: int,
                               outcome: dict) -> str:
    amt = random.randint(outcome["amt_min"], outcome["amt_max"])
    if outcome["sign"] == "-":
        amt = -amt

    fld = outcome["field"]
    if fld == "coins":
        await add_money(chat_id, user_id, amt)
    elif fld == "xp":
        await add_xp(chat_id, user_id, amt)
    elif fld == "energy":
        await add_energy(chat_id, user_id, amt)
    elif fld == "hunger":
        # hunger —Ä–∞—Å—Ç—ë—Ç ¬´–≤ –º–∏–Ω—É—Å¬ª, –ø–æ—ç—Ç–æ–º—É –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞–∫
        await db.execute("""UPDATE progress_local
                               SET hunger = LEAST(100, GREATEST(0, hunger - :d))
                             WHERE chat_id=:c AND user_id=:u""",
                         {"d": amt, "c": chat_id, "u": user_id})
    elif fld == "item":
        await add_item(chat_id, user_id, outcome["item"], outcome["amt_min"])
        return f"+1 –ø—Ä–µ–¥–º–µ—Ç: {ITEM_DEFS.get(outcome['item'], {}).get('name', outcome['item'])}"

    return f"{'+' if amt>0 else ''}{amt} {fld.upper()}"

async def maybe_send_choice_card(bot: Bot, cid: int, uid: int):
    if random.random() > 0.20:          # 20 % —à–∞–Ω—Å —á—Ç–æ –≤–æ–æ–±—â–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞
        return

    ev_key, ev = random.choice(list(CHOICE_EVENTS.items()))
    kb = InlineKeyboardBuilder()
    for opt_key, opt in ev["options"].items():
        kb.button(
            text=opt["label"],
            callback_data=f"choice:{ev_key}:{opt_key}:{uid}"
        )
    kb.adjust(2)

    mention = await build_mention(bot, cid, uid)

    msg = await bot.send_message(
        cid,
        f"{mention}, {ev['text']}\n\n<i>–°–¥–µ–ª–∞–π –≤—ã–±–æ—Ä:</i>",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )
    asyncio.create_task(_expire_choice_card(bot, cid, msg.message_id))

@router.callback_query(F.data.startswith("choice:"))
async def choice_callback(cb: types.CallbackQuery):
    cid, clicker = cb.message.chat.id, cb.from_user.id
    _, ev_key, opt_key, orig_uid = cb.data.split(":")
    orig_uid = int(orig_uid)

    # –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
    if clicker != orig_uid:
        return await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –≤—ã–±–æ—Ä üòÖ", show_alert=True)

    ev  = CHOICE_EVENTS[ev_key]
    opt = ev["options"][opt_key]

    outcome = _choice_weighted_pick(opt["outcomes"])
    summary = await _apply_choice_effect(cb.bot, cid, orig_uid, outcome)

    await cb.message.edit_text(
        f"üé≤ {opt['label']} ‚Üí {summary}",
        parse_mode="HTML"
    )
    await cb.answer()

