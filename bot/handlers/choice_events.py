# File: bot/handlers/choice_events.py
import random

from aiogram import F, Bot, types, Router
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.db_local import add_energy, add_item, add_money, add_xp, db
from bot.handlers.items import ITEM_DEFS

router = Router()

CHOICE_EVENTS: dict[str, dict] = {
    "mystic_chest": {
        "text": "üéÅ –¢—ã –Ω–∞—Ç—ã–∫–∞–µ—à—å—Å—è –Ω–∞ —Å—Ç–∞—Ä—ã–π –∑–∞–ø–µ—á–∞—Ç–∞–Ω–Ω—ã–π —Å—É–Ω–¥—É–∫.",
        "options": {
            "open": {
                "label": "–û—Ç–∫—Ä—ã—Ç—å",
                "outcomes": [
                    {"field": "coins",  "sign": "+", "amt_min": 120, "amt_max": 300, "weight": 70},
                    {"field": "coins",  "sign": "-", "amt_min": 80,  "amt_max": 200, "weight": 30},
                ]
            },
            "leave": {
                "label": "–û—Å—Ç–∞–≤–∏—Ç—å",
                "outcomes": [
                    {"field": "xp",     "sign": "+", "amt_min": 50, "amt_max": 90,  "weight": 60},
                    {"field": "energy", "sign": "-", "amt_min": 25, "amt_max": 45,  "weight": 40},
                ]
            }
        }
    },

    "strange_mushroom": {
        "text": "üçÑ –í —Å—ã—Ä–æ–π –ø–µ—â–µ—Ä–µ —Ä–∞—Å—Ç—ë—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–π –≥—Ä–∏–±.",
        "options": {
            "eat": {
                "label": "–°—ä–µ—Å—Ç—å",
                "outcomes":[
                    {"field": "energy", "sign":"+","amt_min":30,"amt_max":60,"weight":65},
                    {"field": "hunger", "sign":"-","amt_min":20,"amt_max":40,"weight":35},
                ]
            },
            "ignore":{
                "label":"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å",
                "outcomes":[
                    {"field": "xp", "sign":"+","amt_min":40,"amt_max":70,"weight":80},
                    {"field": "coins","sign":"-","amt_min":50,"amt_max":80,"weight":20},
                ]
            }
        }
    },
}

CHOICE_EVENTS.update({
    "old_miner": {
        "text": "üë¥ –¢—ã –≤—Å—Ç—Ä–µ—á–∞–µ—à—å —Å—Ç–∞—Ä–æ–≥–æ —à–∞—Ö—Ç—ë—Ä–∞ —É –∫–æ—Å—Ç—Ä–∞.",
        "options": {
            "share_ore": {
                "label": "–û—Ç–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Ä—É–¥—ã",
                "outcomes": [
                    # —Å—Ç–∞—Ä–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –º–æ–Ω–µ—Ç–∞–º–∏
                    {"field": "coins", "sign": "+", "amt_min": 90, "amt_max": 160, "weight": 80},
                    # –∏–Ω–æ–≥–¥–∞ –¥–∞—Ä–∏—Ç —Ä–µ–¥–∫—É—é –∫–∏—Ä–∫—É
                    {"field": "item",  "sign": "+", "item": "iron_pickaxe", "amt_min": 1, "amt_max": 1, "weight": 20},
                ]
            },
            "refuse": {
                "label": "–û—Ç–∫–∞–∑–∞—Ç—å",
                "outcomes": [
                    {"field": "xp",    "sign": "+", "amt_min": 40, "amt_max": 70, "weight": 60},
                    {"field": "coins", "sign": "-", "amt_min": 60, "amt_max": 90, "weight": 40},
                ]
            }
        }
    },

    "underground_lake": {
        "text": "üåä –ü–æ–¥–∑–µ–º–Ω–æ–µ –æ–∑–µ—Ä–æ! –í–æ–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç–æ–π.",
        "options": {
            "drink": {
                "label": "–ù–∞–ø–∏—Ç—å—Å—è",
                "outcomes": [
                    {"field": "energy", "sign": "+", "amt_min": 35, "amt_max": 55, "weight": 70},
                    {"field": "hunger", "sign": "-", "amt_min": 30, "amt_max": 50, "weight": 30},
                ]
            },
            "fill_bottle": {
                "label": "–ù–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–ª—è–≥—É",
                "outcomes": [
                    {"field": "item", "sign": "+", "item": "water_bottle", "amt_min": 1, "amt_max": 1, "weight": 100},
                ]
            }
        }
    },

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    "lost_miner": {
        "text": "‚õèÔ∏è –í –≥–ª—É–±–∏–Ω–µ —à–∞—Ö—Ç—ã —Ç—ã –Ω–∞—Ç–∫–Ω—É–ª—Å—è –Ω–∞ —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ —à–∞—Ö—Ç—ë—Ä–∞-–Ω–æ–≤–∏—á–∫–∞. –û–Ω –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞.",
        "options": {
            "help": {
                "label": "–ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Ç—å ‚Üë",
                "outcomes": [
                    {"field": "coins", "sign": "+", "amt_min": 100, "amt_max": 140, "weight": 70},
                    {"field": "xp",    "sign": "+", "amt_min": 20,  "amt_max": 40,  "weight": 30},
                ]
            },
            "ignore": {
                "label": "–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å",
                "outcomes": [
                    {"field": "xp",    "sign": "-", "amt_min": 5,   "amt_max": 15,  "weight": 100},
                ]
            }
        }
    },

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    "mysterious_altar": {
        "text": "üîÆ –¢—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Å–∏–¥–∏–∞–Ω–æ–≤—ã–π –∞–ª—Ç–∞—Ä—å —Å –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–º –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–º.",
        "options": {
            "touch": {
                "label": "–î–æ—Ç—Ä–æ–Ω—É—Ç—å—Å—è",
                "outcomes": [
                    {"field": "energy", "sign": "+", "amt_min": 20,  "amt_max": 30, "weight": 80},
                    {"field": "xp",     "sign": "+", "amt_min": 15,  "amt_max": 25, "weight": 20},
                ]
            },
            "mine": {
                "label": "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–±—ã—Ç—å",
                "outcomes": [
                    {"field": "item",   "sign": "+", "item": "obsidian_shard", "amt_min": 1, "amt_max": 1, "weight": 60},
                    {"field": "energy", "sign": "-", "amt_min": 10,  "amt_max": 15, "weight": 40},
                ]
            },
            "leave": {
                "label": "–û—Ç–æ–π—Ç–∏",
                "outcomes": [
                    {"field": "xp", "sign": "+", "amt_min": 5, "amt_max": 10, "weight": 100},
                ]
            }
        }
    },

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    "cave_stream": {
        "text": "üåä –ü–æ–¥–∑–µ–º–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–µ–≥—Ä–∞–∂–¥–∞–µ—Ç –ø—É—Ç—å.",
        "options": {
            "swim": {
                "label": "–ü–µ—Ä–µ–ø–ª—ã—Ç—å",
                "outcomes": [
                    {"field": "energy", "sign": "-", "amt_min": 8,  "amt_max": 12, "weight": 70},
                    {"field": "xp",     "sign": "+", "amt_min": 10, "amt_max": 20, "weight": 30},
                ]
            },
            "build_bridge": {
                "label": "–°–æ–æ—Ä—É–¥–∏—Ç—å –º–æ—Å—Ç",
                "outcomes": [
                    {"field": "coins", "sign": "+", "amt_min": 60, "amt_max": 100, "weight": 70},
                    {"field": "xp",    "sign": "+", "amt_min": 5,  "amt_max": 10,  "weight": 30},
                ]
            },
            "turn_back": {
                "label": "–í–µ—Ä–Ω—É—Ç—å—Å—è",
                "outcomes": [
                    {"field": "xp", "sign": "+", "amt_min": 3, "amt_max": 6, "weight": 100},
                ]
            }
        }
    },

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    "greedy_bat": {
        "text": "ü¶á –õ–µ—Ç—É—á–∞—è –º—ã—à—å –≤—ã–ª–µ—Ç–∞–µ—Ç –∏–∑-–∑–∞ —Å–ø–∏–Ω—ã –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Å—Ç–∞—â–∏—Ç—å —Ç–≤–æ—é –¥–æ–±—ã—á—É!",
        "options": {
            "shoo": {
                "label": "–û—Ç–º–∞—Ö–Ω—É—Ç—å—Å—è",
                "outcomes": [
                    {"field": "coins", "sign": "+", "amt_min": 25, "amt_max": 40, "weight": 100},
                ]
            },
            "feed": {
                "label": "–î–∞—Ç—å –∫—É—Å–æ—á–µ–∫ –º—è—Å–∞",
                "outcomes": [
                    {"field": "item",  "sign": "+", "item": "amethyst", "amt_min": 1, "amt_max": 1, "weight": 70},
                    {"field": "xp",    "sign": "+", "amt_min": 5,  "amt_max": 10, "weight": 30},
                ]
            },
            "ignore": {
                "label": "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å",
                "outcomes": [
                    {"field": "item", "sign": "-", "item": "stone", "amt_min": 3, "amt_max": 6, "weight": 100},
                ]
            }
        }
    },
})

async def build_mention(bot: Bot, chat_id: int, user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç mention –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        ‚Ä¢ @username   ‚Äì –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∏–∫
        ‚Ä¢ tg://user‚Ä¶  ‚Äì –µ—Å–ª–∏ –Ω–∏–∫–∞ –Ω–µ—Ç
    """
    m = await bot.get_chat_member(chat_id, user_id)
    if m.user.username:
        return f"@{m.user.username}"
    # HTML-link –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ id
    return f'<a href="tg://user?id={user_id}">{m.user.full_name}</a>'


def _choice_weighted_pick(outcomes: list[dict]) -> dict:
    total = sum(o["weight"] for o in outcomes)
    rnd   = random.randint(1, total)
    acc   = 0
    for o in outcomes:
        acc += o["weight"]
        if rnd <= acc:
            return o
    return outcomes[-1]   # fallback


async def _apply_choice_effect(bot: Bot, chat_id: int, user_id: int,
                               outcome: dict) -> str:
    amt = random.randint(outcome["amt_min"], outcome["amt_max"])
    if outcome["sign"] == "-":
        amt = -amt

    fld = outcome["field"]
    if fld == "coins":
        await add_money(chat_id, user_id, amt)
    elif fld == "xp":
        await add_xp(chat_id, user_id, amt)
    elif fld == "energy":
        await add_energy(chat_id, user_id, amt)
    elif fld == "hunger":
        # hunger —Ä–∞—Å—Ç—ë—Ç ¬´–≤ –º–∏–Ω—É—Å¬ª, –ø–æ—ç—Ç–æ–º—É –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞–∫
        await db.execute("""UPDATE progress_local
                               SET hunger = LEAST(100, GREATEST(0, hunger - :d))
                             WHERE chat_id=:c AND user_id=:u""",
                         {"d": amt, "c": chat_id, "u": user_id})
    elif fld == "item":
        await add_item(chat_id, user_id, outcome["item"], outcome["amt_min"])
        return f"+1 –ø—Ä–µ–¥–º–µ—Ç: {ITEM_DEFS.get(outcome['item'], {}).get('name', outcome['item'])}"

    return f"{'+' if amt>0 else ''}{amt} {fld.upper()}"

async def maybe_send_choice_card(bot: Bot, cid: int, uid: int):
    if random.random() > 0.30:          # 20 % —à–∞–Ω—Å —á—Ç–æ –≤–æ–æ–±—â–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞
        return

    ev_key, ev = random.choice(list(CHOICE_EVENTS.items()))
    kb = InlineKeyboardBuilder()
    for opt_key, opt in ev["options"].items():
        kb.button(
            text=opt["label"],
            callback_data=f"choice:{ev_key}:{opt_key}:{uid}"
        )
    kb.adjust(2)

    mention = await build_mention(bot, cid, uid)

    await bot.send_message(
        cid,
        f"{mention}, {ev['text']}\n\n<i>–°–¥–µ–ª–∞–π –≤—ã–±–æ—Ä:</i>",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("choice:"))
async def choice_callback(cb: types.CallbackQuery):
    cid, clicker = cb.message.chat.id, cb.from_user.id
    _, ev_key, opt_key, orig_uid = cb.data.split(":")
    orig_uid = int(orig_uid)

    # –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
    if clicker != orig_uid:
        return await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –≤—ã–±–æ—Ä üòÖ", show_alert=True)

    ev  = CHOICE_EVENTS[ev_key]
    opt = ev["options"][opt_key]

    outcome = _choice_weighted_pick(opt["outcomes"])
    summary = await _apply_choice_effect(cb.bot, cid, orig_uid, outcome)

    await cb.message.edit_text(
        f"üé≤ {opt['label']} ‚Üí {summary}",
        parse_mode="HTML"
    )
    await cb.answer()

