# bot/handlers/eat.py
from aiogram import Router, types
from aiogram.filters import Command
import datetime as dt

from bot.db_local import (
    add_energy, cid_uid, get_inventory, update_hunger,
    add_item, db
)
from bot.utils.autodelete import register_msg_for_autodelete   # —è–∫—â–æ –º–∞—î—à –∞–≤—Ç–æ–∫–µ—à

router = Router()

# _________________________ –±–∞–∑–æ–≤—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —ó–∂—ñ ____________________________
FOOD_ITEMS: dict[str, dict] = {
    "bread":  {"name": "üçû –•–ª–µ–±",  "hunger": 30},
    "meat":   {"name": "üçñ –ú—è—Å–æ", "hunger": 60},
    "borsch": {"name": "ü•£ –ë–æ—Ä—â",  "hunger": 100},
    "energy_drink":  {"name": "ü•§ –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫", "energy": 40},
}

# _________________________ –∞–ª—ñ–∞—Å–∏ –º–æ–≤/–æ–ø–µ—á–∞—Ç–æ–∫ ______________________________
FOOD_ALIASES: dict[str, str] = {
    # —Ö–ª—ñ–±
    "—Ö–ª–µ–±": "bread", "bread": "bread",
    # –º'—è—Å–æ
    "–º—è—Å–æ": "meat", "–º—è—Å–æ": "meat", "meat": "meat",
    # –±–æ—Ä—â
    "–±–æ—Ä—â": "borsch", "–±–æ—Ä—â": "borsch", "borsch": "borsch",
    "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫": "energy_drink",
}

# ============================================================================
@router.message(Command("eat"))
async def eat_cmd(message: types.Message):
    cid, uid = await cid_uid(message)

    # 1) —Ä–æ–∑–±—ñ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.reply("–ö–∞–∫ –∫—É—à–∞—Ç—å: /eat '–Ω–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã'")

    alias   = parts[1].strip().lower()
    key     = FOOD_ALIASES.get(alias)            # canonical key
    if not key:
        return await message.reply(f"–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –µ–¥—ã ¬´{alias}¬ª üòï")

    food = FOOD_ITEMS[key]

    # 2) –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
    inv = {row["item"]: row["qty"] for row in await get_inventory(cid, uid)}
    if inv.get(key, 0) < 1:
        return await message.reply(f"–£ —Ç–µ–±—è –Ω–µ—Ç {food['name']}")

    # 3) —Å–ø–∏—Å—É—î–º–æ 1 –æ–¥. —ó–∂—ñ
    await add_item(cid, uid, key, -1)

    # 4) –∞–ø–¥–µ–π—Ç–∏–º–æ –≥–æ–ª–æ–¥ (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–∞—Å–∏–≤–Ω–æ–≥–æ decay)
    extra_lines = []
    if "hunger" in food:
        hunger_now, _ = await update_hunger(cid, uid)   # –ø–∞—Å–∏–≤–Ω–∏–π decay
        new_hunger = min(100, hunger_now + food["hunger"])
        await db.execute(
            """
            UPDATE progress_local
               SET hunger = :h, last_hunger_update = :now
             WHERE chat_id = :c AND user_id = :u
            """,
            {"h": new_hunger, "now": dt.datetime.utcnow(), "c": cid, "u": uid}
        )
        extra_lines.append(f"–ì–æ–ª–æ–¥: {new_hunger}/100")

    # üî∏ –æ–Ω–æ–≤–ª—é—î–º–æ ENERGY (—è–∫—â–æ —î –ø–æ–ª–µ 'energy')
    if "energy" in food:
        await add_energy(cid, uid, food["energy"])
        extra_lines.append(f"–ï–Ω–µ—Ä–≥—ñ—è: +{food['energy']}")

    # 5) –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –π —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –Ω–∞ –∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)
    msg = await message.reply(
        f"{food['name']} —Å—ä–µ–¥–µ–Ω–æ üçΩÔ∏è\n–ì–æ–ª–æ–¥: {new_hunger}/100"
    )
    register_msg_for_autodelete(message.chat.id, msg.message_id) 
