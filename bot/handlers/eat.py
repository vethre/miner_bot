# bot/handlers/eat.py
from aiogram import Router, types, F
from aiogram.filters import Command
import datetime as dt
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery

from bot.db_local import (
    cid_uid, get_inventory, add_item,
    update_hunger, update_energy, add_energy, db
)
from bot.utils.autodelete import register_msg_for_autodelete

router = Router()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CONSUMABLES = {
    # –µ–¥–∞ ‚Üí –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç hunger
    "bread":        {"name": "üçû –•–ª–µ–±",  "hunger": 30},
    "meat":         {"name": "üçñ –ú—è—Å–æ",  "hunger": 50},
    "borsch":       {"name": "ü•£ –ë–æ—Ä—â",  "hunger": 70, "energy": 20},
    # –Ω–∞–ø–∏—Ç–∫–∏ / –±—É—Å—Ç–µ—Ä—ã ‚Üí –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç energy
    "energy_drink": {"name": "ü•§ –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫", "energy": 20},
    "coffee":       {"name": "‚òï –ö–æ—Ñ–µ",       "energy": 70},
    "water_bottle": {"name": "üíß –§–ª—è–≥–∞ —Å –≤–æ–¥–æ–π", "energy": 100}
}

ALIAS = {
    "—Ö–ª–µ–±": "bread",
    "–º—è—Å–æ": "meat",
    "–±–æ—Ä—â": "borsch",
    "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫": "energy_drink",
    "–∫–æ—Ñ–µ": "coffee",
    "–±–æ—Ä—Å—á": "borsch",
    "borshch": "borsch",
}

@router.message(Command("eat"))
async def eat_cmd(message: types.Message):
    cid, uid = await cid_uid(message)
    inv = {r["item"]: r["qty"] for r in await get_inventory(cid, uid)}

    edible_keys = [k for k in CONSUMABLES if inv.get(k, 0) > 0]
    if not edible_keys:
        return await message.reply("üçΩÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏—á–µ–≥–æ —Å—ä–µ–¥–æ–±–Ω–æ–≥–æ")

    kb = InlineKeyboardBuilder()
    for key in edible_keys:
        meta = CONSUMABLES[key]
        kb.button(text=f"{meta['name']} ({inv[key]} —à—Ç.)", callback_data=f"eat:{key}:{uid}")
    kb.adjust(1)
    await message.reply("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å—ä–µ—Å—Ç—å:", reply_markup=kb.as_markup())


@router.callback_query(F.data.startswith("eat:"))
async def eat_callback(callback: CallbackQuery):
    cid, uid = await cid_uid(callback)

    try:
        _, key, orig_uid_str = callback.data.split(":")
        if uid != int(orig_uid_str):
            return await callback.answer("–≠—Ç–∞ –µ–¥–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è üò§", show_alert=True)
    except ValueError:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)

    item = CONSUMABLES.get(key)
    if not item:
        return await callback.answer("–¢–∞–∫–æ–π –µ–¥—ã –Ω–µ—Ç üòÖ")

    inv = {r["item"]: r["qty"] for r in await get_inventory(cid, uid)}
    if inv.get(key, 0) < 1:
        return await callback.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–ª—é–¥–∞ üòî", show_alert=True)

    # ‚îÄ‚îÄ‚îÄ —Å–ø–∏—Å—ã–≤–∞–µ–º 1 —à—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    await add_item(cid, uid, key, -1)

    now          = dt.datetime.utcnow()
    text_parts   = [f"–¢—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª: {item['name']}"]

    # ‚îÄ‚îÄ‚îÄ –≥–æ–ª–æ–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if "hunger" in item:
        curr_hunger = await update_hunger(cid, uid)
        new_hunger  = min(100, curr_hunger + item["hunger"])
        await db.execute(
            """
            UPDATE progress_local
               SET hunger = :h,
                   last_hunger_update = :now
             WHERE chat_id=:c AND user_id=:u
            """,
            {"h": new_hunger, "now": now, "c": cid, "u": uid}
        )
        text_parts.append(f"üçó –ì–æ–ª–æ–¥: {new_hunger}/100")

    # ‚îÄ‚îÄ‚îÄ —ç–Ω–µ—Ä–≥–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if "energy" in item:
        await add_energy(cid, uid, item["energy"])
        new_energy = await update_energy(cid, uid)
        text_parts.append(f"üîã –≠–Ω–µ—Ä–≥–∏—è: {new_energy}/100")

    await callback.message.edit_text("\n".join(text_parts))