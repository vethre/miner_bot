# bot/handlers/helmet.py
from __future__ import annotations

import random
import datetime as dt
from typing import Dict, Any

from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db_local import db, cid_uid, add_money
from bot.utils.autodelete import register_msg_for_autodelete

router = Router()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FORGE_PRICE   = 3_000          # üí∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Å–∫—É
UPGRADE_PRICE = 2_000          # üí∞ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
MAX_LVL       = 5
AUCTION_FEE   = 0.05           # –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è

# —à–∞–±–ª–æ–Ω—ã:  —Å—Ç—Ä–æ–∫–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
EFFECT_TEMPLATES: dict[str, tuple[str, tuple[int, int]]] = {
    "energy_boost":   ("üîã +{n} –µ–¥. —ç–Ω–µ—Ä–≥–∏–∏ –∫–∞–∂–¥—ã–µ 24 —á", (5, 20)),
    "xp_bonus":       ("üìò +{n}% –æ–ø—ã—Ç–∞ —Å –∫–æ–ø–æ–∫",           (3, 12)),
    "ore_bonus":      ("‚õè +{n}% –¥–æ–±—ã—á–∏ —Ä—É–¥—ã",             (2, 15)),
    "hunger_slow":    ("üçó –ì–æ–ª–æ–¥ —É–º–µ–Ω—å—à. –Ω–∞ {n}%",         (10, 35)),
    "coin_bonus":     ("üí∞ +{n}% –º–æ–Ω–µ—Ç –∏–∑ —Å–æ–±—ã—Ç–∏–π",        (5, 25)),
    "crit_mine":      ("üí• {n}% —à–∞–Ω—Å √ó2 –¥–æ–±—ã—á–∞",           (3, 12)),
    "super_event":    ("üåà +{n}% —à–∞–Ω—Å —Ä–µ–¥–∫–æ–π –∏–≤–µ–Ω—Ç–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã", (2, 8)),
    "extra_case":     ("üì¶ {n}% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –∫–µ–π—Å –ø–æ—Å–ª–µ –∫–æ–ø–∫–∏", (2, 10)),
    "regen_pick":     ("‚ôªÔ∏è +{n}% —à–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 1 –ø—Ä–æ—á–Ω–æ—Å—Ç—å –∫–∏—Ä–∫–∏ –ø–æ—Å–ª–µ –∫–æ–ø–∫–∏", (3, 12)),
    "fatigue_resist": ("üí™ -{n}% –∫ —Ä–∞—Å—Ö–æ–¥—É —ç–Ω–µ—Ä–≥–∏–∏ –ø—Ä–∏ –∫–æ–ø–∫–µ", (5, 20)),
    "lucky_miner":    ("üçÄ +{n}% —à–∞–Ω—Å –Ω–∞–π—Ç–∏ —Ä–µ–¥–∫—É—é —Ä—É–¥—É", (3, 10)),
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º. –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _rand_serial() -> str:
    """CM-XXXX, 0-–≤–ø–µ—Ä–µ–¥–∏ –≤–æ–∑–º–æ–∂–µ–Ω."""
    return f"CM-{random.randint(0, 9999):04d}"

def _rand_effect() -> tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        effect_code:  xp_bonus_7
        human_text :  üìò +7% –æ–ø—ã—Ç–∞ —Å –∫–æ–ø–æ–∫
    """
    key, (tpl, rng) = random.choice(list(EFFECT_TEMPLATES.items()))
    n = random.randint(*rng)
    return f"{key}_{n}", tpl.format(n=n)

def _effect_readable(code: str) -> str:
    if "_" not in code:
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"
    kind, n = code.split("_", 1)
    tpl = EFFECT_TEMPLATES.get(kind, ("‚ùì", (0, 0)))[0]
    return tpl.format(n=n)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ä–µ–Ω–¥–µ—Ä –∫–∞—Å–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _format_helmet(row: Dict[str, Any], show_price: bool = True) -> str:
    txt = [
        f"‚öíÔ∏è <b>–ö–∞—Å–∫–∞ {row['serial']}</b>",
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: <b>{row['lvl']}</b>",
        f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç: { _effect_readable(row['effect_code']) }",
        f"‚Ä¢ –î–∞—Ç–∞: {row['created_at']:%d.%m.%Y}",
    ]
    if show_price:
        txt.append(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞: {UPGRADE_PRICE} –º–æ–Ω–µ—Ç")
    return "\n".join(txt)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–º–∞–Ω–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("forge_helmet"))
async def forge_helmet_cmd(m: types.Message):
    cid, uid = await cid_uid(m)

    # —Å–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏
    await add_money(cid, uid, -FORGE_PRICE)

    serial = _rand_serial()
    effect_code, _ = _rand_effect()

    row = await db.fetch_one(
        """INSERT INTO helmets
               (chat_id, user_id, serial, lvl, effect_code, created_at)
         VALUES (:c, :u, :s, 1, :e, NOW())
      RETURNING *""",
        {"c": cid, "u": uid, "s": serial, "e": effect_code},
    )

    text = (
        f"üõ† <b>–ù–æ–≤–∞—è –∫–∞—Å–∫–∞ –≤—ã–∫–æ–≤–∞–Ω–∞!</b>\n\n"
        + await _format_helmet(dict(row))
        + f"\n\nüí∏ –°–ø–∏—Å–∞–Ω–æ {FORGE_PRICE} –º–æ–Ω–µ—Ç."
    )
    msg = await m.reply(text, parse_mode="HTML")
    register_msg_for_autodelete(cid, msg.message_id)

@router.message(Command("helmets"))
async def list_helmets_cmd(m: types.Message):
    cid, uid = await cid_uid(m)
    rows = await db.fetch_all(
        "SELECT * FROM helmets WHERE chat_id=:c AND user_id=:u ORDER BY created_at",
        {"c": cid, "u": uid},
    )
    if not rows:
        return await m.reply("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∫–∞—Å–æ–∫.")
    parts = [await _format_helmet(dict(r), False) for r in rows]
    await m.reply("\n\n".join(parts), parse_mode="HTML")

@router.message(Command("upgrade_helmet"))
async def upgrade_helmet_cmd(m: types.Message, command: CommandObject = None):
    cid, uid = await cid_uid(m)

    if not command.args:
        return await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /upgrade_helmet CM-1234")

    serial = command.args.strip().upper()

    row = await db.fetch_one(
        "SELECT * FROM helmets WHERE chat_id=:c AND user_id=:u AND serial=:s",
        {"c": cid, "u": uid, "s": serial},
    )
    if not row:
        return await m.reply("‚ùå –ö–∞—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    if row["lvl"] >= MAX_LVL:
        return await m.reply("üî® –ö–∞—Å–∫–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.")

    await add_money(cid, uid, -UPGRADE_PRICE)

    # 10 % —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    new_effect = row["effect_code"]
    if random.random() < 0.80:
        new_effect, _ = _rand_effect()

    row = await db.fetch_one(
        """UPDATE helmets
              SET lvl = lvl + 1,
                  effect_code = :e
            WHERE chat_id=:c AND user_id=:u AND serial=:s
        RETURNING *""",
        {"e": new_effect, "c": cid, "u": uid, "s": serial},
    )

    txt = (
        "<b>–ö–∞—Å–∫–∞ —É–ª—É—á—à–µ–Ω–∞!</b>\n\n"
        + await _format_helmet(dict(row))
        + f"\n\nüí∏ –°–ø–∏—Å–∞–Ω–æ {UPGRADE_PRICE} –º–æ–Ω–µ—Ç."
    )
    msg = await m.reply(txt, parse_mode="HTML")
    register_msg_for_autodelete(cid, msg.message_id)

@router.message(Command("auction_helmet"))
async def auction_helmet_cmd(m: types.Message, cmd: CommandObject = None):
    cid, uid = await cid_uid(m)

    if not (cmd and cmd.args):
        return await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auction_helmet <code>–Ω–æ–º–µ—Ä —Ü–µ–Ω–∞</code>")

    args = cmd.args.split()
    if len(args) != 2:
        return await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auction_helmet <code>–Ω–æ–º–µ—Ä —Ü–µ–Ω–∞</code>")

    serial, price = args[0].strip().upper(), int(args[1])
    # –ù–∞–π—Ç–∏ –∫–∞—Å–∫—É –∏–≥—Ä–æ–∫–∞
    row = await db.fetch_one(
        "SELECT * FROM helmets WHERE chat_id=:c AND user_id=:u AND serial=:s AND on_auction=FALSE",
        {"c": cid, "u": uid, "s": serial},
    )
    if not row:
        return await m.reply("‚ùå –ö–∞—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ.")
    # –°–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π, –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω
    await db.execute(
        "UPDATE helmets SET on_auction=TRUE, auction_price=:p, active=FALSE WHERE id=:id",
        {"p": price, "id": row["id"]},
    )
    await m.reply(f"ü™ñ –ö–∞—Å–∫–∞ {serial} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω –∑–∞ {price} –º–æ–Ω–µ—Ç.")

@router.message(Command("buy_helmet"))
async def buy_helmet_cmd(m: types.Message, cmd: CommandObject = None):
    cid, uid = await cid_uid(m)
    if not cmd.args:
        return await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy_helmet <code>–Ω–æ–º–µ—Ä</code>")
    serial = cmd.args.strip().upper()
    row = await db.fetch_one(
        "SELECT * FROM helmets WHERE serial=:s AND on_auction=TRUE",
        {"s": serial},
    )
    if not row:
        return await m.reply("‚ùå –ö–∞—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ.")
    if row["user_id"] == uid:
        return await m.reply("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å —Å–≤–æ—é –∂–µ –∫–∞—Å–∫—É.")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    from bot.db_local import get_money, add_money
    price = row["auction_price"]
    buyer_balance = await get_money(cid, uid)
    if buyer_balance < price:
        return await m.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
    # –î–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É
    await add_money(cid, row["user_id"], price)
    # –î–µ–Ω—å–≥–∏ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å–ø–∏—Å—ã–≤–∞–µ–º
    await add_money(cid, uid, -price)
    # –ü–µ—Ä–µ–¥–∞—ë–º –∫–∞—Å–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, —Å–Ω–∏–º–∞–µ–º —Å –∞—É–∫—Ü–∏–æ–Ω–∞
    await db.execute(
        "UPDATE helmets SET user_id=:new_uid, chat_id=:new_cid, on_auction=FALSE, active=FALSE, previous_owner=:old_uid WHERE id=:id",
        {"new_uid": uid, "new_cid": cid, "old_uid": row["user_id"], "id": row["id"]}
    )
    await m.reply(f"–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢—ã –ø—Ä–∏–æ–±—Ä—ë–ª –∫–∞—Å–∫—É {serial} –∑–∞ {price} –º–æ–Ω–µ—Ç.")

@router.message(Command("unauction_helmet"))
async def unauction_helmet_cmd(m: types.Message, cmd: CommandObject = None):
    cid, uid = await cid_uid(m)
    if not cmd.args:
        return await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unauction_helmet <code>–Ω–æ–º–µ—Ä</code>")
    serial = cmd.args.strip().upper()
    row = await db.fetch_one(
        "SELECT * FROM helmets WHERE chat_id=:c AND user_id=:u AND serial=:s AND on_auction=TRUE",
        {"c": cid, "u": uid, "s": serial},
    )
    if not row:
        return await m.reply("‚ùå –ö–∞—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ.")
    await db.execute(
        "UPDATE helmets SET on_auction=FALSE WHERE id=:id", {"id": row["id"]}
    )
    await m.reply(f"–ö–∞—Å–∫–∞ {serial} —Å–Ω—è—Ç–∞ —Å –∞—É–∫—Ü–∏–æ–Ω–∞.")

@router.message(Command("my_auctioned_helmets"))
async def my_auctioned_helmets_cmd(m: types.Message):
    cid, uid = await cid_uid(m)
    rows = await db.fetch_all(
        "SELECT * FROM helmets WHERE chat_id=:c AND user_id=:u AND on_auction=TRUE",
        {"c": cid, "u": uid},
    )
    if not rows:
        return await m.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Å–æ–∫ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ.")
    lines = [f"{r['serial']} ‚Äî {r['auction_price']} –º–æ–Ω–µ—Ç" for r in rows]
    await m.reply("\n".join(lines))
