from aiogram import Router, types, Bot, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, CommandStart
from bot.db import (
    create_user, get_user, db, add_item,
    get_inventory, add_xp, update_energy, update_streak
)
from bot.handlers.crafting import SMELT_INPUT_MAP, SMELT_RECIPES, CRAFT_RECIPES
import time, random, asyncio

router = Router()

# –û–ø–∏—Å —Ä—É–¥
ORE_ITEMS = {
    "stone": {"name": "–ö–∞–º—ñ–Ω—å",       "emoji": "ü™®", "drop_range": (1,5), "price": 2},
    "coal":  {"name": "–í—É–≥—ñ–ª–ª—è",      "emoji": "üß±", "drop_range": (1,4), "price": 5},
    "iron":  {"name": "–ó–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞", "emoji": "‚õèÔ∏è", "drop_range": (1,3), "price": 10},
    "gold":  {"name": "–ó–æ–ª–æ—Ç–æ",       "emoji": "ü™ô", "drop_range": (1,2), "price": 20},
}

# Duration of mining
MINE_DURATION = 60 # test

async def mining_task(bot: Bot, user_id: int, chat_id: int):
    await asyncio.sleep(MINE_DURATION)
    user = await get_user(user_id)

    # drop
    ore_id = random.choice(list(ORE_ITEMS.keys()))
    low, high = ORE_ITEMS[ore_id]["drop_range"]
    amount = random.randint(low, high)

    await add_item(user_id, ore_id, amount)
    await add_xp(user_id, amount)
    streak = await update_streak(user)

    # –æ—á–∏—â–∞—î–º–æ mining_end
    await db.execute(
        "UPDATE users SET mining_end = 0 WHERE user_id = :uid",
        {"uid": user_id}
    )

    ore = ORE_ITEMS[ore_id]
    await bot.send_message(
        chat_id,
        (
            f"üèîÔ∏è –ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –∑ —à–∞—Ö—Ç–∏!\n"
            f"–ó–¥–æ–±—É—Ç–æ <b>{amount}√ó{ore['emoji']} {ore['name']}</b>\n"
            f"XP +{amount}, streak: {streak} –¥–Ω—ñ–≤."
        ),
        parse_mode="HTML"
    )

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
@router.message(CommandStart())
async def start_cmd(message: types.Message):
    await create_user(
        message.from_user.id,
        message.from_user.username or message.from_user.full_name
    )
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç, —à–∞—Ö—Ç–∞—Ä—é! ‚õèÔ∏è –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /mine, —â–æ–± –∫–æ–ø–∞—Ç–∏ —Ä–µ—Å—É—Ä—Å–∏!"
    )

@router.message(Command("profile"))
async def profile_cmd(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        return await message.reply("–°–ø–µ—Ä—à—É –≤–≤–µ–¥–∏ /start")
    # –û–Ω–æ–≤–ª—é—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é
    energy, _ = await update_energy(user)
    max_e = 5 + (user["level"] - 1) * 2
    lvl = user["level"]
    xp = user["xp"]
    next_xp = lvl * 100

    # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Å–Ω–æ–≤–Ω—ñ", callback_data="profile:basic")
    builder.button(text="–°–µ–∫—Ä–µ—Ç–Ω—ñ", callback_data="profile:secret")
    builder.adjust(2)

    await message.reply(
        f"üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å</b> ‚Äî –≤–∏–±–µ—Ä–∏, —â–æ –ø–æ–∫–∞–∑–∞—Ç–∏:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("profile:"))
async def profile_callback(callback: types.CallbackQuery):
    action = callback.data.split(':',1)[1]
    user = await get_user(callback.from_user.id)
    if not user:
        return await callback.message.reply("–°–ø–µ—Ä—à—É /start")

    if action == "basic":
        energy, _ = await update_energy(user)
        max_e = 5 + (user["level"] - 1) * 2
        lvl = user["level"]
        xp = user["xp"]
        next_xp = lvl * 100
        text = [
            f"üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å:</b> {callback.from_user.full_name}",
            f"‚≠ê <b>–†—ñ–≤–µ–Ω—å:</b> {lvl} (XP: {xp}/{next_xp})",
            f"üîã <b>–ï–Ω–µ—Ä–≥—ñ—è:</b> {energy}/{max_e}",
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user['balance']} –º–æ–Ω–µ—Ç"
        ]
    else:  # secret stats
        inv = await get_inventory(callback.from_user.id)
        total_items = sum(row['quantity'] for row in inv)
        distinct = len(inv)
        text = [
            f"üîç <b>–°–µ–∫—Ä–µ—Ç–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>",
            f"üóÉÔ∏è –†—ñ–∑–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤: {distinct}",
            f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Å—É—Ä—Å—ñ–≤: {total_items}",
            f"üíé –ó–∞–≥–∞–ª—å–Ω–∏–π XP: {user['xp']}"
        ]
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ —ñ –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await callback.message.edit_text(
        "\n".join(text),
        parse_mode="HTML"
    )

@router.message(Command("mine"))
async def mine_cmd(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        return await message.reply("–°–ø–µ—Ä—à—É /start")

    # –æ–Ω–æ–≤–ª—é—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é
    energy, _ = await update_energy(user)
    if energy < 1:
        return await message.reply("üò¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –µ–Ω–µ—Ä–≥—ñ—ó. –ó–∞—á–µ–∫–∞–π.")

    now = int(time.time())
    if user["mining_end"] and user["mining_end"] > now:
        return await message.reply(f"‚õèÔ∏è –¢–∏ —â–µ –≤ —à–∞—Ö—Ç—ñ, –∑–∞–ª–∏—à–∏–ª–æ—Å—å {user['mining_end']-now} —Å–µ–∫.")

    # —Å–ø–∏—Å—É—î–º–æ 1 –µ–Ω–µ—Ä–≥—ñ—é —ñ —Å—Ç–∞–≤–∏–º–æ mining_end
    await db.execute(
        """
        UPDATE users
           SET energy = energy - 1,
               mining_end = :end
         WHERE user_id = :uid
        """,
        {"end": now + MINE_DURATION, "uid": user["user_id"]}
    )

    await message.reply(f"‚õèÔ∏è –Ü–¥—É –≤ —à–∞—Ö—Ç—É –Ω–∞ {MINE_DURATION} —Å–µ–∫. –£—Å–ø—ñ—Ö—ñ–≤!")
    # —Ñ–æ–Ω–æ–≤–∏–π –ø–æ—Ö—ñ–¥
    asyncio.create_task(mining_task(message.bot, user["user_id"], message.chat.id))

@router.message(Command("inventory"))
async def inventory_cmd(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        return await message.reply("–°–ø–µ—Ä—à—É /start")
    inv = await get_inventory(message.from_user.id)
    lines = [f"üßæ –ë–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç", "<b>üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä:</b>"]
    for row in inv:
        ore = ORE_ITEMS[row['item']]
        lines.append(f"{ore['emoji']} {ore['name']}: {row['quantity']}")
    return await message.reply("\n".join(lines), parse_mode="HTML")

@router.message(Command("sell"))
async def sell_cmd(message: types.Message, command: Command):
    args = command.args.split()  # —É—Å–µ –ø—ñ—Å–ª—è /sell
    if len(args) < 2:
        return await message.reply("–Ø–∫ –ø—Ä–æ–¥–∞—Ç–∏: /sell <–Ω–∞–∑–≤–∞ —Ä–µ—Å—É—Ä—Å—É> <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>")

    # –û—Å—Ç–∞–Ω–Ω—ñ–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî —Ü–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    try:
        qty = int(args[-1])
    except ValueError:
        return await message.reply("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")

    # –£—Å–µ —Ä–µ—à—Ç–∞ ‚Äî –Ω–∞–∑–≤–∞ —Ä–µ—Å—É—Ä—Å—É (–º–æ–∂–µ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ –∫—ñ–ª—å–∫–æ—Ö —Å–ª—ñ–≤)
    item_name = " ".join(args[:-1]).lower()  # –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–≥—ñ—Å—Ç—Ä

    # –û–ø–∏—Å —Ä–µ—Å—É—Ä—Å—ñ–≤ (–∫–ª—é—á—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ)
    PRICE = {
        "–∫–∞–º—ñ–Ω—å": 2,
        "–≤—É–≥—ñ–ª–ª—è": 5,
        "–∑–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞": 10,
        "–∑–æ–ª–æ—Ç–æ": 20,
    }

    if item_name not in PRICE:
        return await message.reply(f"–†–µ—Å—É—Ä—Å ¬´{item_name}¬ª –Ω–µ —Ç–æ—Ä–≥—É—î—Ç—å—Å—è üòï")

    inv = await get_inventory(message.from_user.id)
    inv_dict = {row["item"]: row["quantity"] for row in inv}
    have = inv_dict.get(item_name, 0)
    if have < qty:
        return await message.reply(f"–£ —Ç–µ–±–µ –ª–∏—à–µ {have}√ó{item_name}")

    # –ó–Ω—ñ–º–∞—î–º–æ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è —ñ –¥–æ–¥–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
    await db.execute(
        """
        UPDATE inventory
           SET quantity = quantity - :qty
         WHERE user_id = :uid AND item = :item
        """,
        {"qty": qty, "uid": message.from_user.id, "item": item_name}
    )
    earned = PRICE[item_name] * qty
    await db.execute(
        "UPDATE users SET balance = balance + :earned WHERE user_id = :uid",
        {"earned": earned, "uid": message.from_user.id}
    )

    return await message.reply(f"–ü—Ä–æ–¥–∞–Ω–æ {qty}√ó{item_name} –∑–∞ {earned} –º–æ–Ω–µ—Ç üí∞")

@router.message(Command("smelt"))
async def smelt_cmd(message: types.Message, command: Command):
    args = command.args.split()
    if len(args) < 2:
        return await message.reply("–Ø–∫ –ø–µ—Ä–µ–ø–ª–∞–≤–∏—Ç–∏: /smelt <—Ä—É–¥–∞> <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>")

    qty_str = args[-1]
    try:
        qty = int(qty_str)
    except ValueError:
        return await message.reply("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
    ore_name = " ".join(args[:-1]).lower()

    ore_key = SMELT_INPUT_MAP.get(ore_name)
    if not ore_key:
        return await message.reply(f"–ù–µ –º–æ–∂—É –ø–µ—Ä–µ–ø–ª–∞–≤–∏—Ç–∏ ¬´{ore_name}¬ª üòï")
    
    recipe = SMELT_RECIPES.get(ore_key)
    if not recipe:
        return await message.reply(f"¬´{ore_name}¬ª –Ω–µ –ø–ª–∞–≤–∏—Ç—å—Å—è üî•")
    
    inv = await get_inventory(message.from_user.id)
    inv_dict = {row["item"]: row["quantity"] for row in inv}
    have = inv_dict.get(ore_key, 0)
    if have < qty:
        return await message.reply(f"–£ —Ç–µ–±–µ –ª–∏—à–µ {have}√ó{ore_name}")
    
    in_qty = recipe["in_qty"]
    cnt = qty // in_qty
    if cnt < 1:
        return await message.reply(f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ {in_qty}√ó{ore_name} –¥–ª—è 1 {recipe['out_name']}")
    
    used = cnt * in_qty

    await db.execute("UPDATE inventory SET quantity = quantity - :used WHERE user_id = :uid AND item = :ore",
        {"used": used, "uid": message.from_user.id, "ore": ore_key})
    
    await add_item(message.from_user.id, recipe["out_key"], cnt)

    return await message.reply(
        f"üîî –ü—ñ—á –∑–∞–≤–µ—Ä—à–∏–ª–∞: {cnt}√ó{recipe['out_name']} (–≤–∏—Ç—Ä–∞—á–µ–Ω–æ {used}√ó{ore_name})"
    )

@router.message(Command("craft"))
async def craft_cmd(message: types.Message, command: Command):
    args = command.args.split()
    if not args:
        return await message.reply("–Ø–∫ –∫—Ä–∞—Ñ—Ç–∏—Ç–∏: /craft <–Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É>")

    craft_name = " ".join(args).lower()
    recipe = CRAFT_RECIPES.get(craft_name)
    if not recipe:
        return await message.reply(f"–†–µ—Ü–µ–ø—Ç –¥–ª—è ¬´{craft_name}¬ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòï")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
    inv = await get_inventory(message.from_user.id)
    inv_dict = {row["item"]: row["quantity"] for row in inv}

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω–∏–π —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç
    for key, need in recipe["in"].items():
        have = inv_dict.get(key, 0)
        if have < need:
            name = recipe["out_name"]
            return await message.reply(f"–î–ª—è {name} –ø–æ—Ç—Ä—ñ–±–Ω–æ {need}√ó{key}, —É —Ç–µ–±–µ –ª–∏—à–µ {have}")

    # –°–ø–∏—Å—É—î–º–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
    for key, need in recipe["in"].items():
        await db.execute(
            "UPDATE inventory SET quantity = quantity - :need WHERE user_id = :uid AND item = :key",
            {"need": need, "uid": message.from_user.id, "key": key}
        )
    # –î–æ–¥–∞—î–º–æ –≥–æ—Ç–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç
    await add_item(message.from_user.id, recipe["out_key"], 1)

    return await message.reply(f"üéâ –°–∫—Ä–∞—Ñ—Ç–ª–µ–Ω–æ: {recipe['out_name']}!")
