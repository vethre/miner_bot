from aiogram import Router, types, Bot, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, CommandStart
from bot.db import (
    create_user, get_user, db, add_item,
    get_inventory, add_xp, update_energy, update_streak, update_hunger
)
from bot.handlers.crafting import SMELT_INPUT_MAP, SMELT_RECIPES, CRAFT_RECIPES
from bot.handlers.items import ITEM_DEFS
from bot.handlers.use import PICKAXES
from bot.handlers.shop import shop_cmd
import time, random, asyncio

router = Router()

# –û–ø–∏—Å —Ä—É–¥
ORE_ITEMS = {
    "stone": {"name": "–ö–∞–º—ñ–Ω—å",       "emoji": "ü™®", "drop_range": (1,5), "price": 2},
    "coal":  {"name": "–í—É–≥—ñ–ª–ª—è",      "emoji": "üß±", "drop_range": (1,4), "price": 5},
    "iron":  {"name": "–ó–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞", "emoji": "‚õèÔ∏è", "drop_range": (1,3), "price": 10},
    "gold":  {"name": "–ó–æ–ª–æ—Ç–æ",       "emoji": "ü™ô", "drop_range": (1,2), "price": 20},
}

# Duration of mining
MINE_DURATION = 60 # test

async def mining_task(bot: Bot, user_id: int, chat_id: int):
    await asyncio.sleep(MINE_DURATION)
    user = await get_user(user_id)

    # drop
    ore_id = random.choice(list(ORE_ITEMS.keys()))
    low, high = ORE_ITEMS[ore_id]["drop_range"]
    amount = random.randint(low, high)

    await add_item(user_id, ore_id, amount)
    await add_xp(user_id, amount)
    streak = await update_streak(user)

    # –æ—á–∏—â–∞—î–º–æ mining_end
    await db.execute(
        "UPDATE users SET mining_end = 0 WHERE user_id = :uid",
        {"uid": user_id}
    )

    ore = ORE_ITEMS[ore_id]
    await bot.send_message(
        chat_id,
        (
            f"üèîÔ∏è –ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –∑ —à–∞—Ö—Ç–∏!\n"
            f"–ó–¥–æ–±—É—Ç–æ <b>{amount}√ó{ore['emoji']} {ore['name']}</b>\n"
            f"XP +{amount}, streak: {streak} –¥–Ω—ñ–≤."
        ),
        parse_mode="HTML"
    )

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
@router.message(CommandStart())
async def start_cmd(message: types.Message):
    await create_user(
        message.from_user.id,
        message.from_user.username or message.from_user.full_name
    )
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç, —à–∞—Ö—Ç–∞—Ä—é! ‚õèÔ∏è –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /mine, —â–æ–± –∫–æ–ø–∞—Ç–∏ —Ä–µ—Å—É—Ä—Å–∏!"
    )

@router.message(Command("profile"))
async def profile_cmd(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        return await message.reply("–°–ø–µ—Ä—à—É –≤–≤–µ–¥–∏ /start")

    # –ø–æ–Ω–æ–≤–ª—é—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é —Ç–∞ –≥–æ–ª–æ–¥
    energy, _ = await update_energy(user)
    hunger, _ = await update_hunger(user)

    # —Ä—ñ–≤–µ–Ω—å —ñ XP
    lvl = user["level"]
    xp = user["xp"]
    next_xp = lvl * 100

    # –ø–æ—Ç–æ—á–Ω–∞ –∫–∏—Ä–∫–∞
    try:
        current = user["current_pickaxe"] or "none"
    except KeyError:
        current = "none"

    pick    = PICKAXES.get(current)
    pick_name = pick["name"] if pick else "‚Äì"

    # –±—É–¥—É—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä",    callback_data="profile:inventory")
    builder.button(text="üõí –ú–∞–≥–∞–∑–∏–Ω",     callback_data="profile:shop")
    builder.button(text="‚õèÔ∏è –®–∞—Ö—Ç–∞",       callback_data="profile:mine")
    # builder.button(text="üèÜ –ê—á–∏–≤–∫–∏",      callback_data="profile:achievements")
    builder.adjust(2)

    text = [
        f"üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å:</b> {message.from_user.full_name}",
        f"‚≠ê <b>–†—ñ–≤–µ–Ω—å:</b> {lvl} (XP: {xp}/{next_xp})",
        f"üîã <b>–ï–Ω–µ—Ä–≥—ñ—è:</b> {energy}/100",
        f"üçó <b>–ì–æ–ª–æ–¥:</b> {hunger}/100",
        f"‚õèÔ∏è <b>–ö–∏—Ä–∫–∞:</b> {pick_name}",
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user['balance']} –º–æ–Ω–µ—Ç"
    ]
    await message.reply(
        "\n".join(text),
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
# Profile Callback
@router.callback_query(F.data.startswith("profile:"))
async def profile_callback(callback: types.CallbackQuery):
    await callback.answer()                # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–ø—ñ–Ω–µ—Ä –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
    action = callback.data.split(":", 1)[1]

    if action == "inventory":
        await inventory_cmd(callback.message, user_id=callback.from_user.id)
    elif action == "shop":
        await shop_cmd(callback.message, user_id=callback.from_user.id)
    elif action == "mine":
        await mine_cmd(callback.message, user_id=callback.from_user.id)
        

@router.message(Command("mine"))
async def mine_cmd(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        return await message.reply("–°–ø–µ—Ä—à—É /start")

    # –æ–Ω–æ–≤–ª—é—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é
    energy, _ = await update_energy(user)
    if energy < 1:
        return await message.reply("üò¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –µ–Ω–µ—Ä–≥—ñ—ó. –ó–∞—á–µ–∫–∞–π.")

    now = int(time.time())
    if user["mining_end"] and user["mining_end"] > now:
        return await message.reply(f"‚õèÔ∏è –¢–∏ —â–µ –≤ —à–∞—Ö—Ç—ñ, –∑–∞–ª–∏—à–∏–ª–æ—Å—å {user['mining_end']-now} —Å–µ–∫.")

    # —Å–ø–∏—Å—É—î–º–æ 1 –µ–Ω–µ—Ä–≥—ñ—é —ñ —Å—Ç–∞–≤–∏–º–æ mining_end
    await db.execute(
        """
        UPDATE users
           SET energy = energy - 1,
               mining_end = :end
         WHERE user_id = :uid
        """,
        {"end": now + MINE_DURATION, "uid": user["user_id"]}
    )

    await message.reply(f"‚õèÔ∏è –Ü–¥—É –≤ —à–∞—Ö—Ç—É –Ω–∞ {MINE_DURATION} —Å–µ–∫. –£—Å–ø—ñ—Ö—ñ–≤!")
    # —Ñ–æ–Ω–æ–≤–∏–π –ø–æ—Ö—ñ–¥
    asyncio.create_task(mining_task(message.bot, user["user_id"], message.chat.id))

@router.message(Command("inventory"))
async def inventory_cmd(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        return await message.reply("–°–ø–µ—Ä—à—É /start")

    inv = await get_inventory(message.from_user.id)
    lines = [f"üßæ –ë–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç", "<b>üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä:</b>"]

    for row in inv:
        key = row["item"]
        qty = row["quantity"]
        item = ITEM_DEFS.get(key, {"name": key, "emoji": ""})
        # –Ø–∫—â–æ —î emoji ‚Äî –¥–æ–¥–∞—î–º–æ –∑–ª—ñ–≤–∞
        prefix = f"{item['emoji']} " if item["emoji"] else ""
        lines.append(f"{prefix}{item['name']}: {qty}")

    await message.reply("\n".join(lines), parse_mode="HTML")

@router.message(Command("sell"))
async def sell_cmd(message: types.Message):
    text = message.text or ""
    parts = text.split(maxsplit=1)  # ['/sell', '<—Ä–µ—Å—É—Ä—Å> <–∫-—Å—Ç—å>']
    if len(parts) < 2:
        return await message.reply("–Ø–∫ –ø—Ä–æ–¥–∞—Ç–∏: /sell '–Ω–∞–∑–≤–∞ —Ä–µ—Å—É—Ä—Å—É' '–∫—ñ–ª—å–∫—ñ—Å—Ç—å'")

    rest = parts[1]
    try:
        item_part, qty_str = rest.rsplit(maxsplit=1)  # ['–ó–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞', '3']
    except ValueError:
        return await message.reply("–Ø–∫ –ø—Ä–æ–¥–∞—Ç–∏: /sell '–Ω–∞–∑–≤–∞ —Ä–µ—Å—É—Ä—Å—É' '–∫—ñ–ª—å–∫—ñ—Å—Ç—å'")

    item_name = item_part.lower().strip()
    if not qty_str.isdigit():
        return await message.reply("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
    qty = int(qty_str)

    # –¶—ñ–Ω–∏
    PRICE = {
        "–∫–∞–º—ñ–Ω—å": 2,
        "–≤—É–≥—ñ–ª–ª—è": 5,
        "–∑–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞": 10,
        "–∑–æ–ª–æ—Ç–æ": 20,
    }
    if item_name not in PRICE:
        return await message.reply(f"–†–µ—Å—É—Ä—Å ¬´{item_name}¬ª –Ω–µ —Ç–æ—Ä–≥—É—î—Ç—å—Å—è üòï")

    inv = await get_inventory(message.from_user.id)
    inv_dict = {row["item"]: row["quantity"] for row in inv}
    have = inv_dict.get(item_name, 0)
    if have < qty:
        return await message.reply(f"–£ —Ç–µ–±–µ –ª–∏—à–µ {have}√ó{item_name}")

    # –°–ø–∏—Å—É—î–º–æ —Ä–µ—Å—É—Ä—Å–∏
    await db.execute(
        """
        UPDATE inventory
           SET quantity = quantity - :qty
         WHERE user_id = :uid AND item = :item
        """,
        {"qty": qty, "uid": message.from_user.id, "item": item_name}
    )
    earned = PRICE[item_name] * qty
    # –î–æ–¥–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
    await db.execute(
        "UPDATE users SET balance = balance + :earned WHERE user_id = :uid",
        {"earned": earned, "uid": message.from_user.id}
    )

    await message.reply(f"–ü—Ä–æ–¥–∞–Ω–æ {qty}√ó{item_name} –∑–∞ {earned} –º–æ–Ω–µ—Ç üí∞")

@router.message(Command("smelt"))
async def smelt_cmd(message: types.Message):
    text = message.text or ""
    parts = text.split(maxsplit=1)  # ['/smelt', '–ó–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞ 17']
    if len(parts) < 2:
        return await message.reply("–Ø–∫ –ø–µ—Ä–µ–ø–ª–∞–≤–∏—Ç–∏: /smelt '—Ä—É–¥–∞' '–∫—ñ–ª—å–∫—ñ—Å—Ç—å'")

    rest = parts[1]  # '–ó–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞ 17'
    try:
        ore_part, qty_str = rest.rsplit(maxsplit=1)  # ['–ó–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞', '17']
    except ValueError:
        return await message.reply("–Ø–∫ –ø–µ—Ä–µ–ø–ª–∞–≤–∏—Ç–∏: /smelt '—Ä—É–¥–∞' '–∫—ñ–ª—å–∫—ñ—Å—Ç—å'")

    ore_name = ore_part.lower()
    if not qty_str.isdigit():
        return await message.reply("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")

    qty = int(qty_str)

    # –¢–≤–æ—è –º–∞–ø–∞ input‚Üí–∫–ª—é—á
    ore_key = SMELT_INPUT_MAP.get(ore_name)
    if not ore_key:
        return await message.reply(f"–ù–µ –∑–Ω–∞—é —Ç–∞–∫—É —Ä—É–¥—É ¬´{ore_name}¬ª üòï")

    recipe = SMELT_RECIPES[ore_key]
    have = {row["item"]: row["quantity"] for row in await get_inventory(message.from_user.id)}.get(ore_key, 0)
    if have < qty:
        return await message.reply(f"–£ —Ç–µ–±–µ –ª–∏—à–µ {have}√ó{ore_name}")

    cnt = qty // recipe["in_qty"]
    if cnt < 1:
        return await message.reply(f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ {recipe['in_qty']}√ó{ore_name} –¥–ª—è 1√ó{recipe['out_name']}")

    used = cnt * recipe["in_qty"]
    # –°–ø–∏—Å—É—î–º–æ —Ä—É–¥—É
    await db.execute(
        "UPDATE inventory SET quantity = quantity - :used WHERE user_id = :uid AND item = :ore",
        {"used": used, "uid": message.from_user.id, "ore": ore_key}
    )
    # –î–æ–¥–∞—î–º–æ —ñ–Ω–≥–æ—Ç–∏
    await add_item(message.from_user.id, recipe["out_key"], cnt)

    return await message.reply(
        f"üîî –ü—ñ—á –∑–∞–≤–µ—Ä—à–∏–ª–∞: {cnt}√ó{recipe['out_name']} (–≤–∏—Ç—Ä–∞—á–µ–Ω–æ {used}√ó{ore_name})"
    )

@router.message(Command("craft"))
async def craft_cmd(message: types.Message):
    text = message.text or ""
    parts = text.split(maxsplit=1)  # ['/craft', '<–Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É>']
    if len(parts) < 2:
        return await message.reply("–Ø–∫ –∫—Ä–∞—Ñ—Ç–∏—Ç–∏: /craft '–Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É'")

    craft_name = parts[1].lower().strip()  # –≤—Å—è —Ä–µ—à—Ç–∞ ‚Äî –Ω–∞–∑–≤–∞
    recipe = CRAFT_RECIPES.get(craft_name)
    if not recipe:
        return await message.reply(f"–†–µ—Ü–µ–ø—Ç –¥–ª—è ¬´{craft_name}¬ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòï")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
    inv = await get_inventory(message.from_user.id)
    inv_dict = {row["item"]: row["quantity"] for row in inv}

    for key, need in recipe["in"].items():
        have = inv_dict.get(key, 0)
        if have < need:
            return await message.reply(
                f"–î–ª—è {recipe['out_name']} –ø–æ—Ç—Ä—ñ–±–Ω–æ {need}√ó{key}, —É —Ç–µ–±–µ –ª–∏—à–µ {have}"
            )

    # –°–ø–∏—Å—É—î–º–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
    for key, need in recipe["in"].items():
        await db.execute(
            """
            UPDATE inventory
               SET quantity = quantity - :need
             WHERE user_id = :uid AND item = :key
            """,
            {"need": need, "uid": message.from_user.id, "key": key}
        )

    # –î–æ–¥–∞—î–º–æ –≥–æ—Ç–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç
    await add_item(message.from_user.id, recipe["out_key"], 1)

    await message.reply(f"üéâ –°–∫—Ä–∞—Ñ—Ç–ª–µ–Ω–æ: {recipe['out_name']}!")
