from __future__ import annotations

import asyncio
import json
import logging
import re
from typing import List, Dict
from aiogram.utils.markdown import link
import random
import time
import datetime as dt
from typing import List

from aiogram import Router, Bot, types, F
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery
from aiogram.enums import ChatMemberStatus

from bot.db import db, create_user, get_user
from bot.db_local import (
    UTC,
    cid_uid,
    add_item,
    add_money,
    add_xp,
    get_inventory,
    get_money,
    update_energy,
    update_hunger,
    get_progress,
    update_streak,
    add_energy,
    change_dur,
    _jsonb_to_dict,
)
from bot.handlers.badgeshop import badgeshop_cmd
from bot.handlers.cavepass import cavepass_cmd
from bot.handlers.achievements import achievements_menu
from bot.handlers.badge_defs import BADGES
from bot.handlers.badges import badges_menu
from bot.handlers.eat import eat_cmd
from bot.handlers.items import ITEM_DEFS
from bot.handlers.crafting import SMELT_RECIPES, SMELT_INPUT_MAP, CRAFT_RECIPES
from bot.handlers.trackpass import trackpass_cmd
from bot.handlers.use import PICKAXES, use_cmd
from bot.handlers.shop import shop_cmd
from bot.assets import INV_IMG_ID, PROFILE_IMG_ID, START_IMG_ID, STATS_IMG_ID, ABOUT_IMG_ID, GLITCHED_PROF_IMG_ID
from bot.utils.autodelete import register_msg_for_autodelete
from bot.handlers.use import _json2dict
from bot.utils.unlockachievement import unlock_achievement

router = Router()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BASE_MINE_SEC   = 1200          # Tier-1
MINE_SEC_STEP   = -300          # -80 —Å –∑–∞ –∫–æ–∂–µ–Ω Tier –≤–∏—â–µ
MINE_SEC_MIN    = 60

BASE_SMELT_SEC  = 600          # –∑–∞ 1 —ñ–Ω–≥–æ—Ç
TORCH_SPEEDUP   = 0.7         # Torch Bundle

HUNGER_COST = 10
HUNGER_LIMIT = 20

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†—É–¥–∏  + Tiers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ORE_ITEMS = {
    "stone":    {"name": "–ö–∞–º–µ–Ω—å",   "emoji": "ü™®", "drop_range": (10, 16), "price": 2},
    "coal":     {"name": "–£–≥–æ–ª—å",  "emoji": "üß±", "drop_range": (8, 14),  "price": 5},
    "iron":     {"name": "–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞", "emoji": "‚õèÔ∏è", "drop_range": (6, 12),  "price": 9},
    "gold":     {"name": "–ó–æ–ª–æ—Ç–æ",   "emoji": "ü™ô", "drop_range": (4, 10),  "price": 13},
    "amethyst": {"name": "–ê–º–µ—Ç–∏—Å—Ç",  "emoji": "üíú", "drop_range": (3, 8),  "price": 18},
    "diamond":  {"name": "–ê–ª–º–∞–∑",  "emoji": "üíé", "drop_range": (1, 2),  "price": 57},
    "emerald":  {"name": "–ò–∑—É–º—Ä—É–¥",  "emoji": "üíö", "drop_range": (1, 3),  "price": 38},
    "lapis":    {"name": "–õ–∞–∑—É—Ä–∏—Ç",  "emoji": "üîµ", "drop_range": (3, 6),  "price": 30},
    "ruby":     {"name": "–†—É–±–∏–Ω",    "emoji": "‚ù§Ô∏è", "drop_range": (1, 4),  "price": 45},
    "eonite_shard":     {"name": "–û—Å–∫–æ–ª–æ–∫ –≠–æ–Ω–∏—Ç–∞",    "emoji": "üßø", "drop_range": (1, 2),  "price": 100},
}

TIER_TABLE = [
    {"level_min": 1,  "ores": ["stone", "coal"]},
    {"level_min": 4,  "ores": ["stone", "coal", "iron"]},
    {"level_min": 8, "ores": ["stone", "coal", "iron", "gold"]},
    {"level_min": 13, "ores": ["stone", "coal", "iron", "gold", "amethyst", "lapis"]},
    {"level_min": 18, "ores": ["stone", "coal", "iron", "gold", "amethyst", "lapis", "emerald", "ruby"]},
    {"level_min": 23, "ores": ["stone", "coal", "iron", "gold", "amethyst", "lapis", "emerald", "ruby", "diamond"]},
]
BONUS_BY_TIER = {i + 1: 1.0 + i * 0.2 for i in range(len(TIER_TABLE))}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Helper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def get_tier(level:int)->int:
    t = 1
    for i,row in enumerate(TIER_TABLE,1):
        if level>=row["level_min"]: t=i
    return t

def get_mine_duration(tier:int)->int:
    return max(BASE_MINE_SEC + MINE_SEC_STEP*(tier-1), MINE_SEC_MIN)

def get_smelt_duration(cnt:int, torch_mult:float=1.0)->int:
    return round(BASE_SMELT_SEC * cnt * torch_mult)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚Äú–ö–∞—Ä—Ç–∫–∏ —à–∞–Ω—Å—É‚Äù ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ChanceEvent = tuple[str, str, str, int]    
#          (key , text , effect , weight)

CHANCE_EVENTS: list[ChanceEvent] = [
    ("found_coins",   "–¢—ã –Ω–∞—à—ë–ª –∫–æ—à–µ–ª—ë–∫ üí∞  +{n} –º–æ–Ω–µ—Ç",  "coins:+", 100),
    ("pet_cat",       "–ü–æ–≥–ª–∞–¥–∏–ª –∫–æ—à–∫—É üò∏     +{n} XP",      "xp:+",    30),
    ("robbery",       "–¢–µ–±—è –æ–≥—Ä–∞–±–∏–ª–∏! ‚àí{n} –º–æ–Ω–µ—Ç",       "coins:-", 20),
    ("miner_snack",   "–®–∞—Ö—Ç—ë—Ä—Å–∫–∏–π –ø–µ—Ä–µ–∫—É—Å ü•™   +{n} —ç–Ω–µ—Ä–≥–∏–∏",  "energy:+",10),
    ("emergency_exit",   "–í—ã—Ö–æ–¥ –∏–∑ —à–∞—Ö—Ç—ã –∑–∞—Å—ã–ø–∞–ª–æ!   -{n} —ç–Ω–µ—Ä–≥–∏–∏",  "energy:-",8),
    ("emergency_exit_2",   "–í—ã—Ö–æ–¥ –∏–∑ —à–∞—Ö—Ç—ã –∑–∞—Å—ã–ø–∞–ª–æ! –ù–æ —Ç—ã —Å–º–æ–≥ –≤—ã–±—Ä–∞—Ç—å—Å—è –≤–æ–≤—Ä–µ–º—è,   +{n} XP",  "xp:+",20),
    ("pet_cat",       "–ü–æ–≥–ª–∞–¥–∏–ª –∫–æ—à–∫—É üò∏, –Ω–æ –µ–π —ç—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.     -{n} —ç–Ω–µ—Ä–≥–∏–∏",      "energy:-",    12),
]

def pick_chance_event() -> ChanceEvent|None:
    if random.random() > 0.30:          # –ª–∏—à–µ 30 % —à–∞–Ω—Å, —â–æ –ø–æ–¥—ñ—è –≤–∑–∞–≥–∞–ª—ñ —Ç—Ä–∞–ø–∏—Ç—å—Å—è
        return None
    pool: list[ChanceEvent] = []
    for ev in CHANCE_EVENTS:
        pool += [ev] * ev[3]            # –≤–∞–≥–∏
    return random.choice(pool)

async def apply_chance_event(ev: ChanceEvent, cid: int, uid: int) -> str:
    n = random.randint(10, 60)
    field, sign = ev[2].split(":")      # "coins", "+/-"
    delta =  n if sign == "+" else -n

    if field == "coins":
        await add_money(cid, uid, delta)
    elif field == "xp":
        await add_xp(cid, uid, delta)
    elif field == "energy":
        await add_energy(cid, uid, delta)   # –Ω–æ–≤–∞ —É—Ç–∏–ª—ñ—Ç–∞

    return ev[1].format(n=abs(delta))

def get_weekend_coin_bonus() -> int:
    weekday = dt.datetime.utcnow().weekday()
    if weekday == 4: return 30
    if weekday == 5: return 40
    if weekday == 6: return 50
    return 0

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Mining Task ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def mining_task(bot:Bot, cid:int, uid:int, tier:int, ores:List[str], bonus:float):
    await asyncio.sleep(get_mine_duration(tier))
    proto_txt = ""
    prog = await get_progress(cid,uid)
    level = prog.get("level", 1)
    pick_key = prog.get("current_pickaxe")
    pick_bonus = PICKAXES.get(pick_key, {}).get("bonus", 0)

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è Tier
    tier = max([i + 1 for i, t in enumerate(TIER_TABLE) if level >= t["level_min"]], default=1)
    tier_bonus = BONUS_BY_TIER.get(tier, 1.0)

    # –ó–∞–≥–∞–ª—å–Ω–∏–π –±–æ–Ω—É—Å
    total_bonus = 1 + pick_bonus + (tier_bonus - 1)

    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—É–¥–∏
    ore_id = random.choice(ores)
    ore = ORE_ITEMS[ore_id]
    amount = random.randint(*ore["drop_range"])
    # üí° –ó–Ω–∏–∂–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏ –ø—Ä–∏ –≥–æ–ª–æ–¥—ñ < 40
    if prog.get("hunger", 100) <= 30:
        amount = int(amount * 0.5)

    amount = int(amount * total_bonus)

    xp_gain=amount
    if prog.get("cave_pass") and prog["pass_expires"]>dt.datetime.now(tz=UTC):
        xp_gain=int(xp_gain*1.5)

    await add_item(cid,uid,ore_id,amount)
    await add_xp  (cid,uid,xp_gain)
    streak=await update_streak(cid,uid)

    if prog.get("badge_active") == "recruit":
        await add_money(cid, uid, 30)

    # –ë–µ–π–¥–∂: –≤–æ–∑–≤—Ä–∞—Ç —ç–Ω–µ—Ä–≥–∏–∏
    if prog.get("badge_active") == "cashback":
        await db.execute(
            "UPDATE progress_local SET energy=LEAST(100, energy + 6) "
            "WHERE chat_id=:c AND user_id=:u",
            {"c": cid, "u": uid}
        )

    # ---- –ø—Ä–æ—á–Ω—ñ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∏—Ä–∫–∏ (JSON-–º–∞–ø–∞) ----
    broken = False
    if cur := prog.get("current_pickaxe"):
        dur, dur_max = await change_dur(cid, uid, cur, -1)
        broken = dur == 0

    # ---- –≤–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–¥—ñ—è ----
    extra_txt=""
    ev = pick_chance_event()
    if ev:
        extra_txt = "\n" + await apply_chance_event(ev, cid, uid)

    member=await bot.get_chat_member(cid,uid)
    mention = f"@{member.user.username}" if member.user.username \
              else f'<a href="tg://user?id={uid}">{member.user.full_name}</a>'
    
    await db.execute(
        "UPDATE progress_local SET mining_end=NULL "
        "WHERE chat_id=:c AND user_id=:u",
        {"c": cid, "u": uid}
    )

    if prog.get("mine_count", 0) >= 20:
        await unlock_achievement(cid, uid, "bear_miner")

    # üéØ –ü—Ä–æ—Ç–æ—Ç–∏–ø –≠–æ–Ω–∏—Ç–∞ ‚Äî —à–∞–Ω—Å –Ω–∞ –¥–≤–æ–π–Ω—É—é –∫–æ–ø–∫—É
    if pick_key == "proto_eonite_pickaxe" and random.random() < 1.0:
        ore2 = random.choice(ores)
        ore_def = ORE_ITEMS[ore2]
        amount2 = random.randint(*ore_def["drop_range"])
        
        if prog.get("hunger", 100) <= 30:
            amount2 = int(amount2 * 0.5)
        amount2 = max(1, int(amount2 * total_bonus))

        await add_item(cid, uid, ore2, amount2)
        await add_xp(cid, uid, amount2)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        proto_txt += f"\nüîÆ –ü—Ä–æ—Ç–æ—Ç–∏–ø —ç–æ–Ω–∏—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è!\n" \
                    f"–î–æ–ø. –¥–æ–±—ã—á–∞: <b>{amount2}√ó{ore_def['emoji']} {ore_def['name']}</b>"
        
    coin_bonus = get_weekend_coin_bonus()
    if coin_bonus:
        await add_money(cid, uid, coin_bonus)
        extra_txt += f"\nüí∞ –õ–∞–≤–∏–Ω–∞ –º–æ–Ω–µ—Ç! +{coin_bonus} –º–æ–Ω–µ—Ç"

    GOOD_PICKAXES = {"gold_pickaxe", "amethyst_pickaxe", "diamond_pickaxe", "crystal_pickaxe", "proto_eonite_pickaxe", "greater_eonite_pickaxe"}
    if pick_key in GOOD_PICKAXES:
        if random.random() < 0.125:
            eonite_qty = random.randint(1, 2)
            await add_item(cid, uid, "eonite_shard", eonite_qty)
            extra_txt += f"\nüßø <b>–¢—ã –Ω–∞—à—ë–ª {eonite_qty}√ó –≠–æ–Ω–∏—Ç–æ–≤—ã—Ö –æ—Å–∫–æ–ª–∫–æ–≤!</b>"

        if random.random() < 0.01:  # 1% —à–∞–Ω—Å
            await add_item(cid, uid, "eonite_ore", 1)
            extra_txt += "\nüåë <b>–¢—ã –≤—ã–¥–æ–ª–±–∏–ª —Å–∞–º—É —Ä—É–¥—É –≠–æ–Ω–∏—Ç–∞! –ß—Ç–æ –∑–∞ —É–¥–∞—á–∞‚Ä¶</b>"

    if "eonite_shard" in [ore_id, ore2] or "eonite_ore" in [ore_id, ore2]:
        await unlock_achievement(cid, uid, "eonite_pioneer")

    txt=(f"üèîÔ∏è {mention}, —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å!\n"
         f"<b>{amount}√ó{ore['emoji']} {ore['name']}</b> –≤ –º–µ—à–∫–µ\n"
         f"XP +<b>{xp_gain}</b> | Streak {streak} –¥–Ω.‚ÄÇ|‚ÄÇTier √ó{bonus:.1f}\n"
         f"–ë–æ–Ω—É—Å –∫–∏—Ä–∫–∏ +<b>{int(pick_bonus*100)} %</b>"
         + ("\n‚ö†Ô∏è –ö–∏—Ä–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å! /repair" if broken else "")
         + (extra_txt)
         + proto_txt)

    await bot.send_message(cid,txt,parse_mode="HTML")
    logging.info("Mining result sent: chat=%s uid=%s", cid, uid)
    
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Smelt Task ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def smelt_timer(bot:Bot,cid:int,uid:int,rec:dict,cnt:int,torch_mult:float):
    await asyncio.sleep(get_smelt_duration(cnt,torch_mult))
    await add_item(cid,uid,rec["out_key"],cnt)
    await db.execute("UPDATE progress_local SET smelt_end=NULL WHERE chat_id=:c AND user_id=:u",
                     {"c":cid,"u":uid})
    member = await bot.get_chat_member(cid, uid)
    nick = member.user.full_name
    await bot.send_message(cid,f"üî• {nick}! –ü–µ—Ä–µ–ø–ª–∞–≤–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞: {cnt}√ó{rec['out_name']}", parse_mode="HTML")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(CommandStart())
async def start_cmd(message: types.Message):
    await create_user(message.from_user.id, message.from_user.username or message.from_user.full_name)
    msg = await message.answer_photo(
        START_IMG_ID,
        caption="–ü—Ä–∏–≤–µ—Ç, –±—É–¥—É—â–∏–π —à–∞—Ö—Ç—ë—Ä! ‚õèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π /mine, —á—Ç–æ–±—ã –∫–æ–ø–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã!",
    )
    register_msg_for_autodelete(message.chat.id, msg.message_id)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /profile ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("profile"))
async def profile_cmd(message: types.Message):
    cid, uid = await cid_uid(message)
    # ensure user exists
    await create_user(message.from_user.id, message.from_user.username or message.from_user.full_name)

    # –æ–±—á–∏—Å–ª—é—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é —Ç–∞ –≥–æ–ª–æ–¥
    energy = await update_energy(cid, uid)
    hunger = await update_hunger(cid, uid)

    prog    = await get_progress(cid, uid)
    lvl     = prog.get("level", 1)
    xp      = prog.get("xp", 0)
    next_xp = lvl * 80
    streaks = prog.get("streak", 0)
    badge = prog.get("badge_active")
    badge_str = "‚Äì"
    if badge:
        b = BADGES.get(badge)
        if b:
            badge_str = f"{b['emoji']} {b['name']}"

    tier = max([i + 1 for i, t in enumerate(TIER_TABLE) if lvl >= t["level_min"]], default=1)
    tier_bonus = BONUS_BY_TIER.get(tier, 1.0)
    tier_str = f"üî∑ Tier {tier} (–±–æ–Ω—É—Å √ó{tier_bonus:.1f})"

    mine_end = prog.get("mining_end")
    if isinstance(mine_end, dt.datetime):
        remaining = mine_end.astimezone(UTC) - dt.datetime.now(tz=UTC)
        if remaining.total_seconds() > 0:
            minutes = max(1, int(remaining.total_seconds() // 60))
            status = f"üï≥Ô∏è –ö–æ–ø–∞–µ—Ç (–µ—â—ë {minutes} –º–∏–Ω.)"
        else:
            status = "üõå –û—Ç–¥—ã—Ö–∞–µ—Ç"
    else:
        status = "üõå –û—Ç–¥—ã—Ö–∞–µ—Ç"


    # –ö–∏—Ä–∫–∞ —Ç–∞ —ó—ó –º—ñ—Ü–Ω—ñ—Å—Ç—å
    current         = prog.get("current_pickaxe") or "wooden_pickaxe"
    if current == "wood_pickaxe":
        current = "wooden_pickaxe"
    dur_map         = _json2dict(prog.get("pick_dur_map"))
    dur_max_map     = _json2dict(prog.get("pick_dur_max_map"))
    pick = PICKAXES.get(current, {"name":"‚Äì"})
    pick_name       = pick["name"]
    dur             = dur_map.get(current,      PICKAXES[current]["dur"])
    dur_max         = dur_max_map.get(current,  PICKAXES[current]["dur"])

    # Pass
    has_pass    = prog.get("cave_pass", False)
    expires     = prog.get("pass_expires")
    cave_cases  = prog.get("cave_cases", 0)
    if has_pass and expires:
        pass_str = expires.strftime("%d.%m.%Y")
    else:
        pass_str = "–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

    balance = await get_money(cid, uid)

    builder = InlineKeyboardBuilder()
    builder.button(text="üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data=f"profile:inventory:{uid}")
    builder.button(text="üõí –ú–∞–≥–∞–∑–∏–Ω",    callback_data=f"profile:shop:{uid}")
    builder.button(text="‚õèÔ∏è –®–∞—Ö—Ç–∞",      callback_data=f"profile:mine:{uid}")
    builder.button(text="üíé Cave Pass",      callback_data=f"profile:cavepass:{uid}")
    builder.button(text="üèÜ –ê—á–∏–≤–∫–∏", callback_data=f"profile:achievements:{uid}")
    builder.button(text="üèÖ –ë–µ–π–¥–∂–∏", callback_data=f"profile:badges:{uid}")
    builder.adjust(1)

    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b> {message.from_user.full_name}\n"
        f"‚≠ê <b>–£—Ä–æ–≤–µ–Ω—å:</b> {lvl} (XP {xp}/{next_xp})\n"
        f"{tier_str}\n"
        f"üî• <b>–°–µ—Ä–∏—è:</b> {streaks}\n" 
        f"üíé <b>Cave Pass:</b> {pass_str}\n\n"
        f"{status}\n"
        f"üîã <b>–≠–Ω–µ—Ä–≥–∏—è:</b> {energy}/100\n"
        f"üçó <b>–ì–æ–ª–æ–¥:</b> {hunger}/100\n\n"
        f"üì¶ <b>Cave Cases:</b> {cave_cases}\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} –º–æ–Ω–µ—Ç\n\n"
        f"üèÖ <b>–ë–µ–π–¥–∂:</b> {badge_str}\n"
        f"‚õèÔ∏è <b>–ö–∏—Ä–∫–∞:</b> {pick_name} ({dur}/{dur_max})"
    )

    inventory = await get_inventory(cid, uid)
    for row in inventory:
        if row["item"] == "legacy_pickaxe":
            legacy = ITEM_DEFS.get("legacy_pickaxe", {"name": "–ü–∞–º—è—Ç–Ω–∞—è –∫–∏—Ä–∫–∞"})
            text += f"\n\nüèõÔ∏è <b>–ü–∞–º—è—Ç–∫–∞:</b> {legacy['name']}"
            break

    msg = await message.answer_photo(
        photo=PROFILE_IMG_ID,
        caption=text,
        parse_mode="HTML",
        reply_to_message_id=message.message_id,
        reply_markup=builder.as_markup()
    )
    register_msg_for_autodelete(message.chat.id, msg.message_id)
    # await message.reply(text, parse_mode="HTML", reply_markup=builder.as_markup())

# Profile Callback
@router.callback_query(F.data.startswith("profile:"))
async def profile_callback(callback: types.CallbackQuery):
    data = callback.data.split(":")
    # format: ['profile', action, original_uid]
    if len(data) != 3:
        return await callback.answer()
    _, action, orig_uid = data
    orig_uid = int(orig_uid)
    # —Ç—ñ–ª—å–∫–∏ –∞–≤—Ç–æ—Ä –º–æ–∂–µ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏
    if callback.from_user.id != orig_uid:
        return await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è", show_alert=True)
    await callback.answer()

    # –ø–µ—Ä–µ–¥–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥—ñ
    if action == "inventory":
        await inventory_cmd(callback.message, user_id=orig_uid)
    elif action == "shop":
        await shop_cmd(callback.message)
    elif action == "mine":
        await mine_cmd(callback.message, user_id=orig_uid)
    elif action == "cavepass":
        await trackpass_cmd(callback.message)
    elif action == "achievements":
        await achievements_menu(callback.message, orig_uid)
    elif action == "badges":
        await badges_menu(callback.message, orig_uid)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /mine ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ(F.data.startswith("profile:"))
async def profile_callback(cb: types.CallbackQuery):
    await cb.answer()
    act = cb.data.split(":", 1)[1]
    if act == "inventory":
        await inventory_cmd(cb.message, cb.from_user.id)
    elif act == "shop":
        await shop_cmd(cb.message, cb.from_user.id)
    elif act == "mine":
        await mine_cmd(cb.message, cb.from_user.id)
    elif act == "cavepass":
        await trackpass_cmd(cb.message)
    elif act == "achievements":
        await achievements_menu(cb.message, cb.from_user.id)
    elif act == "badges":
        await badges_menu(cb.message, cb.from_user.id)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /mine ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("mine"))
async def mine_cmd(message: types.Message, user_id: int | None = None):
    cid, uid = await cid_uid(message)
    if user_id:
        uid = user_id
    user = await get_user(uid)
    if not user:
        return await message.reply("–°–ø–µ—Ä–≤–∞ /start")

    energy = await update_energy(cid, uid)
    hunger = await update_hunger(cid, uid)
    if energy <= 15:
        return await message.reply(f"üò¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ {energy} (15 - –º–∏–Ω–∏–º—É–º). –û—Ç–¥–æ—Ö–Ω–∏.")
    if hunger <= 0:
        money = await get_money(cid, uid)
        if money <= 0:
        # –ê–≤–∞—Ä—ñ–π–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞
            await add_item(cid, uid, "bread", 2)
            await add_item(cid, uid, "meat", 1)
            await add_money(cid, uid, 100)

            return await message.reply(
                "ü•ñ –¢—ã —Å–ª–∏—à–∫–æ–º –≥–æ–ª–æ–¥–µ–Ω –∏ —É —Ç–µ–±—è –Ω–µ—Ç –¥–µ–Ω–µ–≥... \n"
                "ü§ù –í—ã–¥–∞–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π –ø–∞—ë–∫: —Ö–ª–µ–± √ó2, –º—è—Å–æ √ó1 –∏ 100 –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä—å /eat –∏ –≤ –±–æ–π!"
            )
        else:
            return await message.reply(
                f"üçΩÔ∏è –¢—ã —Å–ª–∏—à–∫–æ–º –≥–æ–ª–æ–¥–µ–Ω {hunger}, —Å–ø–µ—Ä–≤–∞ /eat!"
            )
    prog = await get_progress(cid, uid)

    raw_map = prog.get("pick_dur_map") or "{}"
    try:
        dur_map = json.loads(raw_map) if isinstance(raw_map, str) else raw_map
    except ValueError:
        dur_map = {}

    cur_pick = prog.get("current_pickaxe")
    if cur_pick and dur_map.get(cur_pick, 0) == 0:
            return await message.reply("‚ö†Ô∏è –ö–∏—Ä–∫–∞ —Å–ª–æ–º–∞–Ω–∞! /repair")
    if prog["mining_end"] and prog["mining_end"] > dt.datetime.now(tz=UTC):
        delta = prog["mining_end"] - dt.datetime.now(tz=UTC)
        left = max(1, round(delta.total_seconds() / 60))
        txt = f"‚õèÔ∏è –¢—ã –µ—â—ë –≤ —à–∞—Ö—Ç–µ, –æ—Å—Ç–∞–ª–æ—Å—å {left} –º–∏–Ω."
        if hunger == 0:
            txt += "\nüçΩÔ∏è –¢—ã –≥–æ–ª–æ–¥–µ–Ω –∏ –Ω–µ —Å–º–æ–∂–µ—à—å –∫–æ–ø–∞—Ç—å —Å–Ω–æ–≤–∞ –±–µ–∑ –µ–¥—ã!"
        elif hunger <= 30:
            txt += "\n‚ö†Ô∏è –¢—ã —É—Å—Ç–∞–ª. –°–ª–µ–¥—É—é—â–∞—è –∫–æ–ø–∫–∞ –ø—Ä–∏–Ω–µ—Å—ë—Ç –≤–¥–≤–æ–µ –º–µ–Ω—å—à–µ —Ä—É–¥—ã."
        return await message.reply(txt)
        
    tier = get_tier(prog["level"])
    bonus_tier = BONUS_BY_TIER[tier]
    ores = TIER_TABLE[tier - 1]["ores"]

    # —Å–ø–∏—Å—É—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é/–≥–æ–ª–æ–¥ + —Å—Ç–∞–≤–∏–º–æ —Ç–∞–π–º–µ—Ä
    await db.execute(
        """UPDATE progress_local
               SET energy = GREATEST(0, energy - 12),
                   hunger = GREATEST(0, hunger - :hc),
                   mining_end = :end
             WHERE chat_id=:c AND user_id=:u""",
        {
            "hc": HUNGER_COST,
            "end": dt.datetime.utcnow() + dt.timedelta(seconds=get_mine_duration(tier)),
            "c": cid,
            "u": uid,
        },
    )
    # üî¢ +1 –¥–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –∫–æ–ø–∞–Ω—å
    await db.execute(
        "UPDATE progress_local SET mine_count = COALESCE(mine_count, 0) + 1 WHERE chat_id=:c AND user_id=:u",
        {"c": cid, "u": uid}
    )
    sec      = get_mine_duration(tier)
    minutes  = max(1, round(sec / 60))
    msg = await message.reply(f"‚õèÔ∏è –¢—ã —Å–ø—É—Å–∫–∞–µ—à—å—Å—è –≤ —à–∞—Ö—Ç—É –Ω–∞ <b>{minutes}</b> –º–∏–Ω.\nüîã –≠–Ω–µ—Ä–≥–∏—è ‚àí12 / –ì–æ–ª–æ–¥ ‚àí10. –£–¥–∞—á–∏!")
    register_msg_for_autodelete(message.chat.id, msg.message_id)
    asyncio.create_task(mining_task(message.bot, cid, uid, tier, ores, bonus_tier))

@router.callback_query(F.data.startswith("badge:use:"))
async def badge_use_cb(cb: types.CallbackQuery):
    _, _, badge_id = cb.data.split(":")
    cid, uid = cb.message.chat.id, cb.from_user.id
    prog = await get_progress(cid, uid)
    if badge_id not in (prog.get("badges_owned") or []):
        return await cb.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–µ–π–¥–∂–∞ üòï", show_alert=True)

    await db.execute("""
        UPDATE progress_local SET badge_active=:b
         WHERE chat_id=:c AND user_id=:u
    """, {"b": badge_id, "c": cid, "u": uid})

    await cb.answer("‚úÖ –ë–µ–π–¥–∂ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    await badges_menu(cb.message, uid)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /inventory ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("inventory"))
async def inventory_cmd(message: types.Message, user_id: int | None = None):
    cid, uid = await cid_uid(message)
    if user_id:
        uid = user_id
    inv = await get_inventory(cid, uid)
    balance = await get_money(cid, uid)
    progress = await get_progress(cid, uid)
    current_pick = progress.get("current_pickaxe")

    # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categories = {
        "ores": [],
        "ingots": [],
        "pickaxes": [],
        "food": [],
        "torch": [],
        "misc": []
    }

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ item_key
    def get_category(item_key):
        if item_key.endswith("_ingot") or item_key == "roundstone":
            return "ingots"
        elif item_key.endswith("_pickaxe"):
            return "pickaxes"
        elif item_key in ("meat", "bread", "coffee", "borsch", "energy_drink"):
            return "food"
        elif item_key in ("torch", "torch_bundle", "lapis_torch"):
            return "torch"
        elif item_key in ORE_ITEMS:
            return "ores"
        return "misc"

    # –†–æ–∑–∫–∏–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    for row in inv:
        if row["item"] == current_pick:
            continue
        meta = ITEM_DEFS.get(row["item"], {"name": row["item"], "emoji": "‚ùî"})
        cat = get_category(row["item"])
        categories[cat].append((meta, row["qty"]))

    lines = [f"üßæ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç", ""]

    if categories["ores"]:
        lines.append("<b>‚õèÔ∏è –†—É–¥—ã:</b>")
        for meta, qty in categories["ores"]:
            lines.append(f"{meta['emoji']} {meta['name']}: {qty}")
    if categories["pickaxes"]:
        lines.append("\n<b>ü™ì –ö–∏—Ä–∫–∏:</b>")
        for meta, qty in categories["pickaxes"]:
            lines.append(f"{meta['emoji']} {meta['name']}: {qty}")
    if categories["ingots"]:
        lines.append("\n<b>üî• –°–ª–∏—Ç–∫–∏:</b>")
        for meta, qty in categories["ingots"]:
            lines.append(f"{meta['emoji']} {meta['name']}: {qty}")
    if categories["food"]:
        lines.append("\n<b>üçñ –ï–¥–∞:</b>")
        for meta, qty in categories["food"]:
            lines.append(f"{meta['emoji']} {meta['name']}: {qty}")
    if categories["torch"]:
        lines.append("\n<b>üïØÔ∏è –§–∞–∫–µ–ª—ã:</b>")
        for meta, qty in categories["torch"]:
            lines.append(f"{meta['emoji']} {meta['name']}: {qty}")
    if categories["misc"]:
        lines.append("\n<b>üéí –ü—Ä–æ—á–µ–µ:</b>")
        for meta, qty in categories["misc"]:
            lines.append(f"{meta['emoji']} {meta['name']}: {qty}")

    msg = await message.answer_photo(
        INV_IMG_ID,
        caption="\n".join(lines),
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )
    register_msg_for_autodelete(cid, msg.message_id)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /sell (–ª–æ–∫–∞–ª—å–Ω–∏–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ALIASES = {k: k for k in ITEM_DEFS}
ALIASES.update({
    "–∫–∞–º–µ–Ω—å": "stone",
    "—É–≥–æ–ª—å": "coal",
    "–∂–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞": "iron",
    "–∂–µ–ª–µ–∑–æ": "iron",
    "–∑–æ–ª–æ—Ç–æ": "gold",
    "–∞–º–µ—Ç–∏—Å—Ç": "amethyst",
    "–∞–ª–º–∞–∑": "diamond",
    "–∏–∑—É–º—Ä—É–¥": "emerald",
    "–ª–∞–∑—É—Ä–∏—Ç": "lapis",
    "—Ä—É–±–∏–Ω": "ruby",
    "–±—É–ª—ã–∂–Ω–∏–∫": "roundstone",
    "–∂–µ–ª–µ–∑–Ω—ã–π —Å–ª–∏—Ç–æ–∫": "iron_ingot",
    "–∑–æ–ª–æ—Ç–æ–π —Å–ª–∏—Ç–æ–∫": "gold_ingot",
    "–∞–º–µ—Ç–∏—Å—Ç–æ–≤—ã–π —Å–ª–∏—Ç–æ–∫": "amethyst_ingot",
})

@router.message(Command("sell"))
async def sell_start(message: types.Message):
    cid, uid = await cid_uid(message)
    inv_raw = await get_inventory(cid, uid)
    inv = {r["item"]: r["qty"] for r in inv_raw if r["qty"] > 0}

    items = [
        (k, v) for k, v in inv.items()
        if k in ITEM_DEFS and "price" in ITEM_DEFS[k]
    ]

    if not items:
        return await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É üòÖ")

    builder = InlineKeyboardBuilder()
    for k, qty in items:
        emoji = ITEM_DEFS[k].get("emoji", "")
        name = ITEM_DEFS[k]["name"]
        builder.button(text=f"{emoji} {name} ({qty})", callback_data=f"sell_choose:{k}")

    msg = await message.answer(
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å?",
        reply_markup=builder.adjust(2).as_markup()
    )
    register_msg_for_autodelete(cid, msg.message_id)

@router.callback_query(F.data.startswith("sell_choose:"))
async def choose_amount(call: types.CallbackQuery):
    cid, uid = call.message.chat.id, call.from_user.id
    item_key = call.data.split(":")[1]
    inv = {r["item"]: r["qty"] for r in await get_inventory(cid, uid)}
    qty = inv.get(item_key, 0)
    if qty <= 0:
        return await call.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")

    builder = InlineKeyboardBuilder()
    for amount in [1, 5, 10, qty]:
        if amount > qty:
            continue
        builder.button(
            text=f"–ü—Ä–æ–¥–∞—Ç—å {amount}√ó",
            callback_data=f"sell_confirm:{item_key}:{amount}"
        )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sell_cancel")

    meta = ITEM_DEFS[item_key]
    msg = await call.message.edit_text(
        f"{meta.get('emoji','')} {meta['name']}\n–°–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å?",
        reply_markup=builder.adjust(2).as_markup()
    )

@router.callback_query(F.data.startswith("sell_confirm:"))
async def confirm_sell(call: types.CallbackQuery):
    cid, uid = call.message.chat.id, call.from_user.id
    _, item_key, qty_str = call.data.split(":")
    qty = int(qty_str)
    inv = {r["item"]: r["qty"] for r in await get_inventory(cid, uid)}
    if inv.get(item_key, 0) < qty:
        return await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤!")

    price = ITEM_DEFS[item_key]["price"]
    earned = price * qty
    await add_item(cid, uid, item_key, -qty)
    await add_money(cid, uid, earned)

    meta = ITEM_DEFS[item_key]
    await call.message.edit_text(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {qty}√ó{meta['emoji']} {meta['name']} –∑–∞ {earned} –º–æ–Ω–µ—Ç üí∞")
    register_msg_for_autodelete(cid, call.message.message_id)

@router.callback_query(F.data == "sell_cancel")
async def cancel_sell(call: types.CallbackQuery):
    await call.message.edit_text("–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /smelt (async) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("smelt"))
async def smelt_cmd(message: types.Message):
    cid, uid = await cid_uid(message)

    try:
        _, args = message.text.split(maxsplit=1)
        ore_part, qty_str = args.rsplit(maxsplit=1)
    except ValueError:
        return await message.reply("–ö–∞–∫ –ø–µ—Ä–µ–ø–ª–∞–≤–∏—Ç—å: /smelt '—Ä—É–¥–∞' '–∫–æ–ª-–≤–æ'")

    if not qty_str.isdigit():
        return await message.reply("–ö–æ–ª-–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    qty = int(qty_str)

    ore_key = SMELT_INPUT_MAP.get(ore_part.lower().strip())
    if not ore_key:
        return await message.reply("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π —Ä—É–¥—ã üôÅ")

    recipe = SMELT_RECIPES[ore_key]
    need_for_one = recipe["in_qty"]
    inv = {r["item"]: r["qty"] for r in await get_inventory(cid, uid)}
    have_ore = inv.get(ore_key, 0)

    # –Ø–∫—â–æ –Ω–µ–º–∞ ‚Äî –≤–∏–≤–æ–¥–∏–º–æ
    if have_ore < qty:
        name = ITEM_DEFS.get(ore_key, {}).get("name", ore_key)
        emoji = ITEM_DEFS.get(ore_key, {}).get("emoji", "‚õèÔ∏è")
        return await message.reply(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä—É–¥—ã: {emoji} {name} √ó{qty - have_ore}")

    cnt = qty // need_for_one
    if cnt < 1:
        return await message.reply(f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {need_for_one}√ó –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–∏—Ç–∫–∞")

    # –°–ø–∏—Å—É—î–º–æ
    used = cnt * need_for_one
    await add_item(cid, uid, ore_key, -used)

    torch_mult = 1.0
    torch_msg = ""
    if inv.get("torch_bundle", 0) > 0:
        torch_mult = TORCH_SPEEDUP
        await add_item(cid, uid, "torch_bundle", -1)
        torch_msg = "üïØÔ∏è –§–∞–∫–µ–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ‚Äî –ø–ª–∞–≤–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∞ –Ω–∞ 30%!\n"

    duration = get_smelt_duration(cnt, torch_mult)
    await db.execute(
        "UPDATE progress_local SET smelt_end = :e "
        "WHERE chat_id = :c AND user_id = :u",
        {"e": dt.datetime.utcnow() + dt.timedelta(seconds=duration),
         "c": cid, "u": uid}
    )
    asyncio.create_task(smelt_timer(message.bot, cid, uid, recipe, cnt, torch_mult))

    minutes = max(1, round(duration / 60))
    msg = await message.reply(
        f"{torch_msg}üî• –ó–∞–±—Ä–∞—Å—ã–≤–∞–µ–º {cnt} —Ä—É–¥—ã –≤ –ø–µ—á—å.\n"
        f"(‚è≤Ô∏è –ß–µ—Ä–µ–∑ <b>{minutes}</b> –º–∏–Ω—É—Ç –ø–æ–ª—É—á–∏–º {recipe['out_name']}√ó{cnt}.)"
    )
    register_msg_for_autodelete(message.chat.id, msg.message_id)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /craft ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("craft"))
async def craft_cmd(message: types.Message):
    cid, uid = await cid_uid(message)
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.reply("/craft '–Ω–∞–∑–≤–∞–Ω–∏–µ'")
    craft_name = parts[1].lower().strip()
    recipe = CRAFT_RECIPES.get(craft_name)
    if not recipe:
        return await message.reply("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    inv = {r["item"]: r["qty"] for r in await get_inventory(cid, uid)}

    # –ü–æ—à—É–∫ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö
    missing = {}
    for k, need in recipe["in"].items():
        have = inv.get(k, 0)
        if have < need:
            missing[k] = need - have

    if missing:
        text = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤:\n"
        for key, qty in missing.items():
            emoji = ITEM_DEFS.get(key, {}).get("emoji", "‚ùì")
            name  = ITEM_DEFS.get(key, {}).get("name", key)
            text += f"‚Ä¢ {emoji} {name} √ó{qty}\n"
        return await message.reply(text.strip())

    # –í—Å–µ —î ‚Äî —Å–ø–∏—Å—É—î–º–æ
    for k, need in recipe["in"].items():
        await add_item(cid, uid, k, -need)
    await add_item(cid, uid, recipe["out_key"], 1)
    if recipe["out_key"] == "roundstone_pickaxe":
        await unlock_achievement(cid, uid, "cobble_player")
    msg = await message.reply(f"üéâ –°–æ–∑–¥–∞–Ω–æ: {recipe['out_name']}!")
    register_msg_for_autodelete(message.chat.id, msg.message_id)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /stats ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("stats"))
async def stats_cmd(message: types.Message):
    cid, uid = await cid_uid(message)
    builder = InlineKeyboardBuilder()
    builder.button(text="üèÜ –¢–æ–ø –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º", callback_data="stats:balance")
    builder.button(text="üéñÔ∏è –¢–æ–ø –∑–∞ —É—Ä–æ–≤–Ω–µ–º", callback_data="stats:level")
    builder.button(text="üìä –¢–æ–ø –∑–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏", callback_data="stats:resources")
    builder.adjust(1)
    msg = await message.answer_photo(
        STATS_IMG_ID,
        caption="üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    register_msg_for_autodelete(message.chat.id, msg.message_id)

@router.callback_query(F.data.startswith("stats:"))
async def stats_callback(callback: CallbackQuery):
    await callback.answer()
    cid, _ = await cid_uid(callback.message)
    typ = callback.data.split(":", 1)[1]
    lines: list[str] = []

    if typ == "balance":
        rows = await db.fetch_all(
            "SELECT user_id, coins FROM balance_local "
            "WHERE chat_id=:c ORDER BY coins DESC LIMIT 10",
            {"c": cid}
        )
        for i, r in enumerate(rows, start=1):
            uid = r["user_id"]
            coins = r["coins"]
            member = await callback.bot.get_chat_member(cid, uid)
            user = member.user
            if user.username:
                mention = f"{user.username}"
            else:
                mention = f'<a href="tg://user?id={uid}">{user.full_name}</a>'
            lines.append(f"{i}. {mention} ‚Äî {coins} –º–æ–Ω–µ—Ç")

    elif typ == "level":
        rows = await db.fetch_all(
            "SELECT user_id, level, xp FROM progress_local "
            "WHERE chat_id=:c ORDER BY level DESC, xp DESC LIMIT 10",
            {"c": cid}
        )
        for i, r in enumerate(rows, start=1):
            uid = r["user_id"]
            lvl = r["level"]
            xp = r["xp"]
            member = await callback.bot.get_chat_member(cid, uid)
            user = member.user
            if user.username:
                mention = f"{user.username}"
            else:
                mention = f'<a href="tg://user?id={uid}">{user.full_name}</a>'
            lines.append(f"{i}. {mention} ‚Äî —É—Ä–æ–≤–µ–Ω—å {lvl} (XP {xp})")

    elif typ == "resources":
        rows = await db.fetch_all(
            "SELECT user_id, SUM(qty) AS total FROM inventory_local "
            "WHERE chat_id=:c GROUP BY user_id ORDER BY total DESC LIMIT 10",
            {"c": cid}
        )
        for i, r in enumerate(rows, start=1):
            uid = r["user_id"]
            total = r["total"]
            member = await callback.bot.get_chat_member(cid, uid)
            user = member.user
            if user.username:
                mention = f"{user.username}"
            else:
                mention = f'<a href="tg://user?id={uid}">{user.full_name}</a>'

            lines.append(f"{i}. {mention} ‚Äî {total} —Ä–µ—Å—É—Ä—Å–æ–≤")

    else:
        return

    text = "\n".join(lines) if lines else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    msg = await callback.message.answer_photo(
        STATS_IMG_ID,
        caption=text,
        parse_mode="HTML"
    )
    register_msg_for_autodelete(callback.message.chat.id, msg.message_id)

@router.message(Command("repair"))
async def repair_cmd(message: types.Message):
    cid, uid = await cid_uid(message)
    prog = await get_progress(cid, uid)

    pick_key = prog.get("current_pickaxe")
    if not pick_key:
        return await message.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∏—Ä–∫–∏.")

    dur_map = _jsonb_to_dict(prog.get("pick_dur_map"))
    dur_max_map = _jsonb_to_dict(prog.get("pick_dur_max_map"))

    dur = dur_map.get(pick_key, 0)
    dur_max = dur_max_map.get(pick_key, PICKAXES[pick_key]["dur"])
    pick_data = PICKAXES[pick_key]

    if dur >= dur_max:
        return await message.reply("üõ†Ô∏è –ö–∏—Ä–∫–∞ –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")

    # ‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏
    if dur >= 30:
        return await message.reply("üõë –†–µ–º–æ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–µ 30.")

    # üíé –•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è –∫–∏—Ä–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç
    crystal_repaired = prog.get("crystal_repaired", False)

    if pick_key == "crystal_pickaxe":
        if crystal_repaired:
            return await message.reply("üíé –•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è –∫–∏—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º —Ö—Ä—É–ø–∫–∞—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞.")
        restore = dur_max // 2
        cost = restore * 3  # –¥–æ—Ä–æ–∂–µ —Ä–µ–º–æ–Ω—Ç
        if await get_money(cid, uid) < cost:
            return await message.reply(f"üíé‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞.\n–ù—É–∂–Ω–æ {cost} –º–æ–Ω–µ—Ç")
        await add_money(cid, uid, -cost)
        await change_dur(cid, uid, pick_key, restore)
        await db.execute(
            "UPDATE progress_local SET crystal_repaired=TRUE WHERE chat_id=:c AND user_id=:u",
            {"c": cid, "u": uid}
        )
        await db.execute(
            "UPDATE progress_local SET repair_count = COALESCE(repair_count, 0) + 1 WHERE chat_id=:c AND user_id=:u",
            {"c": cid, "u": uid}
        )
        return await message.reply(
            f"üíé {pick_data['name']} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {restore}/{dur_max} –∑–∞ {cost} –º–æ–Ω–µ—Ç!"
        )

    # üß∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–º–æ–Ω—Ç
    cost = (dur_max - dur) * 2
    if await get_money(cid, uid) < cost:
        return await message.reply(f"üõ†Ô∏è‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞.\n–ù—É–∂–Ω–æ {cost} –º–æ–Ω–µ—Ç")
    await add_money(cid, uid, -cost)
    await change_dur(cid, uid, pick_key, dur_max - dur)

        # üîß +1 –¥–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Ä–µ–º–æ–Ω—Ç—ñ–≤
    await db.execute(
        "UPDATE progress_local SET repair_count = COALESCE(repair_count, 0) + 1 WHERE chat_id=:c AND user_id=:u",
        {"c": cid, "u": uid}
    )
    if prog.get("repair_count", 0) >= 10:
        await unlock_achievement(cid, uid, "repair_master")
    return await message.reply(
        f"üõ†Ô∏è {pick_data['name']} –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {dur_max}/{dur_max} –∑–∞ {cost} –º–æ–Ω–µ—Ç!"
    )


TELEGRAPH_LINK = "https://telegra.ph/Cave-Miner---Info-06-17" 

# /about
@router.message(Command("about"))
async def about_cmd(message: types.Message):
    text = link("üîç –û –ë–û–¢–ï ‚¨© –†–£–ö–û–í–û–î–°–¢–í–û ‚¨© –ö–û–ú–ê–ù–î–´", TELEGRAPH_LINK)
    msg = await message.answer_photo(
        ABOUT_IMG_ID,
        caption=text, 
        parse_mode="HTML"
    )
    register_msg_for_autodelete(message.chat.id, msg.message_id)

# /report <bug text>
@router.message(Command("report"))
async def report_cmd(message: types.Message):
    cid, uid = await cid_uid(message)
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        return await message.reply("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /report '–æ–ø–∏—Å–∞–Ω–∏–µ'")

    bug_text = args[1]
    report_line = f"üêû –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} ({uid}):\n{bug_text}"

    # –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—ñ
    ADMIN_ID = 700929765 
    try:
        msg = await message.bot.send_message(ADMIN_ID, report_line)
    except:
        pass

    msg = await message.reply("‚úÖ –°–ø–∞—Å–∏–±–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ!")

    register_msg_for_autodelete(message.chat.id, msg.message_id)

@router.message(Command("autodelete"))
async def autodelete_cmd(message: types.Message, bot: Bot):
    cid, uid = await cid_uid(message)
    parts = message.text.strip().split()

    if message.chat.type in ("group", "supergroup"):
        member = await bot.get_chat_member(cid, uid)
        if member.status not in (
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR
        ):
            return await message.reply("‚ùó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã.")
    
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.reply("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /autodelete 60 (–æ—Ç 1 –¥–æ 720 –º–∏–Ω, –∏–ª–∏ 0 —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å)")
    minutes = int(parts[1])
    if not (0 <= minutes <= 720):
        return await message.reply("‚ùó –í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 720 –º–∏–Ω—É—Ç")
    await db.execute(
        "UPDATE progress_local SET autodelete_minutes=:m WHERE chat_id=:c AND user_id=:u",
        {"m": minutes, "c": cid, "u": uid}
    )
    
    if minutes == 0:
        msg = await message.reply("üßπ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ.")
    else:
        msg = await message.reply(f"üßº –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç –±–æ—Ç –±—É–¥–µ—Ç —á–∏—Å—Ç–∏—Ç—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    register_msg_for_autodelete(message.chat.id, msg.message_id)

@router.message(Command("cavebot"))
async def cavebot_cmd(message: types.Message):
    replies = [
        "‚öôÔ∏è CaveBot v0.1 (2022) ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏... <code>[FAILED]</code>\n–ü—Ä–æ–µ–∫—Ç Unity –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–∞—Ç–∞–ª–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
        "üß† EONIT::ThreadWarning ‚Äî ‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: <b>06.08.2023</b>\n–ó–∞–≥—Ä—É–∑–∫–∞ backup...\n<code>load(cavebot-legacy)</code> ‚ûù <b>–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω</b>",
        "<b>‚ö†Ô∏è SYSTEM OVERRIDE</b>\ntrace(legacy_link):\n‚Üí UnityBuild.exe [CaveGame] = ‚ùå\n‚Üí bot_deploy.sh = ‚ùå\n‚Üí AI_CoPilot = ???\n\n<code>REBOOTING...</code>",
        "<code>[ERR] Promo 'unreleased2023'</code> ‚Üí -1 –º–æ–Ω–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–∞. –≠—Ç–æ —à—É—Ç–∫–∞... –∏–ª–∏?",
        "üîß <b>CaveBot v1.0.0-RC</b>\n<code>error: eonite_shard not initialized</code>\n‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ‚ñà –¥–Ω–µ–π\n<code>sys.msg: prepare for awaken</code>",
        "üï≥Ô∏è <i>06.08.2023 ‚Äî –¥–µ–Ω—å –º–æ–ª—á–∞–Ω–∏—è</i>\n<code>LOG BACKUP ‚Üí /failed_deploys/cavebot_beta</code>\n¬´–∏–Ω–æ–≥–¥–∞ –ª—É—á—à–µ –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è...¬ª",
        "üß¨ <b>Eonit Signal</b>: <code>01 00 11 01 10 10 01 01</code>\n<code>Legacy transmission unstable.</code>",
        "üìÄ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> cavebot-legacy ‚Üí ü™ì Legacy Pickaxe (–ø—Ä–æ—á–Ω–æ—Å—Ç—å 1)\nü™¶ <i>–ü—Ä–∞—Ö –±—ã–ª –∑–∞–ª–æ–∂–µ–Ω –≤ –∫–æ—Ä–Ω–∏ Eonit</i>",
        "‚öôÔ∏è <code>aiogram.dispatcher: Polling stopped (code: UNSTABLE)</code>\nüåÄ Cave Core –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.",
        "<b>[ALERT] CORE NULLIFIED</b>\n–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —è–¥—Ä–æ–º –≠–æ–Ω–∏—Ç–∞. –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: /null",
        "üíæ <code>~$ unity_export.sh ‚Üí permission denied</code>\nüß† ¬´–µ—Å–ª–∏ —Ç—ã —ç—Ç–æ —á–∏—Ç–∞–µ—à—å ‚Äî –∑–Ω–∞—á–∏—Ç –∫—Ç–æ-—Ç–æ –≤—ã–∂–∏–ª¬ª",
        "<code>01000101 01001111 01001110 01001001 01010100 01000101</code>"
        "üîÑ <code>fetch_update(‚ÄúEonit Awakens‚Äù)</code> ‚Üí –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –¥–æ—Å—Ç—É–ø –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ <b>Legacy Token</b>"
    ]

    await unlock_achievement(message.chat.id, message.from_user.id, "cave_bot")
    await message.reply(random.choice(replies), parse_mode="HTML")

@router.message(Command("pickaxes"))
async def pickaxes_cmd(message: types.Message):
    lines = ["<b>‚õèÔ∏è –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∏—Ä–æ–∫:</b>\n"]

    for key, data in PICKAXES.items():
        emoji = data.get("emoji", "‚õèÔ∏è")
        name = data["name"].capitalize()
        bonus = f"{int(data['bonus'] * 100)}%"
        durability = data["dur"]

        # –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–∞
        lines.append(f"{emoji} <b>{name}</b>")
        lines.append(f"‚ÄÉ‚îî üí• –ë–æ–Ω—É—Å: +{bonus}")
        lines.append(f"‚ÄÉ‚îî üß± –ü—Ä–æ—á–Ω–æ—Å—Ç—å: {durability}")

        # —è–∫—â–æ —î —Ä–µ—Ü–µ–ø—Ç
        recipe = CRAFT_RECIPES.get(key)
        if recipe:
            rec_lines = []
            for item, qty in recipe.items():
                rec_lines.append(f"{qty}√ó {item.replace('_', ' ').capitalize()}")
            lines.append("‚ÄÉ‚îî üß™ –†–µ—Ü–µ–ø—Ç: " + ", ".join(rec_lines))

        lines.append("")

    msg = await message.answer("\n".join(lines), parse_mode="HTML")
    register_msg_for_autodelete(message.chat.id, msg.message_id)

@router.message(lambda msg: re.match(r"—à–∞—Ö—Ç–∞\s+–ø—Ä–æ—Ñ–∏–ª—å", msg.text, re.IGNORECASE))
async def profile_msg_cmd(message: types.Message):
    return await profile_cmd(message)

@router.message(lambda msg: re.match(r"—à–∞—Ö—Ç–∞\s+–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", msg.text, re.IGNORECASE))
async def inventory_msg_cmd(message: types.Message):
    return await inventory_cmd(message)

@router.message(lambda msg: re.match(r"—à–∞—Ö—Ç–∞\s+–º–∞–≥–∞–∑–∏–Ω", msg.text, re.IGNORECASE))
async def shop_msg_cmd(message: types.Message):
    return await shop_cmd(message)

@router.message(lambda msg: re.match(r"—à–∞—Ö—Ç–∞\s+(–∫–æ–ø–∞—Ç—å|–∫–æ–ø–∫–∞|—à–∞—Ö—Ç–∞)", msg.text, re.IGNORECASE))
async def mine_msg_cmd(message: types.Message):
    return await mine_cmd(message)

@router.message(lambda msg: re.match(r"—à–∞—Ö—Ç–∞\s+–ø–∞—Å(—Å)?", msg.text, re.IGNORECASE))
async def pass_msg_cmd(message: types.Message):
    return await cavepass_cmd(message)

@router.message(lambda msg: re.match(r"—à–∞—Ö—Ç–∞\s+(–∫—Ä–∞—Ñ—Ç—ã|–∫–∏—Ä–∫–∏)", msg.text, re.IGNORECASE))
async def picks_msg_cmd(message: types.Message):
    return await pickaxes_cmd(message)

@router.message(lambda msg: re.match(r"—à–∞—Ö—Ç–∞\s+(–∫—É—à–∞—Ç—å|–µ—Å—Ç—å|–ø–∏—Ç—å)", msg.text, re.IGNORECASE))
async def eat_msg_cmd(message: types.Message):
    return await eat_cmd(message)

@router.message(lambda msg: re.match(r"—à–∞—Ö—Ç–∞\s+(—é–∑|–∏—Å–ø)", msg.text, re.IGNORECASE))
async def use_msg_cmd(message: types.Message):
    return await use_cmd(message)

@router.message(lambda msg: re.match(r"—à–∞—Ö—Ç–∞\s+(–ø—Ä–æ–¥–∞—Ç—å|–ø—Ä–æ–¥–∞–∂–∞|—Ç–æ—Ä–≥)", msg.text, re.IGNORECASE))
async def sell_msg_cmd(message: types.Message):
    return await sell_start(message)

@router.message(lambda msg: re.match(r"—à–∞—Ö—Ç–∞\s+(–±–µ–π–¥–∂—à–æ–ø|–±–µ–π–¥–∂–∏|–∫—É–ø–∏—Ç—å–±–µ–π–¥–∂)", msg.text, re.IGNORECASE))
async def sell_msg_cmd(message: types.Message):
    return await badgeshop_cmd(message)