from aiogram import Router, types, F
from bot.db import create_user, get_user, db, add_item, get_inventory
import time
import random

router = Router()

ORE_DROP_RANGES = {
    "ü™® –ö–∞–º—ñ–Ω—å":       (5, 10),
    "üß± –í—É–≥—ñ–ª–ª—è":      (3, 7),
    "‚õèÔ∏è –ó–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞": (2, 6),
    "ü™ô –ó–æ–ª–æ—Ç–æ":       (1, 3),
}

@router.message(F.text == "/start")
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    await create_user(user_id, username)
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç, —à–∞—Ö—Ç–∞—Ä—é! ‚õèÔ∏è –¢–∏ —â–æ–π–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è –≤ —Å–∏—Å—Ç–µ–º—ñ. –ù–∞–ø–∏—à–∏ /mine —â–æ–± –∫–æ–ø–∞—Ç–∏!"
    )

@router.message(F.text == "/mine")
async def mine_cmd(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)

    if not user:
        await message.reply("–°–ø–µ—Ä—à—É –≤–≤–µ–¥–∏ /start, —â–æ–± —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏!")
        return

    now = int(time.time())
    cooldown = 30

    # user[3] ‚Äî —Ü–µ last_mine
    if now - user["last_mine"] < cooldown:
        await message.reply(
            f"üïí –¢–∏ –≤–∂–µ –∫–æ–ø–∞–≤! –°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ {cooldown - (now - user['last_mine'])} —Å–µ–∫."
        )
        return

    loot = random.choice(list(ORE_DROP_RANGES.keys()))
    low, high = ORE_DROP_RANGES[loot]
    amount = random.randint(low, high)

    # –ö–ª–∞–¥–µ–º–æ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —ñ –æ–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å
    await add_item(user_id, loot, amount)
    await db.execute(
        "UPDATE users SET last_mine = :now WHERE user_id = :user_id",
        {"now": now, "user_id": user_id}
    )

    await message.reply(f"–¢–∏ –∑–¥–æ–±—É–≤ <b>{amount}√ó{loot}</b>! –ü–µ—Ä–µ–≤—ñ—Ä /inventory üòé", parse_mode="HTML")

@router.message(F.text == "/inventory")
async def inventory_cmd(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        return await message.reply("–°–ø–µ—Ä—à—É /start")

    inv = await get_inventory(message.from_user.id)
    lines = [f"üßæ –ë–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç", "<b>üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä:</b>"]
    for row in inv:
        lines.append(f"{row['item']}: {row['quantity']}")
    await message.reply("\n".join(lines), parse_mode="HTML")

@router.message(F.text == "/sell")
async def sell_cmd(message: types.Message):
    user_id = message.from_user.id
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.reply("–Ø–∫ –ø—Ä–æ–¥–∞—Ç–∏: /sell <—Ä—É–¥–∞> <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `/sell –ó–æ–ª–æ—Ç–æ 3`")

    item, qty_str = parts[1], parts[2]
    try:
        qty = int(qty_str)
    except ValueError:
        return await message.reply("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")

    inv = await get_inventory(user_id)
    inv_dict = {row["item"]: row["quantity"] for row in inv}
    have = inv_dict.get(item, 0)
    if have < qty:
        return await message.reply(f"–£ —Ç–µ–±–µ –ª–∏—à–µ {have} —à—Ç. {item}")

    # –¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é
    PRICE = {"ü™® –ö–∞–º—ñ–Ω—å": 2, "üß± –í—É–≥—ñ–ª–ª—è": 5, "ü™ô –ó–æ–ª–æ—Ç–æ": 20, "‚õèÔ∏è –ó–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞": 10}
    if item not in PRICE:
        return await message.reply("–¶—è —Ä—É–¥–∞ –Ω–µ —Ç–æ—Ä–≥—É—î—Ç—å—Å—è üòï")

    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —ñ –¥–æ–¥–∞—î–º–æ –±–∞–ª–∞–Ω—Å
    await db.execute(
        "UPDATE inventory SET quantity = quantity - :qty WHERE user_id = :user_id AND item = :item",
        {"qty": qty, "user_id": user_id, "item": item}
    )
    earned = PRICE[item] * qty
    await db.execute(
        "UPDATE users SET balance = balance + :earned WHERE user_id = :user_id",
        {"earned": earned, "user_id": user_id}
    )

    await message.reply(f"–ü—Ä–æ–¥–∞–Ω–æ {qty}√ó{item} –∑–∞ {earned} –º–æ–Ω–µ—Ç üí∞")

