from aiogram import Router, types, F
from bot.db import (
    create_user, get_user, db, add_item,
    get_inventory, add_xp, update_energy, update_streak
)
import time, random, asyncio

router = Router()

# –û–ø–∏—Å —Ä—É–¥
ORE_ITEMS = {
    "stone": {"name": "–ö–∞–º—ñ–Ω—å",       "emoji": "ü™®", "drop_range": (1,5), "price": 2},
    "coal":  {"name": "–í—É–≥—ñ–ª–ª—è",      "emoji": "üß±", "drop_range": (1,4), "price": 5},
    "iron":  {"name": "–ó–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞", "emoji": "‚õèÔ∏è", "drop_range": (1,3), "price": 10},
    "gold":  {"name": "–ó–æ–ª–æ—Ç–æ",       "emoji": "ü™ô", "drop_range": (1,2), "price": 20},
}

# Duration of mining
MINE_DURATION = 60 # test

async def mining_task(bot: types.Bot, user_id: int, chat_id: int):
    await asyncio.sleep(MINE_DURATION)
    user = await get_user(user_id)
    # –î—Ä–æ–ø —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    ore_id = random.choice(list(ORE_ITEMS.keys()))
    low, high = ORE_ITEMS[ore_id]["drop_range"]
    amount = random.randint(low, high)
    await add_item(user_id, ore_id, amount)
    await add_xp(user_id, amount)
    streak = await update_streak(user)
    ore = ORE_ITEMS[ore_id]
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await bot.send_message(
        chat_id,
        f"üèîÔ∏è –ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –∑ —à–∞—Ö—Ç–∏! –ó–¥–æ–±—É—Ç–æ <b>{amount}√ó{ore['emoji']} {ore['name']}</b>\n"
        f"XP +{amount}, streak: {streak}, –≤–∏—Ç—Ä–∞—á–µ–Ω–æ 1 –µ–Ω–µ—Ä–≥—ñ—é.",
        parse_mode="HTML"
    )

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
@router.message(F.text == "/start")
async def start_cmd(message: types.Message):
    await create_user(
        message.from_user.id,
        message.from_user.username or message.from_user.full_name
    )
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç, —à–∞—Ö—Ç–∞—Ä—é! ‚õèÔ∏è –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /mine, —â–æ–± –∫–æ–ø–∞—Ç–∏ —Ä–µ—Å—É—Ä—Å–∏!"
    )

@router.message(F.text == "/profile")
async def profile_cmd(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        return await message.reply("–°–ø–µ—Ä—à—É –≤–≤–µ–¥–∏ /start")
    # –û–Ω–æ–≤–ª—é—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é
    energy, _ = await update_energy(user)
    max_e = 5 + (user["level"] - 1) * 2
    lvl = user["level"]
    xp = user["xp"]
    next_xp = lvl * 100

    # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Å–Ω–æ–≤–Ω—ñ", callback_data="profile:basic")
    builder.button(text="–°–µ–∫—Ä–µ—Ç–Ω—ñ", callback_data="profile:secret")
    builder.adjust(2)

    await message.reply(
        f"üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å</b> ‚Äî –≤–∏–±–µ—Ä–∏, —â–æ –ø–æ–∫–∞–∑–∞—Ç–∏:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("profile:"))
async def profile_callback(callback: types.CallbackQuery):
    action = callback.data.split(':',1)[1]
    user = await get_user(callback.from_user.id)
    if not user:
        return await callback.message.reply("–°–ø–µ—Ä—à—É /start")

    if action == "basic":
        energy, _ = await update_energy(user)
        max_e = 5 + (user["level"] - 1) * 2
        lvl = user["level"]
        xp = user["xp"]
        next_xp = lvl * 100
        text = [
            f"üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å:</b> {callback.from_user.full_name}",
            f"‚≠ê <b>–†—ñ–≤–µ–Ω—å:</b> {lvl} (XP: {xp}/{next_xp})",
            f"üîã <b>–ï–Ω–µ—Ä–≥—ñ—è:</b> {energy}/{max_e}",
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user['balance']} –º–æ–Ω–µ—Ç"
        ]
    else:  # secret stats
        inv = await get_inventory(callback.from_user.id)
        total_items = sum(row['quantity'] for row in inv)
        distinct = len(inv)
        text = [
            f"üîç <b>–°–µ–∫—Ä–µ—Ç–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>",
            f"üóÉÔ∏è –†—ñ–∑–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤: {distinct}",
            f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Å—É—Ä—Å—ñ–≤: {total_items}",
            f"üíé –ó–∞–≥–∞–ª—å–Ω–∏–π XP: {user['xp']}"
        ]
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ —ñ –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await callback.message.edit_text(
        "\n".join(text),
        parse_mode="HTML"
    )

@router.message(F.text == "/mine")
async def mine_cmd(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        return await message.reply("–°–ø–µ—Ä—à—É /start")
    energy, _ = await update_energy(user)
    if energy < 1:
        return await message.reply("üò¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –µ–Ω–µ—Ä–≥—ñ—ó. –ó–∞—á–µ–∫–∞–π.")
    # –í—ñ–¥–Ω—ñ–º–∞—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é —Ç–∞ —Å—Ç–∞–≤–∏–º–æ next –¥–æ—Å—Ç—É–ø
    await db.execute(
        "UPDATE users SET energy = energy - 1, last_mine = :next WHERE user_id = :uid",
        {"next": int(time.time()) + MINE_DURATION, "uid": message.from_user.id}
    )
    # –°—Ç–∞—Ä—Ç –∑–∞–¥–∞—á—ñ
    asyncio.create_task(mining_task(message.bot, message.from_user.id, message.chat.id))
    return await message.reply(
        f"‚õèÔ∏è –Ü–¥—É –≤ —à–∞—Ö—Ç—É –Ω–∞ {MINE_DURATION} —Å–µ–∫. –ü–æ–≤–µ—Ä–Ω—É—Å—è —ñ–∑ —Ä–µ—Å—É—Ä—Å–∞–º–∏ —Ç–∞ XP!"
    )

@router.message(F.text == "/inventory")
async def inventory_cmd(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        return await message.reply("–°–ø–µ—Ä—à—É /start")
    inv = await get_inventory(message.from_user.id)
    lines = [f"üßæ –ë–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç", "<b>üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä:</b>"]
    for row in inv:
        ore = ORE_ITEMS[row['item']]
        lines.append(f"{ore['emoji']} {ore['name']}: {row['quantity']}")
    return await message.reply("\n".join(lines), parse_mode="HTML")

@router.message(F.text.startswith("/sell"))
async def sell_cmd(message: types.Message):
    user_id = message.from_user.id
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.reply(
            "–Ø–∫ –ø—Ä–æ–¥–∞—Ç–∏: /sell <–Ω–∞–∑–≤–∞> <–∫—ñ–ª—å–∫—ñ—Å—Ç—å>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ /sell –ó–æ–ª–æ—Ç–æ 3"
        )

    name_input = parts[1].strip()
    try:
        qty = int(parts[2].strip())
    except ValueError:
        return await message.reply("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ ore_id –∑–∞ –Ω–∞–∑–≤–æ—é (–±–µ–∑ emoji)
    ore_id = next(
        (key for key, val in ORE_ITEMS.items() if val['name'].lower() == name_input.lower()),
        None
    )
    if not ore_id:
        return await message.reply("–¢–∏ –Ω–µ –º–æ–∂–µ—à —Ç–æ—Ä–≥—É–≤–∞—Ç–∏ —Ü–∏–º —Ä–µ—Å—É—Ä—Å–æ–º üòï")

    inv = await get_inventory(user_id)
    inv_dict = {row['item']: row['quantity'] for row in inv}
    have = inv_dict.get(ore_id, 0)
    if have < qty:
        return await message.reply(f"–£ —Ç–µ–±–µ –ª–∏—à–µ {have} —à—Ç. {ORE_ITEMS[ore_id]['name']}")

    price = ORE_ITEMS[ore_id]['price']
    earned = price * qty

    # –û–Ω–æ–≤–ª—é—î–º–æ –ë–î: –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ —Ä—É–¥—É —Ç–∞ –¥–æ–¥–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
    await db.execute(
        "UPDATE inventory SET quantity = quantity - :qty WHERE user_id = :user_id AND item = :ore_id",
        {"qty": qty, "user_id": user_id, "ore_id": ore_id}
    )
    await db.execute(
        "UPDATE users SET balance = balance + :earned WHERE user_id = :user_id",
        {"earned": earned, "user_id": user_id}
    )

    emoji = ORE_ITEMS[ore_id]['emoji']
    name = ORE_ITEMS[ore_id]['name']
    await message.reply(
        f"–ü—Ä–æ–¥–∞–Ω–æ {qty}√ó{emoji} {name} –∑–∞ {earned} –º–æ–Ω–µ—Ç üí∞", parse_mode="HTML"
    )
