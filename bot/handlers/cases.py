# bot/handlers/cases.py

CASE_POOL = [
    {"key": "stone_pack",     "weight": 25},
    {"key": "coin_pack",      "weight": 30},
    {"key": "xp_boost",       "weight": 20},
    {"key": "gold_nugget",    "weight": 10},
    {"key": "food_pack",      "weight": 8},
    {"key": "exclusive_pack", "weight": 4},
    {"key": "repair_pack",    "weight": 2},
    {"key": "rich_pack",      "weight": 1},
]

import random, json
from aiogram import Router, types
from aiogram.filters import Command
from typing import List, Dict
from bot.db_local import cid_uid, db, add_item, add_money, add_xp, get_progress
from bot.handlers.items import ITEM_DEFS

router = Router()
ADMINS = {700929765, 988127866}

async def pick_case_reward() -> dict:
    rows = await db.fetch_all("SELECT reward_key, reward_type, reward_data FROM case_rewards")
    pool = []
    for r in rows:
        w = next(p['weight'] for p in CASE_POOL if p['key'] == r['reward_key'])
        pool += [r] * w
    return random.choice(pool)

async def give_case_to_user(cid: int, uid: int, count: int=1):
    await db.execute(
      "UPDATE progress_local SET cave_cases = cave_cases + :n WHERE chat_id=:c AND user_id=:u",
      {"n": count, "c": cid, "u": uid}
    )

@router.message(Command("dcase"))
async def case_cmd(message: types.Message):
    cid, uid = await cid_uid(message)
    prog = await get_progress(cid, uid)
    if prog["cave_cases"] < 1:
        return await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç Cave Case üòï")

    # –æ—Ç–Ω–∏–º–∞–µ–º –∫–µ–π—Å
    await db.execute(
        "UPDATE progress_local SET cave_cases = cave_cases - 1 WHERE chat_id=:c AND user_id=:u",
        {"c": cid, "u": uid}
    )

    reward = await pick_case_reward()
    rtype = reward["reward_type"]
    # raw JSON –∏–∑ –ë–î
    raw = reward["reward_data"]
    # –ø–∞—Ä—Å–∏–º –≤ dict
    data = raw if isinstance(raw, dict) else json.loads(raw)

    descr_parts: List[str] = []

    if rtype == "item" and "items" in data:
        for it in data["items"]:
            if "item" in it and "qty" in it:
                await add_item(cid, uid, it["item"], it["qty"])
                meta = ITEM_DEFS[it["item"]]
                descr_parts.append(f"{it['qty']}√ó{meta['emoji']} {meta['name']}")
            elif "coins" in it:
                await add_money(cid, uid, it["coins"])
                descr_parts.append(f"{it['coins']} –º–æ–Ω–µ—Ç")
            elif "xp" in it:
                await add_xp(cid, uid, it["xp"])
                descr_parts.append(f"{it['xp']} XP")

    elif rtype == "item":
        # –µ–¥–∏–Ω–∏—á–Ω—ã–π –∞–π—Ç–µ–º
        it = data
        await add_item(cid, uid, it["item"], it["qty"])
        meta = ITEM_DEFS[it["item"]]
        descr_parts.append(f"{it['qty']}√ó{meta['emoji']} {meta['name']}")

    elif rtype == "coins":
        await add_money(cid, uid, data["coins"])
        descr_parts.append(f"{data['coins']} –º–æ–Ω–µ—Ç")

    elif rtype == "xp":
        await add_xp(cid, uid, data["xp"])
        descr_parts.append(f"{data['xp']} XP")

    descr = " + ".join(descr_parts)
    await message.reply(f"üì¶ –¢–≤–æ–π Cave Case –æ—Ç–∫—Ä—ã—Ç! –í—ã–ø–∞–ª–æ: {descr}")


async def give_case_to_user(chat_id: int, user_id: int, count: int) -> None:
    """
    –ó–±—ñ–ª—å—à—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ cave_cases —É —Ç–∞–±–ª–∏—Ü—ñ progress_local –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await db.execute(
        """
        UPDATE progress_local
           SET cave_cases = cave_cases + :cnt
         WHERE chat_id = :c AND user_id = :u
        """,
        {"cnt": count, "c": chat_id, "u": user_id},
    )

@router.message(Command("give_case"))
async def give_case_cmd(message: types.Message):
    cid, _ = await cid_uid(message)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤
    if message.from_user.id not in ADMINS:
        return await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")

    parts = message.text.split()
    if len(parts) != 3:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_case 'user_id –∏–ª–∏ @username' '–∫–æ–ª-–≤–æ'")

    target, cnt_str = parts[1], parts[2]
    if not cnt_str.isdigit():
        return await message.reply("–ö–æ–ª-–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    count = int(cnt_str)

    # –†–æ–∑–±—ñ—Ä —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ mention –∞–±–æ —á–∏—Å–ª–∞
    if target.startswith('@'):
        # –æ—Ç—Ä–∏–º—É—î–º–æ user_id –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
        try:
            member = await message.bot.get_chat_member(cid, target)
            uid = member.user.id
        except Exception:
            return await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ")
    else:
        if not target.isdigit():
            return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –∏–ª–∏ @username")
        uid = int(target)

    # –í–∏–∫–æ–Ω—É—î–º–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–µ–π—Å—ñ–≤
    await give_case_to_user(cid, uid, count)

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    mention = f'<a href="tg://user?id={uid}">{uid}</a>'
    return await message.reply(
        f"‚úÖ –í—ã–¥–∞–Ω–æ {count} Cave Case(–æ–≤) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {mention}",
        parse_mode="HTML"
    )
