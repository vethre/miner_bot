import json
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.assets import ACHIEVE_IMG_ID
from bot.db_local import get_progress, db
from bot.utils.autodelete import register_msg_for_autodelete
from bot.utils.unlockachievement import ACHIEVEMENT_REQUIREMENTS, generate_progress_bar

ACHIEVEMENTS = {
    "repair_master": {
        "name": "–ö–∏—Ä-–º–µ–π—Å—Ç–µ—Ä",
        "emoji": "üõ†Ô∏è",
        "desc": "–ü–æ—á–∏–Ω–∏—Ç—å –∫–∏—Ä–∫—É 10 —Ä–∞–∑"
    },
    "bear_miner": {
        "name": "–®–∞—Ö—Ç–µ—Ä—Å–∫–∏–π –º–µ–¥–≤–µ–¥—å",
        "emoji": "üêª",
        "desc": "–°–¥–µ–ª–∞—Ç—å 30 –∫–æ–ø–∞–Ω–∏–π"
    },
    "streak_master": {
        "name": "–°—Ç—Ä–∏–∫-–º–µ–π—Å—Ç–µ—Ä",
        "emoji": "üî•",
        "desc": "–ò–º–µ—Ç—å —Å–µ—Ä–∏—é ‚â• 10 –¥–Ω–µ–π"
    },
    "grizzly_miner": {
        "name": "–®–∞—Ö—Ç–µ—Ä—Å–∫–∏–π –≥—Ä–∏–∑–ª–∏",
        "emoji": "üêª",
        "desc": "–°–¥–µ–ª–∞—Ç—å 300 –∫–æ–ø–∞–Ω–∏–π"
    },
    "cave_bot": {
        "name": "Cave Bot",
        "emoji": "‚õèÔ∏è",
        "desc": "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /cavebot"
    },
    "pre_pass": {
        "name": "–ü–∞—Å—Å-—Ç–µ—Å—Ç–µ—Ä",
        "emoji": "üíé",
        "desc": "–ö—É–ø–∏/–ø–æ–ª—É—á–∏ Cave Pass Pre-Season"
    },
    "cobble_player": {
        "name": "–§–∞–Ω–∞—Ç –∫–æ–±–ª—Å—Ç–æ—É–Ω–∞",
        "emoji": "ü™®",
        "desc": "–°–∫—Ä–∞—Ñ—Ç–∏ –±—É–ª—ã–∂–Ω–∏–∫–æ–≤—É—é –∫–∏—Ä–∫—É"
    },
    "eonite_owner": {
        "name": "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –≠–æ–Ω–∏—Ç–∞",
        "emoji": "üîÆ",
        "desc": "–ü–æ–ª—É—á–∏/–∫—É–ø–∏ Cave Pass S1"
    },
    "eonite_pioneer": {
        "name": "–ü–µ—Ä–≤–æ–æ—Ç–∫—Ä—ã–≤–∞—Ç–µ–ª—å –≠–æ–Ω–∏—Ç–∞",
        "emoji": "üßø",
        "desc": "–ü–æ–ª—É—á–∏ –≠–æ–Ω–∏—Ç"
    },
    "ore_horder": {
        "name": "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä —Ä—É–¥—ã", "emoji": "ü™®",
        "desc": "–î–µ—Ä–∂–∏ 1 000 –ª—é–±–æ–π —Ä—É–¥—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ"
    },
    "big_sale": {
        "name": "–û–ø—Ç–æ–≤–∏–∫", "emoji": "üí∞",
        "desc": "–ü—Ä–æ–¥–∞–π –ª—É—Ç –µ–¥–∏–Ω–æ–π —Å–¥–µ–ª–∫–æ–π –Ω–∞ ‚â•5 000 –º–æ–Ω–µ—Ç"
    },
}

async def achievements_menu(message: types.Message, uid: int):
    cid = message.chat.id
    prog = await get_progress(cid, uid)
    got = prog.get("achievements_unlocked") or {}
    if isinstance(got, str):
        try:
            got = json.loads(got)
        except Exception:
            got = {}

    user = await message.bot.get_chat(uid)
    mention = user.full_name
    lines = [f"üèÜ <b>–ê—á–∏–≤–∫–∏ —à–∞—Ö—Ç—ë—Ä–∞ {mention}:</b>\n"]
    for code, a in ACHIEVEMENTS.items():
        unlocked = got.get(code)
        emoji = "‚úÖ" if unlocked else "üîì"

        line = f"{emoji} {a['emoji']} <b>{a['name']}</b> ‚Äî {a['desc']}"
        
        req = ACHIEVEMENT_REQUIREMENTS.get(code)
        if req and not unlocked:
            current = prog.get(req["count_field"], 0)
            bar = generate_progress_bar(current, req["goal"])
            line += f"\n{bar}"

        if code == "ore_horder" and not unlocked:
            from bot.handlers.base_commands import ORE_ITEMS
    # —Å—É–º–º–∏—Ä—É–µ–º –≤—Å—é —Ä—É–¥—É (–∏–ª–∏ –∏—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é) –ø—Ä—è–º–æ –∏–∑ inventory_local
            ore_array = "ARRAY[" + ",".join(["'{}'".format(k) for k in ORE_ITEMS]) + "]"

            row = await db.fetch_one(
                f"""
                SELECT COALESCE(SUM(qty),0) AS total
                FROM inventory_local
                WHERE chat_id=:c AND user_id=:u
                AND item = ANY({ore_array})
                """,
                {"c": cid, "u": uid}
            )
            total_ore = row["total"]
            bar = generate_progress_bar(total_ore, 1000)
            line += f"\n{bar}"

        lines.append(line)


    #kb = InlineKeyboardBuilder()
    # kb.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"dcavepass")
    msg = await message.answer_photo(
        ACHIEVE_IMG_ID,
        caption="\n".join(lines),
        parse_mode="HTML"
    )
    #msg = await message.answer("\n".join(lines), parse_mode="HTML") #reply_markup=kb.as_markup())
    register_msg_for_autodelete(message.chat.id, msg.message_id)