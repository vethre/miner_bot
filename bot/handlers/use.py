# bot/handlers/use.py
import random
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery
from bot.db_local import add_money, cid_uid, get_inventory, add_item, db
import json, asyncpg

from bot.handlers.items import ITEM_DEFS

router = Router()

PICKAXES = {
    "wooden_pickaxe":   {"bonus": .05, "name": "–¥–µ—Ä–µ–≤—è–Ω–∞—è –∫–∏—Ä–∫–∞",   "emoji": "üî®", "dur": 65},
    "iron_pickaxe":     {"bonus": .18, "name": "–∂–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∫–∞",     "emoji": "‚õèÔ∏è", "dur": 115},
    "gold_pickaxe":     {"bonus": .30, "name": "–∑–æ–ª–æ—Ç–∞—è –∫–∏—Ä–∫–∞",      "emoji": "‚ú®", "dur": 80},
    "roundstone_pickaxe":{"bonus": .12, "name": "–±—É–ª—ã–∂–Ω–∏–∫–æ–≤–∞—è –∫–∏—Ä–∫–∞", "emoji": "ü™®", "dur": 100},
    "crystal_pickaxe":  {"bonus":.95, "name": "—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è –∫–∏—Ä–∫–∞",  "emoji": "üíé", "dur": 75},
    "amethyst_pickaxe": {"bonus": .55, "name": "–∞–º–µ—Ç–∏—Å—Ç–æ–≤–∞—è –∫–∏—Ä–∫–∞",  "emoji": "üîÆ", "dur":120},
    "diamond_pickaxe": {"bonus": .80, "name": "–∞–ª–º–∞–∑–Ω–∞—è –∫–∏—Ä–∫–∞",  "emoji": "üíé", "dur":85},
    "obsidian_pickaxe": {"name":  "–û–±—Å–∏–¥–∏–∞–Ω–æ–≤–∞—è –∫–∏—Ä–∫–∞", "emoji": "üü™", "bonus": .90,"dur":   165},
    "proto_eonite_pickaxe": {"bonus": 1.1, "name": "–ø—Ä–æ—Ç–æ—Ç–∏–ø —ç–æ–Ω–∏—Ç–æ–≤–æ–π –∫–∏—Ä–∫–∏",  "emoji": "üßø", "dur":50},
    "greater_eonite_pickaxe": {"bonus": 1.45, "name": "—Å—Ç–∞—Ä—à–∞—è —ç–æ–Ω–∏—Ç–æ–≤–∞—è –∫–∏—Ä–∫–∞", "emoji": "üîÆ", "dur": 60, "regen": 10},
    "void_pickaxe": {"bonus": 0, "name": "–≤–æ–π–¥-–∫–∏—Ä–∫–∞",  "emoji": "üï≥Ô∏è", "dur":70},
    "pick_catharsis": {  # Pickaxe of Catharsis
        "name": "–∫–∏—Ä–∫–∞ –∫–∞—Ç–∞—Ä—Å–∏—Å–∞", "emoji": "‚öîÔ∏è", "dur": 10**12,  # –ø—Å–µ–≤–¥–æ-–±–µ—Å–∫. –ø—Ä–æ—á–Ω–æ—Å—Ç—å
        "bonus": 0.0, "crit": 100, "crit_mult": 5.0,  # –∫—Ä–∏—Ç —á–∏—Å—Ç–æ –¥–ª—è –≤–∏–¥–∞
        "is_divine": True
    },
    "legacy_pickaxe": {
        "name": "–ø–∞–º—è—Ç–Ω–∞—è –∫–∏—Ä–∫–∞", "emoji": "‚ôæÔ∏è", "dur": 1,  # –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è –ª–æ–≥–∏–∫–æ–π –Ω–∏–∂–µ
        "bonus": 0.0, "crit": 0, "crit_mult": 1.0,
        "is_legacy": True
    },
}

USABLE_EXTRA = {
    "voucher_borsch",
    "voucher_sale",
    "voucher_full_energy",
}

ALIAS = {
    "–¥–µ—Ä–µ–≤—è–Ω–∞—è –∫–∏—Ä–∫–∞":"wooden_pickaxe",
    "–∂–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∫–∞":"iron_pickaxe",    "–∑–æ–ª–æ—Ç–∞—è –∫–∏—Ä–∫–∞":"gold_pickaxe",
    "–±—É–ª—ã–∂–Ω–∏–∫–æ–≤–∞—è –∫–∏—Ä–∫–∞":"roundstone_pickaxe",
    "—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è –∫–∏—Ä–∫–∞":"crystal_pickaxe",
    "–∞–º–µ—Ç–∏—Å—Ç–æ–≤–∞—è –∫–∏—Ä–∫–∞":"amethyst_pickaxe",
    "–∞–ª–º–∞–∑–Ω–∞—è –∫–∏—Ä–∫–∞": "diamond_pickaxe",
    "–æ–±—Å–∏–¥–∏–∞–Ω–æ–≤–∞—è –∫–∏—Ä–∫–∞": "obsidian_pickaxe",
    "–≤–∞—É—á–µ—Ä –±–æ—Ä—â": "voucher_borsch",
    "–≤–∞—É—á–µ—Ä —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞": "voucher_sale",
    "–≤–∞—É—á–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è": "voucher_full_energy",
    "–ø—Ä–æ—Ç–æ—Ç–∏–ø —ç–æ–Ω–∏—Ç–æ–≤–æ–π –∫–∏—Ä–∫–∏": "proto_eonite_pickaxe",
    "–ø—ç–∫": "proto_eonite_pickaxe",
    "—Å—Ç–∞—Ä—à–∞—è —ç–æ–Ω–∏—Ç–æ–≤–∞—è –∫–∏—Ä–∫–∞": "greater_eonite_pickaxe",
    "—Å—ç–∫": "greater_eonite_pickaxe",
    "–≤–æ–π–¥-–∫–∏—Ä–∫–∞": "void_pickaxe",
    "–∫–∏—Ä–∫–∞ –∫–∞—Ç–∞—Ä—Å–∏—Å–∞": "pick_catharsis",
    "–Ω–∞—Å–ª–µ–¥–∏–µ –∫–∏—Ä–∫–∞": "legacy_pickaxe"
}

def _json2dict(raw):
    if raw is None:
        return {}
    if isinstance(raw, dict):
        return raw
    if isinstance(raw, asyncpg.Record):
        return dict(raw)
    try:
        return json.loads(raw)
    except Exception:
        # fallback:   '{"key":1}' ‚Üí dict(record)  /  'text' ‚Üí {}
        try:
            return dict(raw)
        except Exception:
            return {}

@router.message(Command("use"))
async def use_cmd(message: types.Message):
    cid, uid = await cid_uid(message)
    inv = {r["item"]: r["qty"] for r in await get_inventory(cid, uid)}

    pick_keys = [k for k in PICKAXES if inv.get(k, 0) > 0]
    extra_keys = [k for k in USABLE_EXTRA if inv.get(k, 0) > 0]

    if not (pick_keys or extra_keys):
        return await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏—á–µ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å üòÖ")

    kb = InlineKeyboardBuilder()
    for key in pick_keys + extra_keys:
        meta = PICKAXES.get(key) or ITEM_DEFS.get(
            key, {"name": key, "emoji": "üéüÔ∏è"}
        )
        kb.button(
            text=f"{meta['emoji']} {meta['name']} ({inv[key]})",
            callback_data=f"use:{key}:{uid}"
        )
    kb.adjust(1)
    await message.reply("üîß –í—ã–±–µ—Ä–∏ –∫–∏—Ä–∫—É/–≤–∞—É—á–µ—Ä:", reply_markup=kb.as_markup())


@router.callback_query(F.data.startswith("use:"))
async def use_callback(callback: CallbackQuery):
    cid, uid = await cid_uid(callback)
    try:
        _, key, orig_uid_str = callback.data.split(":")
        orig_uid = int(orig_uid_str)
    except ValueError:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)

    if uid != orig_uid:
        return await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è üòæ", show_alert=True)

    inv = {r["item"]: r["qty"] for r in await get_inventory(cid, uid)}
    if inv.get(key, 0) < 1:
        return await callback.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ ‚ùå", show_alert=True)
    
    if key == "voucher_borsch":
        await add_item(cid, uid, "voucher_borsch", -1)
        await add_item(cid, uid, "borsch", 1)
        txt = "üéüÔ∏è –í–∞—É—á–µ—Ä –æ–±–º–µ–Ω—è–Ω ‚Äî —Ç—ã –ø–æ–ª—É—á–∏–ª —Ç–∞—Ä–µ–ª–∫—É –±–æ—Ä—â–∞!"
        await callback.message.edit_text(txt)
        return await callback.answer()

    elif key == "voucher_sale":
        await add_item(cid, uid, "voucher_sale", -1)
        await db.execute("""
            UPDATE progress_local SET sale_voucher = TRUE
            WHERE chat_id=:c AND user_id=:u
        """, {"c": cid, "u": uid})
        txt = "üé´ –°–∫–∏–¥-–≤–∞—É—á–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–°–ª–µ–¥—É—é—â–∞—è –ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç –Ω–∞ 20 % –¥–µ—à–µ–≤–ª–µ!"
        await callback.message.edit_text(txt)
        return await callback.answer()

    elif key == "voucher_full_energy":
        await add_item(cid, uid, "voucher_full_energy", -1)
        await db.execute("""
            UPDATE progress_local
            SET energy  = 100,
                hunger  = 100
            WHERE chat_id=:c AND user_id=:u
        """, {"c": cid, "u": uid})
        txt = "üí• –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞! –≠–Ω–µ—Ä–≥–∏—è –∏ —Å—ã—Ç–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
        await callback.message.edit_text(txt)
        return await callback.answer()
    else:
        if key not in PICKAXES:
            return await callback.answer("–¢–∞–∫–æ–π –∫–∏—Ä–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üòµ")
        prog = await db.fetch_one("""
            SELECT current_pickaxe, pick_dur_map, pick_dur_max_map
            FROM progress_local
            WHERE chat_id=:c AND user_id=:u
        """, {"c": cid, "u": uid})
        cur = prog["current_pickaxe"]
        dur_map = _json2dict(prog["pick_dur_map"])
        dur_max_map = _json2dict(prog["pick_dur_max_map"])

        if key not in dur_max_map:
            dur_max_map[key] = PICKAXES[key]["dur"]
        if key not in dur_map:
            dur_map[key] = dur_max_map[key]

        async with db.transaction():
            await add_item(cid, uid, key, -1)
            if cur:
                await add_item(cid, uid, cur, +1)
            await db.execute("""
                UPDATE progress_local
                SET current_pickaxe = :p,
                    pick_dur_map = (:dm)::jsonb,
                    pick_dur_max_map = (:dmm)::jsonb
                WHERE chat_id = :c AND user_id = :u
            """, {
                "p": key,
                "dm": json.dumps(dur_map),
                "dmm": json.dumps(dur_max_map),
                "c": cid,
                "u": uid
            })

        await callback.message.edit_text(
            f"{PICKAXES[key]['emoji']} –í–∑—è–ª <b>{PICKAXES[key]['name']}</b> "
            f"(–±–æ–Ω—É—Å +{int(PICKAXES[key]['bonus'] * 100)}%)",
            parse_mode="HTML"
        )
        # (‚Ä¶–≤—Å–µ —è–∫ –±—É–ª–æ, –±–µ–∑ –∑–º—ñ–Ω)

ADIEU_PACK_REWARDS = [
    ("coin", 15_000, 100_000),
    ("adieu_pack", 1, 2),
    ("lapis_torch", 1, 1),
    ("adieu_soul", 1, 1),
    ("sunset_ore", 1, 5),  # –∫–æ—Å–º–µ—Ç–∏–∫–∞
]
async def open_adieu_pack(cid:int, uid:int):
    txt = "üéÅ –¢—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å –°—É–≤–µ–Ω–∏—Ä‚Äë–ø–∞–∫ ¬´Adieu¬ª:\n"
    for key, a, b in ADIEU_PACK_REWARDS:
        qty = random.randint(a,b) if a<b else a
        if key == "coin":
            await add_money(cid, uid, qty)
            txt += f"‚Ä¢ üí∞ –ú–æ–Ω–µ—Ç—ã: +{qty}\n"
        else:
            await add_item(cid, uid, key, qty)
            nm = ITEM_DEFS[key]["name"]; em = ITEM_DEFS[key].get("emoji","")
            txt += f"‚Ä¢ {em} {nm}: +{qty}\n"
    return txt
