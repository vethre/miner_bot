# bot/handlers/use.py   (–æ–Ω–æ–≤–ª–µ–Ω–∏–π)
from aiogram import Router, types
from aiogram.filters import Command
from bot.db_local import cid_uid, get_inventory, add_item, db

PICKAXES = {              # ‚Üê —è–∫ —ñ –±—É–ª–æ
    "wooden_pickaxe":  {"bonus": .10, "name": "–¥–µ—Ä–µ–≤‚Äô—è–Ω–∞ –∫–∏—Ä–∫–∞", "emoji": "üî®",  "dur": 75},
    "iron_pickaxe":    {"bonus": .15, "name": "–∑–∞–ª—ñ–∑–Ω–∞ –∫–∏—Ä–∫–∞",   "emoji": "‚õèÔ∏è",  "dur": 90},
    "gold_pickaxe":    {"bonus": .30, "name": "–∑–æ–ª–æ—Ç–∞ –∫–∏—Ä–∫–∞",    "emoji": "‚ú®",  "dur": 60},
    "roundstone_pickaxe": {"bonus": .05, "name": "–∫—Ä—É–≥–ª—è–∫–æ–≤–∞ –∫–∏—Ä–∫–∞","emoji": "ü™®","dur": 50},
    "crystal_pickaxe": {"bonus":2.50, "name":"–∫—Ä–∏—Å—Ç–∞–ª—å–Ω–∞ –∫–∏—Ä–∫–∞", "emoji":"üíé",   "dur": 95},
    "amethyst_pickaxe":{"bonus":.70, "name":"–∞–º–µ—Ç–∏—Å—Ç–æ–≤–∞ –∫–∏—Ä–∫–∞",  "emoji":"üîÆ",   "dur":100},
}

ALIAS = {                    # –∫–∏—Ä–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
    "–¥–µ—Ä–µ–≤'—è–Ω–∞ –∫–∏—Ä–∫–∞":"wooden_pickaxe","–¥–µ—Ä–µ–≤‚Äô—è–Ω–∞ –∫–∏—Ä–∫–∞":"wooden_pickaxe",
    "–∑–∞–ª—ñ–∑–Ω–∞ –∫–∏—Ä–∫–∞":"iron_pickaxe",    "–∑–æ–ª–æ—Ç–∞ –∫–∏—Ä–∫–∞":"gold_pickaxe",
    "–∫—Ä—É–≥–ª—è–∫–æ–≤–∞ –∫–∏—Ä–∫–∞":"roundstone_pickaxe",
    "–∫—Ä–∏—Å—Ç–∞–ª—å–Ω–∞ –∫–∏—Ä–∫–∞":"crystal_pickaxe",
    "–∞–º–µ—Ç–∏—Å—Ç–æ–≤–∞ –∫–∏—Ä–∫–∞":"amethyst_pickaxe",
}

router = Router()


@router.message(Command("use"))
async def use_cmd(message: types.Message):
    cid, uid = await cid_uid(message)

    # ---------- 1) –ø–∞—Ä—Å–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç ----------
    try:
        _, arg = message.text.split(maxsplit=1)
    except ValueError:
        return await message.reply("–Ø–∫ –æ–±—Ä–∞—Ç–∏ –∫–∏—Ä–∫—É: /use <–Ω–∞–∑–≤–∞ –∞–±–æ –∫–ª—é—á>")

    arg = arg.lower().replace("'", "‚Äô").strip()
    key = ALIAS.get(arg, arg)          # alias –∞–±–æ –æ–¥—Ä–∞–∑—É id
    if key not in PICKAXES:
        return await message.reply(f"–ù–µ–º–∞—î –∫–∏—Ä–∫–∏ ¬´{arg}¬ª üòï")

    # ---------- 2) –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–∞–∫–∞ –∫–∏—Ä–∫–∞ —É –≥—Ä–∞–≤—Ü—è ----------
    inv = {r["item"]: r["qty"] for r in await get_inventory(cid, uid)}
    if inv.get(key, 0) < 1:
        return await message.reply(f"–£ —Ç–µ–±–µ –Ω–µ–º–∞—î {PICKAXES[key]['name']} üôÅ")

    # ---------- 3) —á–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –µ–∫—ñ–ø-–∫–∏—Ä–∫—É –π —ó—ó durability ----------
    prog = await db.fetch_one(
        "SELECT current_pickaxe, pick_dur_map, pick_dur_max_map "
        "FROM progress_local WHERE chat_id=:c AND user_id=:u",
        {"c": cid, "u": uid}
    )
    cur = prog["current_pickaxe"]
    dur_map     = prog["pick_dur_map"]     or {}
    dur_max_map = prog["pick_dur_max_map"] or {}

    # ---------- 4) –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ (—è–∫—â–æ —Ç—Ä–µ–±–∞) –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∫–∏—Ä–∫—É —É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä ----------
    if cur:                       # –º—ñ–≥ –±—É—Ç–∏ None
        add_item_task = add_item(cid, uid, cur, +1)      # –Ω–µ —á–µ–∫–∞—î–º–æ ‚Äì –ª–∏—à–∏–º–æ –Ω–∏–∂—á–µ

    # ---------- 5) —Å–ø–∏—Å—É—î–º–æ –Ω–æ–≤—É –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è ----------
    await add_item(cid, uid, key, -1)

    # ---------- 6) —Ñ—ñ–∫—Å—É—î–º–æ durability –¥–ª—è –Ω–æ–≤–æ—ó (—è–∫—â–æ —â–µ –Ω–µ –±—É–ª–æ) ----------
    if key not in dur_max_map:
        dur_max_map[key] = PICKAXES[key]["dur"]
    if key not in dur_map:
        dur_map[key] = dur_max_map[key]          # ‚Äú–ø–æ–≤–Ω–∞‚Äù –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ

    # ---------- 7) –æ–Ω–æ–≤–ª—é—î–º–æ progress_local ----------
    await db.execute(
        """
        UPDATE progress_local
           SET current_pickaxe   = :p,
               pick_dur_map      = :dm,
               pick_dur_max_map  = :dmm
         WHERE chat_id = :c AND user_id = :u
        """,
        {"p": key, "dm": dur_map, "dmm": dur_max_map, "c": cid, "u": uid}
    )

    if cur:
        await add_item_task      # (—Ç–µ–ø–µ—Ä —Ä–µ–∞–ª—å–Ω–æ —á–µ–∫–∞—î–º–æ, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ order)

    await message.reply(
        f"{PICKAXES[key]['emoji']} –í–∑—è–≤ <b>{PICKAXES[key]['name']}</b> "
        f"(–±–æ–Ω—É—Å +{int(PICKAXES[key]['bonus']*100)} %)",
        parse_mode="HTML"
    )
