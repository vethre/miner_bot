# bot/handlers/use.py
import json
from aiogram import Router, types
from aiogram.filters import Command
from difflib import get_close_matches

from bot.db_local import cid_uid, get_inventory, add_item, db

PICKAXES = {
    "wooden_pickaxe":  {"bonus": .10, "name": "–¥–µ—Ä–µ–≤‚Äô—è–Ω–∞ –∫–∏—Ä–∫–∞",  "emoji": "üî®", "dur": 75},
    "iron_pickaxe":    {"bonus": .15, "name": "–∑–∞–ª—ñ–∑–Ω–∞ –∫–∏—Ä–∫–∞",    "emoji": "‚õèÔ∏è", "dur": 90},
    "gold_pickaxe":    {"bonus": .30, "name": "–∑–æ–ª–æ—Ç–∞ –∫–∏—Ä–∫–∞",     "emoji": "‚ú®", "dur": 60},
    "roundstone_pickaxe": {"bonus": .05, "name": "–∫—Ä—É–≥–ª—è–∫–æ–≤–∞ –∫–∏—Ä–∫–∞","emoji":"ü™®","dur": 50},
    "crystal_pickaxe": {"bonus": 1.5, "name": "–∫—Ä–∏—Å—Ç–∞–ª—å–Ω–∞ –∫–∏—Ä–∫–∞", "emoji": "üíé", "dur": 95},
    "amethyst_pickaxe":{"bonus": .70, "name": "–∞–º–µ—Ç–∏—Å—Ç–æ–≤–∞ –∫–∏—Ä–∫–∞", "emoji": "üîÆ", "dur":100},
}

raw_dur_map  = prog["pick_dur_map"]      or {}
raw_dur_max  = prog["pick_dur_max_map"]  or {}

def to_dict(raw):
    if isinstance(raw, dict):
        return raw
    if isinstance(raw, str):
        try:
            return json.loads(raw)       # ‚Üê –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ JSON-—Ä—è–¥–æ–∫ –Ω–∞ dict
        except json.JSONDecodeError:
            return {}
    return dict(raw)                     # fallback –¥–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤

dur_map     = to_dict(raw_dur_map)
dur_max_map = to_dict(raw_dur_max)

# --- alias-–∏ (—ñ —É–∫—Ä, —ñ ¬´–∫–æ—Ä–æ—Ç–∫–æ¬ª –±–µ–∑ _pickaxe) ---------------
ALIAS = {
    # full UKR
    "–¥–µ—Ä–µ–≤‚Äô—è–Ω–∞ –∫–∏—Ä–∫–∞": "wooden_pickaxe",
    "–∑–∞–ª—ñ–∑–Ω–∞ –∫–∏—Ä–∫–∞":   "iron_pickaxe",
    "–∑–æ–ª–æ—Ç–∞ –∫–∏—Ä–∫–∞":    "gold_pickaxe",
    "–∫—Ä—É–≥–ª—è–∫–æ–≤–∞ –∫–∏—Ä–∫–∞":"roundstone_pickaxe",
    "–∫—Ä–∏—Å—Ç–∞–ª—å–Ω–∞ –∫–∏—Ä–∫–∞":"crystal_pickaxe",
    "–∞–º–µ—Ç–∏—Å—Ç–æ–≤–∞ –∫–∏—Ä–∫–∞":"amethyst_pickaxe",
    # shorthand ENG
    "wooden": "wooden_pickaxe",
    "iron":   "iron_pickaxe",
    "gold":   "gold_pickaxe",
    "round":  "roundstone_pickaxe",
    "crystal":"crystal_pickaxe",
    "amethyst":"amethyst_pickaxe",
}

router = Router()

def resolve_key(raw: str) -> str | None:
    """–ü–æ–≤–µ—Ä—Ç–∞—î id –∫–∏—Ä–∫–∏ –∞–±–æ None."""
    raw = raw.lower().replace("'", "‚Äô").strip()
    if raw in ALIAS:
        return ALIAS[raw]
    if not raw.endswith("_pickaxe"):
        raw += "_pickaxe"
    if raw in PICKAXES:
        return raw
    # fuzzy-match (–¥–æ–ø–æ–º–∞–≥–∞—î –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö –≤ 1-2 –ª—ñ—Ç–µ—Ä–∞—Ö)
    closest = get_close_matches(raw, PICKAXES.keys(), n=1, cutoff=0.8)
    return closest[0] if closest else None


@router.message(Command("use"))
async def use_cmd(message: types.Message):
    cid, uid = await cid_uid(message)

    try:
        _, arg = message.text.split(maxsplit=1)
    except ValueError:
        return await message.reply("–Ø–∫ –æ–±—Ä–∞—Ç–∏ –∫–∏—Ä–∫—É: <code>/use –Ω–∞–∑–≤–∞</code>")

    key = resolve_key(arg)
    if not key:
        return await message.reply(f"–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ—ó –∫–∏—Ä–∫–∏ ¬´{arg}¬ª üòï")

    # ---------- –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä ----------
    inv = {r["item"]: r["qty"] for r in await get_inventory(cid, uid)}
    if inv.get(key, 0) < 1:
        return await message.reply(f"–£ —Ç–µ–±–µ –Ω–µ–º–∞—î {PICKAXES[key]['name']} üôÅ")

    # ---------- –¥—ñ—Å—Ç–∞—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å ----------
    prog = await db.fetch_one(
        "SELECT current_pickaxe, pick_dur_map, pick_dur_max_map "
        "FROM progress_local WHERE chat_id=:c AND user_id=:u",
        {"c": cid, "u": uid}
    )
    cur          = prog["current_pickaxe"]
    dur_map      = dict(prog["pick_dur_map"] or {})
    dur_max_map  = dict(prog["pick_dur_max_map"] or {})

    # ---------- –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∫–∏—Ä–∫—É ----------
    if cur:
        await add_item(cid, uid, cur, +1)

    # ---------- —Å–ø–∏—Å—É—î–º–æ –Ω–æ–≤—É ----------
    await add_item(cid, uid, key, -1)

    # ---------- durability -------------
    if key not in dur_max_map:
        dur_max_map[key] = PICKAXES[key]["dur"]
    if key not in dur_map:
        dur_map[key] = dur_max_map[key]

    await db.execute(
        """
        UPDATE progress_local
           SET current_pickaxe   = :p,
               pick_dur_map      = :dm,
               pick_dur_max_map  = :dmm
         WHERE chat_id = :c AND user_id = :u
        """,
        {"p": key, "dm": dur_map, "dmm": dur_max_map, "c": cid, "u": uid}
    )

    pct = int(PICKAXES[key]['bonus'] * 100)
    await message.reply(
        f"{PICKAXES[key]['emoji']} –¢–µ–ø–µ—Ä —É —Ä—É—Ü—ñ <b>{PICKAXES[key]['name']}</b> "
        f"(–±–æ–Ω—É—Å +{pct}% –¥–æ –¥—Ä–æ–ø—É)",
        parse_mode="HTML"
    )
