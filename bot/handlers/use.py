# bot/handlers/use.py
from aiogram import Router, types
from aiogram.filters import Command
from bot.db_local import cid_uid, get_inventory, add_item, db
import json

router = Router()

PICKAXES = {
    "wooden_pickaxe":   {"bonus": .10, "name": "–¥–µ—Ä–µ–≤—è–Ω–∞—è –∫–∏—Ä–∫–∞",   "emoji": "üî®", "dur": 75},
    "iron_pickaxe":     {"bonus": .15, "name": "–∂–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∫–∞",     "emoji": "‚õèÔ∏è", "dur": 90},
    "gold_pickaxe":     {"bonus": .30, "name": "–∑–æ–ª–æ—Ç–∞—è –∫–∏—Ä–∫–∞",      "emoji": "‚ú®", "dur": 60},
    "roundstone_pickaxe":{"bonus": .05, "name": "–±—É–ª—ã–∂–Ω–∏–∫–æ–≤–∞—è –∫–∏—Ä–∫–∞", "emoji": "ü™®", "dur": 50},
    "crystal_pickaxe":  {"bonus":1.50, "name": "—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è –∫–∏—Ä–∫–∞",  "emoji": "üíé", "dur": 95},
    "amethyst_pickaxe": {"bonus": .70, "name": "–∞–º–µ—Ç–∏—Å—Ç–æ–≤–∞—è –∫–∏—Ä–∫–∞",  "emoji": "üîÆ", "dur":100},
}

ALIAS = {
    "–¥–µ—Ä–µ–≤—è–Ω–∞—è –∫–∏—Ä–∫–∞":"wooden_pickaxe","–¥–µ—Ä–µ–≤‚Äô—è–Ω–∞ –∫–∏—Ä–∫–∞":"wooden_pickaxe",
    "–∂–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∫–∞":"iron_pickaxe",    "–∑–æ–ª–æ—Ç–∞ –∫–∏—Ä–∫–∞":"gold_pickaxe",
    "–±—É–ª—ã–∂–Ω–∏–∫–æ–≤–∞—è –∫–∏—Ä–∫–∞":"roundstone_pickaxe",
    "—Ö—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è –∫–∏—Ä–∫–∞":"crystal_pickaxe",
    "–∞–º–µ—Ç–∏—Å—Ç–æ–≤–∞—è –∫–∏—Ä–∫–∞":"amethyst_pickaxe",
}

def _json2dict(raw):
    if raw is None:
        return {}
    if isinstance(raw, dict):
        return raw
    # raw is str or asyncpg.Record -> –ø—Ä–æ–±—É—î–º–æ –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏
    try:
        return json.loads(raw)
    except Exception:
        return dict(raw)

@router.message(Command("use"))
async def use_cmd(message: types.Message):
    cid, uid = await cid_uid(message)

    # 1Ô∏è‚É£ —Ä–æ–∑–±—ñ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç—É
    try:
        _, arg = message.text.split(maxsplit=1)
    except ValueError:
        return await message.reply("–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∫–∏—Ä–∫—É: /use '–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–ª—é—á'")

    arg = arg.lower().replace("'", "‚Äô").strip()
    key = ALIAS.get(arg, arg)
    if key not in PICKAXES:
        return await message.reply(f"–ù–µ—Ç –∫–∏—Ä–∫–∏ ¬´{arg}¬ª üòï")

    # 2Ô∏è‚É£ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
    inv = {row["item"]: row["qty"] for row in await get_inventory(cid, uid)}
    if inv.get(key, 0) < 1:
        return await message.reply(f"–£ —Ç–µ–±—è –Ω–µ—Ç {PICKAXES[key]['name']} üôÅ")

    # 3Ô∏è‚É£ —á–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
    prog = await db.fetch_one(
        "SELECT current_pickaxe, pick_dur_map, pick_dur_max_map "
        "FROM progress_local WHERE chat_id=:c AND user_id=:u",
        {"c": cid, "u": uid}
    )
    cur          = prog["current_pickaxe"]
    dur_map      = _json2dict(prog["pick_dur_map"])
    dur_max_map  = _json2dict(prog["pick_dur_max_map"])

    # 4Ô∏è‚É£ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∫–∏—Ä–∫—É –¥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é (—è–∫—â–æ –±—É–ª–∞)
    if cur:
        await add_item(cid, uid, cur, +1)

    # 5Ô∏è‚É£ —Å–ø–∏—Å—É—î–º–æ –Ω–æ–≤—É –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
    await add_item(cid, uid, key, -1)

    # 6Ô∏è‚É£ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ durability —É –º–∞–ø–∞—Ö
    if key not in dur_max_map:
        dur_max_map[key] = PICKAXES[key]["dur"]
    if key not in dur_map:
        dur_map[key] = dur_max_map[key]

    # 7Ô∏è‚É£ –æ–Ω–æ–≤–ª—é—î–º–æ progress_local
    dm_json  = json.dumps(dur_map)      # -> str
    dmm_json = json.dumps(dur_max_map)  # -> str

    await db.execute(
        """
        UPDATE progress_local
        SET current_pickaxe   = :p,
            pick_dur_map      = :dm::jsonb,     -- —è–≤–Ω–∏–π cast
            pick_dur_max_map  = :dmm::jsonb
        WHERE chat_id = :c AND user_id = :u
        """,
        {"p": key, "dm": dm_json, "dmm": dmm_json, "c": cid, "u": uid}
    )

    # 8Ô∏è‚É£ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bonus_pct = int(PICKAXES[key]["bonus"] * 100)
    await message.reply(
        f"{PICKAXES[key]['emoji']} –í–∑—è–ª <b>{PICKAXES[key]['name']}</b> "
        f"(–±–æ–Ω—É—Å +{bonus_pct} %)",
        parse_mode="HTML"
    )
