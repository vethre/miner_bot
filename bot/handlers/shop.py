# bot/handlers/shop.py
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db_local import cid_uid, get_money, add_money, add_item
from bot.handlers.items import ITEM_DEFS
from bot.handlers.cases import give_case_to_user
from bot.assets import SHOP_IMG_ID
from bot.utils.autodelete import register_msg_for_autodelete

router = Router()

###############################################################################
#  –¢–û–í–ê–†–´  #####################################################################
###############################################################################

SHOP_ITEMS = {
    "wood_handle":     {"price": 100,  "name": "–†—É–∫–æ—è—Ç—å",          "emoji": "ü™µ"},
    "wooden_pickaxe":  {"price": 200,  "name": "–î–µ—Ä–µ–≤—è–Ω–∞—è –∫–∏—Ä–∫–∞",  "emoji": "üî®"},
    "iron_pickaxe":    {"price": 1000, "name": "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∫–∞",   "emoji": "‚õèÔ∏è"},
    "gold_pickaxe":    {"price": 2000, "name": "–ó–æ–ª–æ—Ç–∞—è –∫–∏—Ä–∫–∞",    "emoji": "‚ú®"},
    "torch_bundle":    {"price": 150,  "name": "–§–∞–∫–µ–ª",            "emoji": "üïØÔ∏è"},
    "bread":           {"price": 50,   "name": "–•–ª–µ–±",             "emoji": "üçû", "hunger": 20},
    "meat":            {"price": 120,  "name": "–ú—è—Å–æ",             "emoji": "üçñ", "hunger": 50},
    "borsch":          {"price": 300,  "name": "–ë–æ—Ä—â",             "emoji": "ü•£", "hunger": 100},
    "energy_drink":    {"price": 170,  "name": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫",        "emoji": "ü•§", "energy": 40},
    "cave_cases":      {"price": 300,  "name": "Cave Case",        "emoji": "üì¶"},
}

ALL_ITEMS = list(SHOP_ITEMS.keys())            # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
PAGE_SIZE = 6                                  # —Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

def items_on_page(page: int):
    start = page * PAGE_SIZE
    return ALL_ITEMS[start : start + PAGE_SIZE]

def max_page():
    return (len(ALL_ITEMS) - 1) // PAGE_SIZE   # 0-based

###############################################################################
#  –í–ò–¢–†–ò–ù–ê  ####################################################################
###############################################################################

async def _send_shop_page(chat_id: int,
                          page: int,
                          bot_message: types.Message | None,
                          *,
                          edit: bool):
    page = max(0, min(page, max_page()))       # clamp
    kb = InlineKeyboardBuilder()

    # —Å–∞–º–∏ —Ç–æ–≤–∞—Ä—ã
    for item_id in items_on_page(page):
        p = SHOP_ITEMS[item_id]
        kb.button(
            text=f"{p['emoji']} {p['name']} ‚Äî {p['price']} –º–æ–Ω–µ—Ç",
            callback_data=f"buy:{item_id}"
        )
    kb.adjust(1)

    # ‚Äî‚Äî –Ω–∞–≤–∏–≥–∞—Ü–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    nav = []
    if page > 0:
        nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"shop_page:{page-1}"))
    nav.append(types.InlineKeyboardButton(f"{page+1}/{max_page()+1}", callback_data="noop"))
    if page < max_page():
        nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"shop_page:{page+1}"))
    kb.row(*nav)

    if edit and bot_message:                   # –ª–∏—Å—Ç–∞–µ–º
        await bot_message.edit_reply_markup(kb.as_markup())
    else:                                      # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        out = await bot_message.answer_photo(
            SHOP_IMG_ID,
            "üõí <b>–ú–∞–≥–∞–∑–∏–Ω</b> ‚Äî –ª–∏—Å—Ç–∞–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:",
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )
        register_msg_for_autodelete(chat_id, out.message_id)

###############################################################################
#  /shop  #####################################################################
###############################################################################

@router.message(Command("shop"))
async def shop_cmd(message: types.Message):
    await _send_shop_page(message.chat.id, page=0, bot_message=message, edit=False)

@router.callback_query(F.data.startswith("shop_page:"))
async def shop_page_cb(cb: CallbackQuery):
    _, page_str = cb.data.split(":")
    await _send_shop_page(cb.message.chat.id, int(page_str), cb.message, edit=True)
    await cb.answer()

###############################################################################
#  –ü–û–ö–£–ü–ö–ê  ####################################################################
###############################################################################

@router.callback_query(F.data.startswith("buy:"))
async def shop_buy_callback(callback: CallbackQuery):
    await callback.answer()
    cid, uid = callback.message.chat.id, callback.from_user.id
    _, item_id = callback.data.split(":", 1)

    item = SHOP_ITEMS.get(item_id)
    if not item:
        return await callback.message.reply("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")

    balance = await get_money(cid, uid)
    if balance < item["price"]:
        return await callback.message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç üí∏")

    await add_money(cid, uid, -item["price"])
    if item_id == "cave_cases":
        await give_case_to_user(cid, uid, 1)
    else:
        await add_item(cid, uid, item_id, 1)

    msg = await callback.message.reply(
        f"–¢—ã –∫—É–ø–∏–ª {item['emoji']}<b>{item['name']}</b> –∑–∞ {item['price']} –º–æ–Ω–µ—Ç! üéâ",
        parse_mode="HTML"
    )
    register_msg_for_autodelete(callback.message.chat.id, msg.message_id)
