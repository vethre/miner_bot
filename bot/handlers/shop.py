from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from typing import Optional
from datetime import datetime

from bot.db_local import cid_uid, get_money, add_money, add_item, get_progress, db
from bot.handlers.cases import give_case_to_user
from bot.handlers.cave_clash import add_clash_points
from bot.handlers.items import ITEM_DEFS
from bot.handlers.use import PICKAXES
from bot.utils.autodelete import register_msg_for_autodelete
from bot.assets import SHOP_IMG_ID

router = Router()
class ShopBuy(StatesGroup):
    waiting_for_qty = State()

# ---------- –∫–∞—Ç–∞–ª–æ–≥ ----------
SHOP_ITEMS: dict[str, dict] = {
    "wood_handle":    {"price": 1,  "name": "–†—É–∫–æ—è—Ç—å",          "emoji": "ü™µ"},
    "wax":            {"price": 1,  "name": "–í–æ—Å–∫",            "emoji": "üçØ"},
    "bread":          {"price": 1,   "name": "–•–ª–µ–±",             "emoji": "üçû"},
    "meat":           {"price": 1,  "name": "–ú—è—Å–æ",             "emoji": "üçñ"},
    "borsch":         {"price": 1,  "name": "–ë–æ—Ä—â",             "emoji": "ü•£"},
    "energy_drink":   {"price": 1,  "name": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫",        "emoji": "ü•§"},
    "coffee":         {"price": 1,  "name": "–ö–æ—Ñ–µ",             "emoji": "‚òï"},
    "cave_cases":     {"price": 1,  "name": "Cave Case",        "emoji": "üì¶"},
    "bomb":           {"price": 1, "name": "–ë–æ–º–±–∞",           "emoji": "üí£"}
}
MIN_PRICE = 1
CHUNK = 5
ITEM_IDS = list(SHOP_ITEMS.keys())
PAGES = [ITEM_IDS[i:i+CHUNK] for i in range(0, len(ITEM_IDS), CHUNK)]

def max_page() -> int:
    return len(PAGES) - 1

def get_discount_multiplier() -> float:
    wd = datetime.utcnow().weekday()
    if wd == 4:      # Friday
        return 0.8
    if wd == 5:
        return 0.6
    if wd == 6:      # Sunday
        return 0.45
    return 1.0

def calc_price(item_id: str, base: int, *, has_sale: bool) -> tuple[int, str]:
    if item_id in PICKAXES:
        return base, f"{base} –º–æ–Ω."
    mult = get_discount_multiplier() * (0.8 if has_sale else 1.0)
    final = max(MIN_PRICE, int(base * mult))
    label = f"{final} –º–æ–Ω."
    if mult < 1.0:
        label += f" (‚àí{int((1 - mult)*100)} %)"
    return final, label

def calc_tax(balance: int) -> tuple[float, str]:
    if balance > 100_000:
        return 1.0, "+0%"
    elif balance > 50_000:
        return 1.0, "+0%"
    elif balance > 25_000:
        return 1.0, "+15%"
    elif balance > 10_000:
        return 1.0, "+0%"
    return 1.0, "0%"

async def _send_shop_page(
    chat_id: int,
    *,
    page: int,
    bot_message: types.Message,
    user_id: Optional[int] = None,
    edit: bool = True,
):
    uid = user_id or bot_message.from_user.id
    prog = await get_progress(chat_id, uid)
    has_sale = prog.get("sale_voucher", False)
    balance = await get_money(chat_id, uid)

    kb = InlineKeyboardBuilder()
    for iid in PAGES[page]:
        meta = SHOP_ITEMS[iid]
        base_price, _ = calc_price(iid, meta["price"], has_sale=has_sale)
        tax_mult, tax_label = calc_tax(balance)
        final = max(MIN_PRICE, int(base_price * tax_mult))
        kb.button(
            text=f"{meta['emoji']} {meta['name']} ‚Äî {final} –º–æ–Ω. (–ù–∞–ª–æ–≥ {tax_label})",
            callback_data=f"buy:{iid}:{uid}"
        )
    kb.adjust(1)

    nav = InlineKeyboardBuilder()
    if page > 0:
        nav.button(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"shop:pg:{page-1}")
    nav.button(text=f"{page+1}/{len(PAGES)}", callback_data="noop")
    if page < len(PAGES)-1:
        nav.button(text="–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"shop:pg:{page+1}")
    nav_buttons_list = list(nav.buttons)
    nav.adjust(len(nav_buttons_list))
    kb.row(*nav_buttons_list)

    if edit:
        msg = await bot_message.edit_reply_markup(reply_markup=kb.as_markup())
    else:
        msg = await bot_message.answer_photo(
            photo=SHOP_IMG_ID,
            caption="üõí <b>–ú–∞–≥–∞–∑–∏–Ω</b> ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )

    register_msg_for_autodelete(chat_id, msg.message_id)

# ------------------------- –•–µ–Ω–¥–ª–µ—Ä—ã -------------------------

@router.message(Command("shop"))
async def shop_cmd(message: types.Message):
    await _send_shop_page(
        chat_id=message.chat.id,
        page=0,
        bot_message=message,
        user_id=message.from_user.id,
        edit=False
    )

@router.callback_query(F.data.startswith("shop:pg:"))
async def shop_pagination(callback: CallbackQuery):
    await callback.answer()
    _, _, page_str = callback.data.split(":")
    await _send_shop_page(
        chat_id=callback.message.chat.id,
        page=int(page_str),
        bot_message=callback.message,
        user_id=callback.from_user.id,
        edit=True
    )

@router.callback_query(F.data == "noop")
async def noop_cb(callback: CallbackQuery):
    await callback.answer()

@router.callback_query(F.data.startswith("buy:"))
async def shop_buy_callback(cb: CallbackQuery):
    await cb.answer()
    try:
        _, item_id, orig_uid = cb.data.split(":")
    except ValueError:
        return
    cid, uid = cb.message.chat.id, cb.from_user.id
    if uid != int(orig_uid):
        return await cb.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è üò†", show_alert=True)
    meta = SHOP_ITEMS.get(item_id)
    if not meta:
        return await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üòï", show_alert=True)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    kb = InlineKeyboardBuilder()
    for qty in [1, 5, 10, 25, 50]:
        kb.button(
            text=f"–ö—É–ø–∏—Ç—å √ó{qty}",
            callback_data=f"buyqty:{item_id}:{orig_uid}:{qty}"
        )
    kb.button(
        text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ‚Ä¶",
        callback_data=f"buyqtycustom:{item_id}:{orig_uid}"
    )
    kb.adjust(2)
    await cb.message.reply(
        f"–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {meta['emoji']}<b>{meta['name']}</b>:",
        parse_mode="HTML", reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("buyqty:"))
async def shop_buy_qty_callback(cb: CallbackQuery):
    await cb.answer()
    try:
        _, item_id, orig_uid, qty_str = cb.data.split(":")
        qty = int(qty_str)
    except Exception:
        return
    cid, uid = cb.message.chat.id, cb.from_user.id
    if uid != int(orig_uid):
        return await cb.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è üò†", show_alert=True)
    meta = SHOP_ITEMS.get(item_id)
    if not meta:
        return await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üòï", show_alert=True)
    prog = await get_progress(cid, uid)
    has_sale = prog.get("sale_voucher", False)
    balance = await get_money(cid, uid)
    base_price, _ = calc_price(item_id, meta["price"], has_sale=has_sale)
    tax_mult, tax_label = calc_tax(balance)
    final_price = int(base_price * qty * tax_mult)
    label = f"{final_price} –º–æ–Ω. (–ù–∞–ª–æ–≥ {tax_label})"
    if balance < final_price:
        return await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç üí∏", show_alert=True)
    await add_money(cid, uid, -final_price)
    if item_id == "cave_cases":
        await give_case_to_user(cid, uid, "cave_case", qty)
    else:
        await add_item(cid, uid, item_id, qty)
    if has_sale:
        await db.execute(
            "UPDATE progress_local SET sale_voucher = FALSE WHERE chat_id=:c AND user_id=:u",
            {"c": cid, "u": uid}
        )
    if prog.get("badge_active") == "moneyback":
        cashback = int(meta["price"] * qty * 0.30)
        await add_money(cid, uid, cashback)
        await cb.message.reply(f"üí∏ –ë–µ–π–¥–∂ –ú–æ–Ω–æ–±–∞–Ω–∫: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {cashback} –º–æ–Ω–µ—Ç!")
    await cb.message.reply(
        f"‚úÖ –ü–æ–∫—É–ø–∫–∞: {meta['emoji']}<b>{meta['name']}</b> √ó{qty} –∑–∞ {label}.",
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("buyqtycustom:"))
async def shop_buy_qty_custom_cb(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    try:
        _, item_id, orig_uid = cb.data.split(":")
    except Exception:
        return
    cid, uid = cb.message.chat.id, cb.from_user.id
    if uid != int(orig_uid):
        return await cb.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è üò†", show_alert=True)
    meta = SHOP_ITEMS.get(item_id)
    if not meta:
        return await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üòï", show_alert=True)
    await state.set_state(ShopBuy.waiting_for_qty)
    await state.update_data(item_id=item_id, orig_uid=orig_uid)
    # –ñ–¥—ë–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ reply
    msg = await cb.message.reply(
        f"–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ <b>{meta['emoji']} {meta['name']}</b> (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 1‚Äì999):",
        parse_mode="HTML"
    )
    register_msg_for_autodelete(cid, msg.message_id)

@router.message(ShopBuy.waiting_for_qty)
async def shop_buy_qty_text(message: types.Message, state: FSMContext):
    cid, uid = await cid_uid(message)
    data = await state.get_data()
    try:
        item_id = data["item_id"]
        orig_uid = int(data["orig_uid"])
    except Exception:
        await state.clear()
        return await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ /shop")
    if uid != orig_uid:
        return await message.reply("–≠—Ç–æ –Ω–µ –¥–ª—è —Ç–µ–±—è üò†")

    meta = SHOP_ITEMS.get(item_id)
    if not meta:
        await state.clear()
        return await message.reply("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")

    qty_str = message.text.strip()
    if not qty_str.isdigit() or not (1 <= int(qty_str) <= 999):
        return await message.reply("–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ 999)")
    qty = int(qty_str)
    prog = await get_progress(cid, uid)
    has_sale = prog.get("sale_voucher", False)
    balance = await get_money(cid, uid)
    base_price, _ = calc_price(item_id, meta["price"], has_sale=has_sale)
    tax_mult, tax_label = calc_tax(balance)
    final_price = int(base_price * qty * tax_mult)
    label = f"{final_price} –º–æ–Ω. (–ù–∞–ª–æ–≥ {tax_label})"
    if balance < final_price:
        await state.clear()
        return await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç üí∏")
    await add_money(cid, uid, -final_price)
    if item_id == "cave_cases":
        await give_case_to_user(cid, uid, "cave_case", qty)
    else:
        await add_item(cid, uid, item_id, qty)
    if has_sale:
        await db.execute(
            "UPDATE progress_local SET sale_voucher = FALSE WHERE chat_id=:c AND user_id=:u",
            {"c": cid, "u": uid}
        )
    if prog.get("badge_active") == "moneyback":
        cashback = int(meta["price"] * qty * 0.30)
        await add_money(cid, uid, cashback)
        await message.reply(f"üí∏ –ë–µ–π–¥–∂ –ú–æ–Ω–æ–±–∞–Ω–∫: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {cashback} –º–æ–Ω–µ—Ç!")
    await message.reply(
        f"‚úÖ –ü–æ–∫—É–ø–∫–∞: {meta['emoji']}<b>{meta['name']}</b> √ó{qty} –∑–∞ {label}.",
        parse_mode="HTML"
    )
    await state.clear()
