# bot/handlers/shop.py
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db_local import cid_uid, get_money, add_money, add_item
from bot.handlers.cases import give_case_to_user
from bot.handlers.items import ITEM_DEFS
from bot.utils.autodelete import register_msg_for_autodelete
from bot.assets import SHOP_IMG_ID

router = Router()

# ---------- –∫–∞—Ç–∞–ª–æ–≥ ----------
SHOP_ITEMS: dict[str, dict] = {
    "wood_handle":    {"price": 100,  "name": "–†—É–∫–æ—è—Ç—å",          "emoji": "ü™µ"},
    "wooden_pickaxe": {"price": 200,  "name": "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –∫–∏—Ä–∫–∞", "emoji": "üî®"},
    "iron_pickaxe":   {"price": 1000, "name": "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∫–∞",   "emoji": "‚õèÔ∏è"},
    "gold_pickaxe":   {"price": 2000, "name": "–ó–æ–ª–æ—Ç–∞—è –∫–∏—Ä–∫–∞",    "emoji": "‚ú®"},
    "torch_bundle":   {"price": 150,  "name": "–§–∞–∫–µ–ª",            "emoji": "üïØÔ∏è"},
    "bread":          {"price": 50,   "name": "–•–ª–µ–±",             "emoji": "üçû"},
    "meat":           {"price": 120,  "name": "–ú—è—Å–æ",             "emoji": "üçñ"},
    "borsch":         {"price": 300,  "name": "–ë–æ—Ä—â",             "emoji": "ü•£"},
    "energy_drink":   {"price": 170,  "name": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫",        "emoji": "ü•§"},
    "cave_cases":     {"price": 300,  "name": "Cave Case",        "emoji": "üì¶"},
}

PER_PAGE = 6
PAGES = list(                 # —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫—ñ–≤ id-—Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ
    [k for k, _ in chunk]
    for chunk in (zip(*[iter(SHOP_ITEMS.items())]*PER_PAGE),)
)
# –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫:
def max_page() -> int:
    return (len(SHOP_ITEMS) - 1) // PER_PAGE


# ------------------------------------------------------------------ helpers
async def _send_shop_page(chat_id: int, *, page: int,
                          bot_message: types.Message | None = None,
                          edit: bool = False):
    """–§–æ—Ä–º—É—î–º–æ –π –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –º–∞–≥–∞–∑–∏–Ω—É."""
    start = page * PER_PAGE
    chunk = list(SHOP_ITEMS.items())[start:start + PER_PAGE]

    kb = InlineKeyboardBuilder()
    for item_id, props in chunk:
        kb.button(
            text=f"{props['emoji']} {props['name']} ‚Äî {props['price']} –º–æ–Ω–µ—Ç",
            callback_data=f"buy:{item_id}"
        )
    kb.adjust(1)                           # –∫–æ–∂–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É

    # ‚îÄ‚îÄ‚îÄ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    nav = InlineKeyboardBuilder()
    if page > 0:
        nav.button(text="‚¨ÖÔ∏è", callback_data=f"shop:page:{page-1}")
    # –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞)
    nav.button(text=f"{page+1}/{max_page()+1}", callback_data="noop")
    if page < max_page():
        nav.button(text="‚û°Ô∏è", callback_data=f"shop:page:{page+1}")
    nav.adjust(len(nav.buttons))           # —É —Ä—è–¥ –æ–¥–∏–Ω –∑–∞ –æ–¥–Ω–∏–º

    # –ø—Ä–∏–∫—Ä—ñ–ø–ª—è—î–º–æ –Ω–∞–≤-–∫–Ω–æ–ø–∫–∏ –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ builder
    kb.row(*nav.buttons)

    if edit and bot_message:               # —Ä–µ–¥–∞–≥—É—î–º–æ —Å—Ç–∞—Ä–µ
        await bot_message.edit_reply_markup(reply_markup=kb.as_markup())
    else:                                  # –∞–±–æ —à–ª–µ–º–æ –Ω–æ–≤–µ
        sent = await bot.send_photo(
            chat_id,
            SHOP_IMG_ID,
            caption="üõí <b>–ú–∞–≥–∞–∑–∏–Ω</b> ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )
        register_msg_for_autodelete(chat_id, sent.message_id)

# ------------------------------------------------------------------ handlers
@router.message(Command("shop"))
async def shop_cmd(message: types.Message):
    await _send_shop_page(message.chat.id, page=0, bot_message=message, edit=False)

# –ø–µ—Ä–µ–≥–æ—Ä—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫
@router.callback_query(F.data.startswith("shop:pg:"))
async def shop_pagination(callback: CallbackQuery):
    _, _, page_str = callback.data.split(":")
    await callback.answer()
    await _send_shop_page(callback.message.chat.id,
                          page=int(page_str),
                          bot_message=callback.message,
                          edit=True)

# –≥–ª—É—à–∏–ª–∫–∞ –¥–ª—è ¬´{n/m}¬ª-–∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data == "noop")
async def noop_cb(callback: CallbackQuery):
    await callback.answer()

# –ø–æ–∫—É–ø–∫–∞
@router.callback_query(F.data.startswith("buy:"))
async def shop_buy_callback(callback: CallbackQuery):
    await callback.answer()
    cid, uid = callback.message.chat.id, callback.from_user.id
    _, item_id = callback.data.split(":", 1)

    if (item := SHOP_ITEMS.get(item_id)) is None:
        return await callback.message.reply("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")

    balance = await get_money(cid, uid)
    if balance < item["price"]:
        return await callback.message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç üí∏")

    await add_money(cid, uid, -item["price"])
    if item_id == "cave_cases":
        await give_case_to_user(cid, uid, 1)
    else:
        await add_item(cid, uid, item_id, 1)

    msg = await callback.message.reply(
        f"–ü–æ–∫—É–ø–∫–∞: {item['emoji']}<b>{item['name']}</b> –∑–∞ {item['price']}‚Ç¥ ‚úîÔ∏è",
        parse_mode="HTML")
    register_msg_for_autodelete(callback.message.chat.id, msg.message_id)
