# bot/handlers/shop.py
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from itertools import islice
from typing import Optional
from datetime import datetime

from bot.db_local import cid_uid, get_money, add_money, add_item, get_progress, db
from bot.handlers.cases import give_case_to_user
from bot.handlers.cave_clash import add_clash_points
from bot.handlers.items import ITEM_DEFS
from bot.handlers.use import PICKAXES
from bot.utils.autodelete import register_msg_for_autodelete
from bot.assets import SHOP_IMG_ID

router = Router()

# ---------- –∫–∞—Ç–∞–ª–æ–≥ ----------
SHOP_ITEMS: dict[str, dict] = {
    "wood_handle":    {"price": 80,  "name": "–†—É–∫–æ—è—Ç—å",          "emoji": "ü™µ"},
    "wax":            {"price": 90,  "name": "–í–æ—Å–∫",            "emoji": "üçØ"},
    "bread":          {"price": 40,   "name": "–•–ª–µ–±",             "emoji": "üçû"},
    "meat":           {"price": 80,  "name": "–ú—è—Å–æ",             "emoji": "üçñ"},
    "borsch":         {"price": 120,  "name": "–ë–æ—Ä—â",             "emoji": "ü•£"},
    "energy_drink":   {"price": 40,  "name": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫",        "emoji": "ü•§"},
    "coffee":         {"price": 80,  "name": "–ö–æ—Ñ–µ",             "emoji": "‚òï"},
    "cave_cases":     {"price": 300,  "name": "Cave Case",        "emoji": "üì¶"},
    "bomb":           {"price": 100, "name": "–ë–æ–º–±–∞",           "emoji": "üí£"}
}

ITEMS_PER_PAGE = 6 # This variable is not currently used to chunk PAGES.
                   # CHUNK variable below is used. Consider consolidating or clarifying.

# ‚¨áÔ∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á—ñ–≤-—Ç–æ–≤–∞—Ä—ñ–≤, –ø–æ–¥—ñ–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏  ---------------------------
CHUNK = 5 # Number of items per page
ITEM_IDS = list(SHOP_ITEMS.keys())
PAGES = [ITEM_IDS[i:i+CHUNK] for i in range(0, len(ITEM_IDS), CHUNK)]
# ---------------------------------------------------------------------------

def max_page() -> int:
    """Returns the index of the last page."""
    return len(PAGES) - 1

# ‚îÄ‚îÄ‚îÄ helpers  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_discount_multiplier() -> float:
    """–ü—è—Ç–Ω–∏—Ü–∞ ‚àí20 %, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚àí40 %, –∏–Ω–∞—á–µ –±–µ–∑ —Å–∫–∏–¥–∫–∏."""
    wd = datetime.utcnow().weekday()        # 0-–ø–æ–Ω, 4-–ø—Ç, 6-–≤—Å
    if wd == 4:      # Friday
        return 0.8
    if wd == 5:
        return 0.6
    if wd == 6:      # Sunday
        return 0.45
    return 1.0


def calc_price(item_id: str, base: int, *, has_sale: bool) -> tuple[int, str]:
    """–í–µ—Ä–Ω—ë—Ç (—á–∏—Å–ª–æ, –ø–æ–¥–ø–∏—Å—å). –ö–∏—Ä–∫–∏ –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –∞–∫—Ü–∏—è—Ö."""
    if item_id in PICKAXES:
        return base, f"{base} –º–æ–Ω."

    # ‚Üê –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞: –æ–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å = —Å–∫–∏–¥–∫–∞_–¥–Ω—è √ó —Å–∫–∏–¥–∫–∞_–≤–∞—É—á–µ—Ä–∞
    mult = get_discount_multiplier() * (0.8 if has_sale else 1.0)

    final = int(base * mult)
    label = f"{final} –º–æ–Ω."
    if mult < 1.0:
        label += f" (‚àí{int((1 - mult)*100)} %)"
    return final, label
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üõç –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è _send_shop_page:
async def _send_shop_page(
    chat_id: int,
    *,
    page: int,
    bot_message: types.Message,
    user_id: Optional[int] = None,
    edit: bool = True,
):
    uid = user_id or bot_message.from_user.id
    prog = await get_progress(chat_id, uid)
    has_sale = prog.get("sale_voucher", False)

    kb = InlineKeyboardBuilder()
    for iid in PAGES[page]:
        meta = SHOP_ITEMS[iid]
        price_val, price_str = calc_price(iid, meta["price"], has_sale=has_sale)
        kb.button(
            text=f"{meta['emoji']} {meta['name']} ‚Äî {price_str}",
            callback_data=f"buy:{iid}:{uid}"
        )
    kb.adjust(1)

    nav = InlineKeyboardBuilder()
    if page > 0:
        nav.button(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"shop:pg:{page-1}")
    nav.button(text=f"{page+1}/{len(PAGES)}", callback_data="noop")
    if page < len(PAGES)-1:
        nav.button(text="–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"shop:pg:{page+1}")
    nav_buttons_list = list(nav.buttons)
    nav.adjust(len(nav_buttons_list))
    kb.row(*nav_buttons_list)

    if edit:
        msg = await bot_message.edit_reply_markup(reply_markup=kb.as_markup())
    else:
        msg = await bot_message.answer_photo(
            photo=SHOP_IMG_ID,
            caption="üõí <b>–ú–∞–≥–∞–∑–∏–Ω</b> ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )

    register_msg_for_autodelete(chat_id, msg.message_id)

# ------------------------------------------------------------------ handlers

# Handler for initial /shop command
@router.message(Command("shop"))
async def shop_cmd(message: types.Message):
   await _send_shop_page(
    chat_id=message.chat.id,
    page=0,
    bot_message=message,
    user_id=message.from_user.id,  # ‚Üê –∫–ª—é—á–æ–≤–µ!
    edit=False
)

# Handler for pagination buttons (e.g., "shop:pg:0", "shop:pg:1")
@router.callback_query(F.data.startswith("shop:pg:"))
async def shop_pagination(callback: CallbackQuery):
    await callback.answer() # Acknowledge the callback query
    _, _, page_str = callback.data.split(":") # Split to get the page number
    await _send_shop_page(
        chat_id=callback.message.chat.id,
        page=int(page_str),
        bot_message=callback.message,
        user_id=callback.from_user.id,  # ‚Üê –∫–ª—é—á–æ–≤–µ!
        edit=True
    )

# Handler for the "noop" button (e.g., the page number button)
@router.callback_query(F.data == "noop")
async def noop_cb(callback: CallbackQuery):
    """Callback for the non-functional page number button."""
    await callback.answer()

# Handler for "buy" buttons
@router.callback_query(F.data.startswith("buy:"))
async def shop_buy_callback(cb: CallbackQuery):
    await cb.answer()
    cid, uid = cb.message.chat.id, cb.from_user.id

    # ‚îÄ‚îÄ —Ä–∞–∑–±–æ—Ä callback_data
    try:
        _, item_id, orig_uid = cb.data.split(":")
    except ValueError:
        return
    if uid != int(orig_uid):
        return await cb.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è üò†", show_alert=True)

    # ‚îÄ‚îÄ —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ?
    meta = SHOP_ITEMS.get(item_id)
    if not meta:
        return await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üòï", show_alert=True)

    # ‚îÄ‚îÄ —Ü–µ–Ω–∞ —Å —É—á—ë—Ç–æ–º —Å–∫–∏–¥–æ–∫
    prog = await get_progress(cid, uid)
    has_sale = prog.get("sale_voucher", False)
    price_val, price_label = calc_price(item_id, meta["price"], has_sale=has_sale)

    # ‚îÄ‚îÄ –¥–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∞–µ—Ç?
    if await get_money(cid, uid) < price_val:
        return await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç üí∏", show_alert=True)

    # ‚îÄ‚îÄ —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    await add_money(cid, uid, -price_val)

    # ‚îÄ‚îÄ –≤—ã–¥–∞—ë–º —Ç–æ–≤–∞—Ä / –∫–µ–π—Å
    if item_id == "cave_cases":
        await give_case_to_user(cid, uid, "cave_case", 1)
    else:
        await add_item(cid, uid, item_id, 1)

    # ‚îÄ‚îÄ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –≤–∞—É—á–µ—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–ª ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    if has_sale:
        await db.execute(
            "UPDATE progress_local SET sale_voucher = FALSE "
            "WHERE chat_id=:c AND user_id=:u",
            {"c": cid, "u": uid}
        )

    # ‚îÄ‚îÄ –±–µ–π–¥–∂ ¬´moneyback¬ª
    if prog.get("badge_active") == "moneyback":
        cashback = int(meta["price"] * 0.30)
        await add_money(cid, uid, cashback)
        await cb.message.reply(f"üí∏ –ë–µ–π–¥–∂ –ú–æ–Ω–æ–±–∞–Ω–∫: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {cashback} –º–æ–Ω–µ—Ç!")

    # ‚îÄ‚îÄ +Clash-–æ—á–∫–∏
    await add_clash_points(cid, uid, 0)

    # ‚îÄ‚îÄ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    confirm = await cb.message.reply(
        f"‚úÖ –ü–æ–∫—É–ø–∫–∞: {meta['emoji']}<b>{meta['name']}</b> –∑–∞ {price_val} –º–æ–Ω–µ—Ç.",
        parse_mode="HTML"
    )
    register_msg_for_autodelete(cid, confirm.message_id)