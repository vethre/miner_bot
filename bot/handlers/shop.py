# bot/handlers/shop.py
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db_local import cid_uid, get_money, add_money, add_item
from bot.handlers.items import ITEM_DEFS

router = Router()

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —É –º–∞–≥–∞–∑–∏–Ω—ñ
SHOP_ITEMS = {
    "wood_handle":    {"price": 100,  "name": "–†—É–∫–æ—è—Ç—å",         "emoji": "ü™µ"},
    "wooden_pickaxe": {"price": 200,  "name": "–î–µ—Ä–µ–≤‚Äô—è–Ω–∞ –∫–∏—Ä–∫–∞", "emoji": "üî®"},
    "iron_pickaxe":   {"price": 1000, "name": "–ó–∞–ª—ñ–∑–Ω–∞ –∫–∏—Ä–∫–∞",   "emoji": "‚õèÔ∏è"},
    "gold_pickaxe":   {"price": 2000, "name": "–ó–æ–ª–æ—Ç–∞ –∫–∏—Ä–∫–∞",    "emoji": "‚ú®"},
    "bread":          {"price": 50,   "name": "–•–ª—ñ–±",            "emoji": "üçû", "hunger": 30},
    "meat":           {"price": 120,  "name": "–ú‚Äô—è—Å–æ",           "emoji": "üçñ", "hunger": 60},
}

@router.message(Command("shop"))
async def shop_cmd(message: types.Message):
    cid, uid = await cid_uid(message)
    # –ø–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ —î –∑–∞–ø–∏—Å —É progress_local
    # (optional) init_local already –∑—Ä–æ–±–∏–≤ —Ü–µ
    
    builder = InlineKeyboardBuilder()
    for item_id, props in SHOP_ITEMS.items():
        text = f"{props['emoji']} {props['name']} ‚Äî {props['price']} –º–æ–Ω–µ—Ç"
        # –¥–æ–¥–∞—î–º original uid, —â–æ–± –ª–∏—à–µ –≤—ñ–Ω –º—ñ–≥ –∫—É–ø–∏—Ç–∏
        builder.button(
            text=text,
            callback_data=f"buy:{item_id}:{uid}"
        )
    builder.adjust(1)

    await message.reply(
        "üõí <b>–ú–∞–≥–∞–∑–∏–Ω</b> ‚Äî –æ–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("buy:"))
async def shop_buy_callback(callback: CallbackQuery):
    await callback.answer()
    cid = callback.message.chat.id
    data = callback.data.split(":", 2)
    # —Ñ–æ—Ä–º–∞—Ç: ['buy', item_id, orig_uid]
    if len(data) != 3:
        return
    _, item_id, orig_uid = data
    orig_uid = int(orig_uid)
    # —Ç—ñ–ª—å–∫–∏ —Ç–æ–π, —Ö—Ç–æ –≤—ñ–¥–∫—Ä–∏–≤ –º–∞–≥–∞–∑–∏–Ω
    if callback.from_user.id != orig_uid:
        return await callback.answer("–¶—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±–µ", show_alert=True)

    # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –ª–æ–∫–∞–ª—å–Ω–∏–π
    balance = await get_money(cid, orig_uid)
    item = SHOP_ITEMS.get(item_id)
    if not item:
        return await callback.message.reply("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòï")
    price = item["price"]
    if balance < price:
        return await callback.message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç üí∏")

    # —Å–ø–∏—Å—É—î–º–æ –≥—Ä–æ—à—ñ –π –¥–æ–¥–∞—î–º–æ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
    await add_money(cid, orig_uid, -price)
    await add_item(cid, orig_uid, item_id, 1)

    await callback.message.reply(
        f"–¢–∏ –ø—Ä–∏–¥–±–∞–≤ {item['emoji']}<b>{item['name']}</b> –∑–∞ {price} –º–æ–Ω–µ—Ç! üéâ",
        parse_mode="HTML"
    )
