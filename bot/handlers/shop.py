# bot/handlers/shop.py
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db_local import cid_uid, get_money, add_money, add_item
from bot.handlers.items import ITEM_DEFS
from bot.handlers.cases import give_case_to_user
from bot.assets import SHOP_IMG_ID
from bot.handlers.cases import give_case_to_user
from bot.utils.autodelete import register_msg_for_autodelete

router = Router()

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —É –º–∞–≥–∞–∑–∏–Ω—ñ
SHOP_ITEMS = {
    "wood_handle":    {"price": 100,  "name": "–†—É–∫–æ—è—Ç—å",         "emoji": "ü™µ"},
    "wooden_pickaxe": {"price": 200,  "name": "–î–µ—Ä–µ–≤—è–Ω–∞—è –∫–∏—Ä–∫–∞", "emoji": "üî®"},
    "iron_pickaxe":   {"price": 1000, "name": "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∫–∞",   "emoji": "‚õèÔ∏è"},
    "gold_pickaxe":   {"price": 2000, "name": "–ó–æ–ª–æ—Ç–∞—è –∫–∏—Ä–∫–∞",    "emoji": "‚ú®"},
    "torch_bundle":   {"price": 150, "name": "–§–∞–∫–µ–ª",    "emoji": "üïØÔ∏è"},
    "bread":          {"price": 50,   "name": "–•–ª–µ–±",            "emoji": "üçû", "hunger": 20},
    "meat":           {"price": 120,  "name": "–ú—è—Å–æ",           "emoji": "üçñ", "hunger": 50},
    "borsch":         {"price": 300,  "name": "–ë–æ—Ä—â",            "emoji": "ü•£", "hunger": 100},
    "energy_drink":   {"price": 170, "name": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫",        "emoji": "ü•§", "energy": 40},
    "cave_cases":     {"price": 300, "name": "Cave Case",        "emoji": "üì¶"},
}

@router.message(Command("shop"))
async def shop_cmd(message: types.Message):
    cid, uid = await cid_uid(message)

    builder = InlineKeyboardBuilder()
    for item_id, props in SHOP_ITEMS.items():
        text = f"{props['emoji']} {props['name']} ‚Äî {props['price']} –º–æ–Ω–µ—Ç"
        builder.button(text=text, callback_data=f"buy:{item_id}")
    builder.adjust(1)

    msg = await message.answer_photo(
        photo=SHOP_IMG_ID,
        caption="üõí <b>–ú–∞–≥–∞–∑–∏–Ω</b> ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",
        parse_mode="HTML",
        reply_to_message_id=message.message_id,
        reply_markup=builder.as_markup()
    )
    register_msg_for_autodelete(message.chat.id, msg.message_id)
    """
    await message.reply(
        "üõí <b>–ú–∞–≥–∞–∑–∏–Ω</b> ‚Äî –æ–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    ) """

@router.callback_query(F.data.startswith("buy:"))
async def shop_buy_callback(callback: CallbackQuery):
    await callback.answer()
    cid, uid = callback.message.chat.id, callback.from_user.id
    _, item_id = callback.data.split(":", 1)

    item = SHOP_ITEMS.get(item_id)
    if not item:
        return await callback.message.reply("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")

    balance = await get_money(cid, uid)
    price = item["price"]
    if balance < price:
        return await callback.message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç üí∏")

    await add_money(cid, uid, -price)
    if item_id == "cave_cases":
        await give_case_to_user(cid, uid, 1)
    else:
        await add_item(cid, uid, item_id, 1)

    msg = await callback.message.reply(
        f"–¢—ã –∫—É–ø–∏–ª {item['emoji']}<b>{item['name']}</b> –∑–∞ {price} –º–æ–Ω–µ—Ç! üéâ",
        parse_mode="HTML"
    )
    register_msg_for_autodelete(callback.message.chat.id, msg.message_id)
