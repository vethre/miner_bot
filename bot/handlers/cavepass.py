# bot/handlers/cavepass.py

import datetime as dt
import json
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db_local import cid_uid, get_progress, add_money, add_item, db, get_money
from bot.handlers.items import ITEM_DEFS
from bot.assets import PASS_IMG_ID
from bot.handlers.use import PICKAXES
from bot.utils.unlockachievement import unlock_achievement

router = Router()

PASS_PRICE_COINS = 1000           # —è–∫—â–æ –≤—Å–µ –∂ —Ö–æ—á–µ—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –∑–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –≤–∞–ª—é—Ç—É
PASS_PRICE_UAH = 53               # —Ä–µ–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –≤ –≥—Ä–∏–≤–Ω—è—Ö
PAYMENT_LINK = "https://send.monobank.ua/jar/A8ew2aMM3S"  # –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à

PASS_DURATION_DAYS = 20
EX_KEY = "proto_eonite_pickaxe"
EX_NAME = "–ü—Ä–æ—Ç–æ—Ç–∏–ø –≠–æ–Ω–∏—Ç–æ–≤–æ–π –ö–∏—Ä–∫–∏"
EX_EMOJI = "üßø"
ITEM_DEFS[EX_KEY] = {"name": EX_NAME, "emoji": EX_EMOJI}

@router.message(Command("cavepass"))
async def cavepass_cmd(message: types.Message):
    cid, uid = await cid_uid(message)
    prog = await get_progress(cid, uid)
    now = dt.datetime.utcnow()
    expires = prog.get("pass_expires")
    has = prog.get("cave_pass", False)

    builder = InlineKeyboardBuilder()
    if not has or (expires and expires < now):
        # –∫–Ω–æ–ø–∫–∞ –Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—é –æ–ø–ª–∞—Ç—É
        builder.button(
            text=f"üí≥ –ö—É–ø–∏—Ç—å –∑–∞ ‚Ç¥{PASS_PRICE_UAH}",
            url=PAYMENT_LINK
        )
        builder.adjust(1)
        text = (
            "<b>–°–ö–û–†–û</b> ‚Äî 7.7.2025\n"
            "<b>Cave Pass</b> ‚Äî –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –≠–æ–Ω–∏—Ç–∞:\n"
            f" ‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è {EX_EMOJI} <b>{EX_NAME}</b>\n"
            " ‚Ä¢ √ó1.5 XP –ø—Ä–∏ –¥–æ–±—ã–≤–∞–Ω–∏–∏\n"
            " ‚Ä¢ +10 –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ XP –∫–∞–∂–¥—ã–π —á–∞—Å!\n"
            " ‚Ä¢ –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞ –ø—É—Ç–∏ Pass\n"
            f"<i>–¶–µ–Ω–∞: {PASS_PRICE_UAH} ‚Ç¥ (–æ–ø–ª–∞—Ç–∞ –≤–Ω–µ)</i>\n"
            "<i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ —á–µ—Ä–µ–∑ /report '—Å–æ–æ–±—â–µ–Ω–∏–µ'</i>"
        )
    else:
        days = max(0, (expires.date() - now.date()).days)
        text = (
            "<b>–í–∞—à Cave Pass –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n"
            f"–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –∫–∏—Ä–∫–∞: {EX_EMOJI} <b>{EX_NAME}</b>\n"
            f"–¢–µ—Ä–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏—è –æ—Å—Ç–∞–ª—Å—è: <b>{days} –¥–Ω.</b>"
        )
    await message.answer_photo(
        PASS_IMG_ID,
        caption=text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

# —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
ADMINS = {700929765, 988127866}

@router.message(Command("activate_pass"))
async def activate_pass_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")

    parts = message.text.strip().split()
    if len(parts) != 3:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /activate_pass 'user_id' 'chat_id'")

    try:
        uid = int(parts[1])
        cid = int(parts[2])
    except ValueError:
        return await message.reply("‚ùå user_id –∏ chat_id –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

    pick_key = "crystal_pickaxe"
    if pick_key not in PICKAXES:
        return await message.reply("‚ùå –ö–∏—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    exp = dt.datetime(2025, 7, 27, 21, 59, 59)
    pick_dur = PICKAXES[pick_key]["dur"]
    dur_map = json.dumps({pick_key: pick_dur})
    dur_max_map = json.dumps({pick_key: pick_dur})

    # Update progress_local table
    await db.execute(
        """
        UPDATE progress_local
           SET cave_pass = TRUE,
               pass_expires = :exp,
               current_pickaxe = :pick,
               pick_dur_map = :dmap,
               pick_dur_max_map = :dmax
         WHERE chat_id = :cid AND user_id = :uid
        """,
        {
            "exp": exp,
            "pick": pick_key,
            "dmap": dur_map,
            "dmax": dur_max_map,
            "cid": cid,
            "uid": uid
        }
    )

    # Update pass_progress table - Set is_premium to TRUE
    await db.execute(
        """
        UPDATE pass_progress
           SET is_premium = TRUE
         WHERE chat_id = :cid AND user_id = :uid
        """,
        {"cid": cid, "uid": uid}
    )

    await db.execute(
        """
        INSERT INTO inventory_local (chat_id, user_id, item, qty)
             VALUES (:cid, :uid, :item, 1)
           ON CONFLICT DO NOTHING
        """,
        {"cid": cid, "uid": uid, "item": pick_key}
    )

    emoji = PICKAXES[pick_key]["emoji"]
    name = PICKAXES[pick_key]["name"]

    await unlock_achievement(cid, uid, "pre_pass")

    await message.reply(
        f"‚úÖ Cave Pass –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è user_id={uid} –≤ —á–∞—Ç–µ {cid} –¥–æ {exp.date()}\n"
        f"{emoji} –í—ã–¥–∞–Ω–∞ –∫–∏—Ä–∫–∞: <b>{name}</b> ({pick_dur}/{pick_dur})",
        parse_mode="HTML"
    )
