# bot/handlers/cavepass.py

import datetime as dt
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db_local import cid_uid, get_progress, add_money, add_item, db, get_money
from bot.handlers.items import ITEM_DEFS

router = Router()

PASS_PRICE_COINS = 1000           # —è–∫—â–æ –≤—Å–µ –∂ —Ö–æ—á–µ—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –∑–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –≤–∞–ª—é—Ç—É
PASS_PRICE_UAH = 1               # —Ä–µ–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –≤ –≥—Ä–∏–≤–Ω—è—Ö
PAYMENT_LINK = "https://send.monobank.ua/jar/A8ew2aMM3S"  # –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à

PASS_DURATION_DAYS = 30
EX_KEY = "crystal_pickaxe"
EX_NAME = "–ö—Ä–∏—Å—Ç–∞–ª—å–Ω–∞ –∫–∏—Ä–∫–∞"
EX_EMOJI = "üíé"
ITEM_DEFS[EX_KEY] = {"name": EX_NAME, "emoji": EX_EMOJI}

@router.message(Command("cavepass"))
async def cavepass_cmd(message: types.Message):
    cid, uid = await cid_uid(message)
    prog = await get_progress(cid, uid)
    now = dt.datetime.utcnow()
    expires = prog.get("pass_expires")
    has = prog.get("cave_pass", False)

    builder = InlineKeyboardBuilder()
    if not has or (expires and expires < now):
        # –∫–Ω–æ–ø–∫–∞ –Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—é –æ–ø–ª–∞—Ç—É
        builder.button(
            text=f"üí≥ –ö—É–ø–∏—Ç–∏ –∑–∞ ‚Ç¥{PASS_PRICE_UAH}",
            url=PAYMENT_LINK
        )
        builder.adjust(1)
        text = (
            "<b>Cave Pass</b> ‚Äî 30 –¥–Ω—ñ–≤ –ø—Ä–µ–º—ñ–∞–ª—å–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤:\n"
            f" ‚Ä¢ –ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞ –∫–∏—Ä–∫–∞ {EX_EMOJI} <b>{EX_NAME}</b>\n"
            " ‚Ä¢ √ó1.5 XP –ø—Ä–∏ –∫–æ–ø–∞–Ω–Ω—ñ\n"
            " ‚Ä¢ +5 –ø–∞—Å–∏–≤–Ω–æ–≥–æ XP —â–æ–¥–Ω—è\n\n"
            f"<i>–¶—ñ–Ω–∞: {PASS_PRICE_UAH} ‚Ç¥ (–æ–ø–ª–∞—Ç–∞ –∑–æ–≤–Ω—ñ)</i>\n"
            "<i>–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –º–µ–Ω—ñ —É PM –∞–±–æ –≤ –≥—Ä—É–ø—ñ /activate_pass</i>"
        )
    else:
        days = max(0, (expires.date() - now.date()).days)
        text = (
            "<b>–í–∞—à Cave Pass –∞–∫—Ç–∏–≤–Ω–∏–π!</b>\n"
            f"–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞ –∫–∏—Ä–∫–∞: {EX_EMOJI} <b>{EX_NAME}</b>\n"
            f"–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –∑–∞–ª–∏—à–∏–≤—Å—è: <b>{days} –¥–Ω.</b>"
        )

    await message.reply(text, parse_mode="HTML", reply_markup=builder.as_markup())

# —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
ADMINS = {700929765, 988127866}

@router.message(Command("activate_pass"))
async def activate_pass_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤")
    parts = message.text.split()
    if len(parts) != 2:
        return await message.reply("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /activate_pass <user_id –∞–±–æ @username>")
    target = parts[1]
    # –∑–Ω–∞–π–¥–µ–º–æ uid
    if target.startswith("@"):
        try:
            member = await message.bot.get_chat_member(message.chat.id, target)
            uid = member.user.id
        except:
            return await message.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        if not target.isdigit():
            return await message.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
        uid = int(target)

    cid = message.chat.id if message.chat.type in ("group","supergroup") else 0
    now = dt.datetime.utcnow()
    exp = now + dt.timedelta(days=PASS_DURATION_DAYS)

    # —Å–ø–∏—Å—É–≤–∞—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –≤–∞–ª—é—Ç—É –Ω–µ –±—É–¥–µ–º–æ, —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤—É—î–º–æ
    await db.execute(
        """
        UPDATE progress_local
           SET cave_pass = TRUE,
               pass_expires = :exp,
               current_pickaxe = :pick,
               pick_dur = pick_dur_max
         WHERE chat_id=:c AND user_id=:u
        """,
        {"exp": exp, "pick": EX_KEY, "c": cid, "u": uid}
    )
    # –Ω–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –¥–æ–¥–∞–º–æ –∫–∏—Ä–∫—É
    await db.execute(
        """
        INSERT INTO inventory_local(chat_id,user_id,item,qty)
             VALUES(:c,:u,:pick,1)
           ON CONFLICT DO NOTHING
        """,
        {"c": cid, "u": uid, "pick": EX_KEY}
    )

    await message.reply(
        f"‚úÖ Cave Pass –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–ª—è user_id={uid} –¥–æ {exp.date()}",
        parse_mode="HTML"
    )
