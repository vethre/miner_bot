# bot/utils/profile_card.py   (¬´–æ–±–ª–µ–≥—á—ë–Ω–Ω–∞—è¬ª –≤–µ—Ä—Å–∏—è)

from __future__ import annotations
from io import BytesIO
from pathlib import Path
from aiogram.types import BufferedInputFile
from PIL import Image, ImageDraw, ImageFont, ImageOps

ROOT     = Path(__file__).parent.parent
ASSETS   = ROOT / "assets"
BG_PATH  = ASSETS / "profile_new.jpg"          # —Ç–æ—Ç —Å–∞–º—ã–π –ø—É—Å—Ç–æ–π –º–∞–∫–µ—Ç
F_MED    = ImageFont.truetype(ASSETS / "Montserrat-Medium.ttf", 32)
F_BIG    = ImageFont.truetype(ASSETS / "Montserrat-SemiBold.ttf", 42)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _center(draw: ImageDraw.ImageDraw, txt: str, font, x0: int, x1: int, y: int):
    """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å txt –ø–æ —Ü–µ–Ω—Ç—Ä—É –º–µ–∂–¥—É x0 –∏ x1."""
    w, h = draw.textbbox((0, 0), txt, font=font)[2:]
    draw.text((x0 + (x1 - x0 - w)//2, y), txt, font=font, fill="white")

async def render_profile_card(bot, uid: int, nickname: str,
                              level: int, xp: int, next_xp: int,
                              energy: int, hunger: int,
                              money: int, fire: int,
                              pick_dur: str, caves: int) -> BufferedInputFile:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç BufferedInputFile —Å –≥–æ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è."""

    # 1Ô∏è‚É£ —Ñ–æ–Ω-—à–∞–±–ª–æ–Ω
    bg = Image.open(BG_PATH).convert("RGBA")
    draw = ImageDraw.Draw(bg)

    # 2Ô∏è‚É£ –∞–≤–∞—Ç–∞—Ä (–∫—Ä—É–≥ 256√ó256) ‚Üí –ø–æ–∑–∏—Ü–∏—è (137,120) –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
    avatar = Image.new("RGBA", (256, 256), (30, 30, 30, 255))
    photos = await bot.get_user_profile_photos(uid, limit=1)
    if photos.total_count:
        file_id  = photos.photos[0][-1].file_id
        f        = await bot.download_file((await bot.get_file(file_id)).file_path)
        avatar   = Image.open(f).convert("RGBA")
    avatar = ImageOps.fit(avatar, (256, 256), Image.Resampling.LANCZOS)
    mask   = Image.new("L", (256, 256), 0)
    ImageDraw.Draw(mask).ellipse((0, 0, 256, 256), fill=255)
    bg.paste(avatar, (137, 120), mask)

    # 3Ô∏è‚É£ –Ω–∏–∫ (–ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–∞–Ω–µ–ª–∏ 530 px) ‚Äì –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–¥–±–∏—Ä–∞–ª–∏—Å—å –≤—Ä—É—á–Ω—É—é
    _center(draw, nickname, F_BIG, 0, 530, 400)

    # 4Ô∏è‚É£ —Å—Ç—Ä–æ–∫–∏-–º–µ—Ç—Ä–∏–∫–∏ (—Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∫–æ–Ω–æ–∫ ‚Äì —Å–∞–º–∏ –ø–ª–∞—à–∫–∏ —É–∂–µ –Ω–∞ —Ñ–æ–Ω–µ)
    #    –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã Y ‚Äì –∏–∑ –º–∞–∫–µ—Ç–∞; X-—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –ø–∞–Ω–µ–ª–∏
    rows = [
        (f"–£–†–û–í–ï–ù–¨ {level}",            475),
        (f"{xp}/{next_xp}",             545),
        (f"{energy}/100",               637),
        (f"{hunger}/100",               707),
    ]
    for txt, y in rows:
        _center(draw, txt, F_MED, 0, 530, y)

    # 5Ô∏è‚É£ –º–∏–Ω–∏-–±–ª–æ–∫ (–¥–≤–∞ —Ä—è–¥–∞ –ø–æ 2, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–¥ –º–∞–∫–µ—Ç)
    mini = [
        (f"{money//1000}k",  825,  70),   # –¥–µ–Ω—å–≥–∏
        (str(fire),          825, 300),   # üî•
        (pick_dur,           905,  70),   # –∫–∏—Ä–∫–∞
        (str(caves),         905, 300),   # –∫–µ–π—Å—ã
    ]
    for txt, y, x in mini:
        draw.text((x, y), txt, font=F_MED, fill="white")

    # 6Ô∏è‚É£ ‚Üí –±—É—Ñ–µ—Ä
    buf = BytesIO()
    bg.save(buf, format="PNG")
    return BufferedInputFile(buf.getvalue(), filename="profile.png")
