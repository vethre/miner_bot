from datetime import datetime, timedelta
import random
from aiogram import Bot
from bot.db_local import db  # —Ç–≤–æ—è –æ–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –ë–î

AFK_PHRASES = [
    "üë∑ {m}, —Ç–≤–æ–π –Ω–∞—á–∞–ª—å–Ω–∏–∫ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω. –£–∂–µ —Å—É—Ç–∫–∏ —Ç—ã –Ω–µ —Å–ø—É—Å–∫–∞–µ—à—å—Å—è –≤ —à–∞—Ö—Ç—É!",
    "üìâ {m}, –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ø–∞–ª–∞ –¥–æ –Ω—É–ª—è. –ü–æ—Ä–∞ –∫–æ–ø–∞—Ç—å!",
    "üò¥ {m}, –≤—á–µ—Ä–∞ —Ç—ã –Ω–µ –∫–æ–ø–∞–ª –Ω–∏ —Ä–∞–∑—É. –ü—Ä–æ—Å—ã–ø–∞–π—Å—è!",
    "üõèÔ∏è {m}, —Ä—É–¥–∞ —Å–∞–º–∞ —Å–µ–±—è –Ω–µ –≤—ã–∫–æ–ø–∞–µ—Ç!",
]

async def check_afk_and_warn(bot: Bot) -> None:
    """–ü—ñ–Ω–≥—É—î–º–æ —é–∑–µ—Ä—ñ–≤, —É —è–∫–∏—Ö mining_end < (now - 1 day)."""
    cutoff = datetime.utcnow() - timedelta(days=1)

    rows = await db.fetch_all(
        """
        SELECT chat_id, user_id
          FROM progress_local
         WHERE mining_end IS NOT NULL
           AND mining_end < :cut
        """,
        {"cut": cutoff},
    )

    for row in rows:
        try:
            member = await bot.get_chat_member(row["chat_id"], row["user_id"])
            mention = (
                f"@{member.user.username}"
                if member.user.username
                else f'<a href="tg://user?id={row["user_id"]}">{member.user.full_name}</a>'
            )
            text = random.choice(AFK_PHRASES).format(m=mention)
            await bot.send_message(row["chat_id"], text, parse_mode="HTML")
        except Exception:
            # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ –ø—ñ—Ç–∏ –∑ —á–∞—Ç—É, –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ
            continue
